package validator_test

import (
	"testing"

	"github.com/TAAL-GmbH/mapi/validator"
	"github.com/libsv/go-bt/v2"
	"github.com/ordishs/go-bitcoin"
)

func TestDefaultValidator(t *testing.T) {

	tx, _ := bt.NewTxFromString("02000000010f117b3f9ea4955d5c592c61838bea10096fc88ac1ad08561a9bcabd715a088200000000494830450221008fd0e0330470ac730b9f6b9baf1791b76859cbc327e2e241f3ebeb96561a719602201e73532eb1312a00833af276d636254b8aa3ecbb445324fb4c481f2a493821fb41feffffff02a0860100000000001976a914b7b88045cc16f442a0c3dcb3dc31ecce8d156e7388ac605c042a010000001976a9147a904b8ae0c2f9d74448993029ad3c040ebdd69a88ac66000000")
	parentTx, _ := bt.NewTxFromString("02000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03520101ffffffff0100f2052a01000000232103b12bda06e5a3e439690bf3996f1d4b81289f4747068a5cbb12786df83ae14c18ac00000000")

	// The transaction will be spending 1 or more inputs which reference UTXOs. To validate this transaction
	// is properly signed, we need to populate a map with the necessary information for the validator to use.

	parentData := make(map[validator.Outpoint]validator.OutpointData)

	for _, in := range tx.Inputs {
		outpoint := validator.Outpoint{
			Txid: in.PreviousTxIDStr(),
			Idx:  in.PreviousTxOutIndex,
		}

		outpointData := validator.OutpointData{
			ScriptPubKey: *parentTx.Outputs[in.PreviousTxOutIndex].LockingScript,
			Satoshis:     int64(parentTx.Outputs[in.PreviousTxOutIndex].Satoshis),
		}

		parentData[outpoint] = outpointData
	}

	defaultValidator := validator.New()

	if err := defaultValidator.ValidateTransaction(tx, parentData); err != nil {
		t.Error(err)
	}
}

func TestDefaultValidatorShouldFail(t *testing.T) {

	tx, _ := bt.NewTxFromString("02000000010f117b3f9ea4955d5c592c61838bea10096fc88ac1ad08561a9bcabd715a088200000000494830450221008fd0e0330470ac730b9f6b9baf1791b76859cbc327e2e241f3ebeb96561a719602201e73532eb1312a00833af276d636254b8aa3ecbb445324fb4c481f2a493821fb41feffffff02a0860100000000001976a914b7b88045cc16f442a0c3dcb3dc31ecce8d156e7388ac605c042a010000001976a9147a904b8ae0c2f9d74448993029ad3c040ebdd69a88ac66000000")
	parentTx, _ := bt.NewTxFromString("02000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03520101ffffffff0100f2052a01000000232103b12bda06e5a3e439690bf3996f1d4b81289f4747068a5cbb12786df83ae14c18ac00000000")

	// The transaction will be spending 1 or more inputs which reference UTXOs. To validate this transaction
	// is properly signed, we need to populate a map with the necessary information for the validator to use.

	parentData := make(map[validator.Outpoint]validator.OutpointData)

	for _, in := range tx.Inputs {
		outpoint := validator.Outpoint{
			Txid: in.PreviousTxIDStr(),
			Idx:  in.PreviousTxOutIndex,
		}

		// In order to make this fail, I will put 0 as the satoshis value...
		outpointData := validator.OutpointData{
			ScriptPubKey: *parentTx.Outputs[in.PreviousTxOutIndex].LockingScript,
			Satoshis:     0,
		}

		parentData[outpoint] = outpointData
	}

	defaultValidator := validator.New()

	err := defaultValidator.ValidateTransaction(tx, parentData)

	if err == nil {
		t.Error("Validation should have returned an error")
	}

	if err != nil {
		expected := "Script execution failed: false stack entry at end of script execution"
		if err.Error() != expected {
			t.Errorf("Expected %s, got %s", expected, err.Error())
		}
	}
}

func TestDefaultValidator2(t *testing.T) {

	tx, _ := bt.NewTxFromString("0100000001a7968c39fe10ae04686061ab99dc6774f0ebbd8679e521e6fc944d919d9d19a1020000006a4730440220318d23e6fd7dd5ace6e8dc1888b363a053552f48ecc166403a1cc65db5e16aca02203a9ad254cb262f50c89487ffd72e8ddd8536c07f4b230d13a2ccd1435898e89b412102dd7dce95e52345704bbb4df4e4cfed1f8eaabf8260d33597670e3d232c491089ffffffff013a040000000000001976a9141754f52fc862c7a6106c964c35db7d92a57fec2488ac00000000")
	parentTx, _ := bt.NewTxFromString("0100000002107436992b7dfbcd55f32a96b120c7fa4dc97fbc7b50533bfae57da2e1dcb61a020000006b483045022100d447675a02f3538a90654b25ed7351109307b6d434fd1276c9f329e09ede4a1a02202b1befbbdbb27c87f092ff665326343116046b0a4e2c08cd4f0ae7dd722cb642412103107feff22788a1fc8357240bf450fd7bca4bd45d5f8bac63818c5a7b67b03876ffffffff92f543f4c675f48a789d6ec2a312d52098bc7eb657edd40412c8364f26fd7ae0030000006a47304402204e26e5f83e19ac59ff688b49218d9a1ddf0ea67abc07fa93f4f793594e266c1e02204611dc82c98038f7f6b70de3788beaa7d0ba1525744c6e806b84de0e53c5f963412103c134c904118b148d32492cd17d1183088f708a3e4a7429f3260ff51b9e72c6ccffffffff040000000000000000fde508006a0372756e01050c63727970746f6669676874734dcd087b22696e223a312c22726566223a5b22366136336261353064643736353566373934323463636262633066363339626365353836613864383334316662336435373832383562393030613561653134355f6f31222c22363061613538613361656332383866656462343764326564333930346133636638613563373237306465626463306238383937393231323061653664633132375f6f31222c22663239393537336139303731346161666633646634616462656335346336646539313335373038343134636266663162393838613262393732373036376661625f6f31222c22336136376365633363313662646238343762393732626565326663316330373137633539656463616537626635663438633931666563636661363335616633335f6f31222c22313465323738633638666635323165303931366164376337313361653461303135366537363336316462643362326233353764666236303238653064636137615f6f31222c22613738663561366437326637383731316536366336323131666262643061306266643135616439316264643030343034393238613966616363363364613664395f6f31222c22346261353933353063656165366133356437366334323665613333326338343339663764343732396365323933623464373366666562656539613030396461365f6f31222c22316162366463653161323764653566613362353335303762626337666339346466616337323062313936326166333535636466623764326239393336373431305f6f31222c22373166626133383633343162393332333830656335626665646333613430626365343364343937346465636463393463343139613934613863653564666332335f6f31222c22363161653132323165646438626431646438336332326461326232616237643131346139313239363439366365336664306562613737333236623638613238335f6f31222c22303265343732323732613937666631643564633532613534343165656561636235303638363333623664333036663065336366356466303664346566653334345f6f31222c22626132636666623632613138336361653366663133633066646436346430666264343735323634623330313735303939393339386235646330376238333538305f6f31222c22343062396534373865333766383733636532386364383162666635323532346631383063623538353837376331656139383636343933383039363363646237385f6f31222c22393135393534386635323035316538356565356665373939373939666631333061316331393133616433646335393737336431313766373133316137353063315f6f31222c22343662656562353434633566373939663536636239323136313366633432656361366432353665656663653863363561366636306630643131646432323664375f6f31222c22643637626635343534643032646166636234333530653635383939643839306130363630653531343432646330633066366637623235366138356431396561635f6f31222c22633263346339373165383562343939633239613861623231343866643332346665313262353530623866346635373635386134363836653031316438666435385f6f31222c22373839316531333932616238303732383865366536393238656164656161346135373737613264353130393233393037646235343361653932663364323430625f6f31225d2c226f7574223a5b2239323732373765303061653463626563626133353337323263666231636164383636366165613938333561383638363365333531656434363334633937636365222c2238366135303037323035666233663563336361613834383161363531356664316537393837333266323565323030316537363261656531653362306662363561225d2c2264656c223a5b5d2c22637265223a5b22314b694c6641377663633643455862505a5368755151326d4a6a6739703832456837225d2c2265786563223a5b7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c22626567696e222c5b313636343132303638393434385d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c227265736f6c7665222c5b2239333666366133616436313362313936396531366235346264333532303763326366656336376136363239343232353366643437323833363931323030376162222c313636343132303638393538352c305d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c227265736f6c7665222c5b2237636435313261643436646665623633313734343132313836363836653735396332323666616338643938353230363935336237303230656164363635643163222c313636343132303731333335322c302c2231343730303864393461353936393536336539613333303732303932346362373432323433313466613066616432666461666633656237303131646164353537222c5b302c302c305d5d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c227265736f6c7665222c5b2236326639343365656566613262373332383533393932653235346435366431323866613266396463316539616630386336323939333132633062343362396133222c313636343132303731343332372c305d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c227265736f6c7665222c5b2233353338346239383966346562636536366233353430353366633162303731343866363935343634306266643164353237383632663537316231626462613932222c313636343132303732373733392c302c2233363665333534356163353164393732356236306264393662396463393131306139336266643766383234633735356339656664643032656637373536346665222c5b302c302c305d5d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c2266696e616c697a65222c5b5d5d7d5d7d01000000000000001976a914cd43ba65ce83778ef04b207de14498440f3bd46c88ac44040000000000001976a914cd43ba65ce83778ef04b207de14498440f3bd46c88aca31b0100000000001976a9144f7d6a485e09770f947c0ba38d15050a5a80b6fa88ac00000000")

	// The transaction will be spending 1 or more inputs which reference UTXOs. To validate this transaction
	// is properly signed, we need to populate a map with the necessary information for the validator to use.

	parentData := make(map[validator.Outpoint]validator.OutpointData)

	for _, in := range tx.Inputs {
		outpoint := validator.Outpoint{
			Txid: in.PreviousTxIDStr(),
			Idx:  in.PreviousTxOutIndex,
		}

		outpointData := validator.OutpointData{
			ScriptPubKey: *parentTx.Outputs[in.PreviousTxOutIndex].LockingScript,
			Satoshis:     int64(parentTx.Outputs[in.PreviousTxOutIndex].Satoshis),
		}

		parentData[outpoint] = outpointData
	}

	defaultValidator := validator.New()
	if err := defaultValidator.ValidateTransaction(tx, parentData); err != nil {
		t.Error(err)
	}
}

func TestDefaultValidatorMulti(t *testing.T) {
	// All of these transactions should pass...
	txs := []string{
		"02000000021c2bff8cb2e37f9018ee6e47512492ee65fa2012ce6c5998b6a2e9583974dabc010000008b473044022029d0a05f2601ee89d63e7a61a8f5877f20e7a48214d3aa6e8421bb938feec8a80220785478ad3019ec91c5545199539ccfd5704021f1c962becd48e0264f7e16de86c32102207d0891b88c096f1f8503a684c387b4f9440c80707118ec14227adadd15db7820c8925e7b008668089d3ae1fc1cf450f7f45f0b4af43cd7d30b84446ecb374d6dffffffff215b80a60dc756a488066fa95b90cceec4fd731ef489d51047b41e7aa5a95bf0040000006a47304402203951e4ebccaa652e360d8b2fab2ea9936a1eec19f27d6a1d9791c32b4e46540e02202529a8af4795bcf7dfe9dbb4826bb9f1467cc255de947e8c07a5961287aa713e41210253fe24fd82a07d02010d9ca82f99870c0e5e7402a9b26c9d25ae753e40754c4dffffffff0544ca0203000000001976a9142e0fa8744508c13de3fe065d7ed2016370cc433f88ac8408000000000000fd6103a914179b4c7a45646a509473df5a444b6e18b723bd148876a91497e5faf26e48d9015269c2592c6e4886ac2d161288ac6a4d2d037b227469746c65223a2246726f672043617274656c202331373935222c226465736372697074696f6e223a2246726f6773206d75737420756e69746520746f2064657374726f7920746865206c697a617264732e20446f20796f75206861766520776861742069742074616b65733f222c22696d616765223a22623a2f2f61353333663036313134353665333438326536306136666433346337663165366265393365663134303261396639363139313539306334303534326230306335222c226e756d626572223a313739352c22736572696573223a333639302c2273636f7265223a2235392e3131222c2272616e6b223a333033382c22726172697479223a22436f6d6d6f6e222c2261747472696275746573223a5b7b2274726169745f74797065223a224261636b67726f756e64222c2276616c7565223a225465616c204a756d626c65222c22636f756e74223a3131352c22726172697479223a22556e636f6d6d6f6e227d2c7b2274726169745f74797065223a2246726f67222c2276616c7565223a22526574726f20426c7565222c22636f756e74223a3433322c22726172697479223a22436f6d6d6f6e227d2c7b2274726169745f74797065223a22426f6479222c2276616c7565223a22507572706c6520466c616e6e656c222c22636f756e74223a36342c22726172697479223a22436f6d6d6f6e227d2c7b2274726169745f74797065223a224d6f757468222c2276616c7565223a224e6f204d6f757468204974656d222c22636f756e74223a313335382c22726172697479223a22436f6d6d6f6e227d2c7b2274726169745f74797065223a2245796573222c2276616c7565223a224f72616e676520457965205061746368222c22636f756e74223a3130332c22726172697479223a2252617265227d2c7b2274726169745f74797065223a2248656164222c2276616c7565223a2250657420436869636b222c22636f756e74223a36392c22726172697479223a22436f6d6d6f6e227d2c7b2274726169745f74797065223a2248616e64222c2276616c7565223a224e6f2048616e64204974656d222c22636f756e74223a3939322c22726172697479223a22436f6d6d6f6e227d5d7de4d41e00000000001976a91497df51a1dea118bd689099125b42d75e48d2f5ec88ac30e51700000000001976a91484c9b30c0e3529a6d260b361f70902f962d4b77088acec93e340000000001976a914863f485dae59224cc5993b26bf50da2e7c368c8a88ac00000000",
		"0100000001452fcd2374c548a6bac1aa76ae8efe6bde1986a8c1d67b8523eea24510769b83020000006a47304402202e032a7595a57ffd7b904814b03b971dffa62adcbb233d0eb55e0520ee385d6402205f8fbe55c1a056f5b712df4e13747dd6520d11d40760b86f22fa3e89383148834121021dc87a5ec40540d21076ecb615440eccecb36c1c6fa950f81cab6d51745ad613ffffffff0396000000000000001976a91425ede77d31c4791504fd5121f70772722118744e88ac0000000000000000f5006a4cf17b0a2020202020202020202020206f7267616e697a6174696f6e3a204861737465204172636164650a202020202020202020202020636f6e746573743a204c6f73742c0a2020202020202020202020206c6576656c3a204e616e6f2c0a2020202020202020202020206576656e74547970653a20696e7075742c0a2020202020202020202020206576656e7449643a2030326665373330362d656137372d343736652d626462612d3666626134353330303061352c0a20202020202020202020202076616c75653a2036342c0a202020202020202020202020636f73743a2032313336390a202020202020202020207d7d14030000000000001976a91431302ded0a12c8c0559951ac9315685f97e592df88ac00000000",
		"01000000018f06f2c9a3109dc1f69ab0f37a3c155a2db6928c3cc79c0270640f2571f261d1020000006a473044022013f11686546b575711b68e9194c74787f36a2028cbbab0afc974bf6ab6807f0b02207e9bc0134bca25413bd14bc84cb9316f9188a3cf49dbf9829ed9e60bb730d5d3412103b9ac16dfb008350c1a6eeb8e25c8455beab90f7cc328b0194059a6a87622139fffffffff0396000000000000001976a9145721fc851ee528b2059eb7af160ffa8e511e62f388ac0000000000000000fdff00006a4cfb7b0a2020202020202020202020206f7267616e697a6174696f6e3a204861737465204172636164650a202020202020202020202020636f6e746573743a20527566662052756e6e65722c0a2020202020202020202020206c6576656c3a204e616e6f2c0a2020202020202020202020206576656e74547970653a20696e7075742c0a2020202020202020202020206576656e7449643a2065303238396363392d363137362d343666342d393430352d3763316137653538333266622c0a20202020202020202020202076616c75653a2036383934382c0a202020202020202020202020636f73743a2032313336390a202020202020202020207d7df0020000000000001976a914afdba4a0962bf2ff5e6b62580a247e8e29f97d3788ac00000000",
		//"010000000172e2370a0450b603a2ec9f076311187c3c111adf501d49933c0133f146ddedeb0000000049483045022100bb6fec82228ef3843d7b474396bf70dda8f4d3d56791142c8f2e7467e7c07a2402203edbd8482646764dcde5b48a5f38548a59cd85e63f59782cb37a429b890f5ae241ffffffff01b2100e0000000000794c5320202066343364343562313463353365646139623236373638376236323431613637316231373838393139393936666364313039323165363862616462386131636139203938363430323434303134342020207521023fd4f314a028d9fe75f166856773e99824f3d8cf1bb818bd767a13de063a153eac00000000",
	}

	b, err := bitcoin.New("localhost", 8332, "bitcoin", "bitcoin", false)
	if err != nil {
		t.Error(err)
		t.FailNow()
	}

	for txIndex, txStr := range txs {
		tx, _ := bt.NewTxFromString(txStr)

		parentData := make(map[validator.Outpoint]validator.OutpointData)

		for inIndex, in := range tx.Inputs {

			parentHex, err := b.GetRawTransactionHex(in.PreviousTxIDStr())
			if err != nil {
				t.Error(txIndex, inIndex, err)
				t.FailNow()
			}

			parentTx, err := bt.NewTxFromString(*parentHex)
			if err != nil {
				t.Error(err)
				t.FailNow()
			}

			outpoint := validator.Outpoint{
				Txid: in.PreviousTxIDStr(),
				Idx:  in.PreviousTxOutIndex,
			}

			outpointData := validator.OutpointData{
				ScriptPubKey: *parentTx.Outputs[in.PreviousTxOutIndex].LockingScript,
				Satoshis:     int64(parentTx.Outputs[in.PreviousTxOutIndex].Satoshis),
			}

			parentData[outpoint] = outpointData
		}

		defaultValidator := validator.New()
		if err := defaultValidator.ValidateTransaction(tx, parentData); err != nil {
			t.Error(err)
		}
	}

}
