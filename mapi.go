// Package mapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package mapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Api_KeyScopes = "Api_Key.Scopes"
	BearerScopes  = "Bearer.Scopes"
)

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	ApiVersion *string    `json:"apiVersion,omitempty"`
	MinerId    *string    `json:"minerId"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Callback defines model for Callback.
type Callback struct {
	Token *string `json:"token"`
	Url   *string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Code    float32 `json:"code"`
	Message string  `json:"message"`
}

// Fee defines model for Fee.
type Fee struct {
	FeeType   *string    `json:"feeType"`
	MiningFee *FeeAmount `json:"miningFee,omitempty"`
	RelayFee  *FeeAmount `json:"relayFee,omitempty"`
}

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    *uint64 `json:"bytes,omitempty"`
	Satoshis *uint64 `json:"satoshis,omitempty"`
}

// FeeQuote defines model for FeeQuote.
type FeeQuote struct {
	ApiVersion *string    `json:"apiVersion,omitempty"`
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	Fees       *[]Fee     `json:"fees"`
	MinerId    *string    `json:"minerId"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// PolicyQuote defines model for PolicyQuote.
type PolicyQuote struct {
	ApiVersion *string               `json:"apiVersion,omitempty"`
	Callbacks  *[]Callback           `json:"callbacks"`
	ExpiryTime *time.Time            `json:"expiryTime,omitempty"`
	Fees       *[]Fee                `json:"fees"`
	MinerId    *string               `json:"minerId"`
	Policies   *PolicyQuote_Policies `json:"policies"`
	Timestamp  *time.Time            `json:"timestamp,omitempty"`
}

// PolicyQuote_Policies defines model for PolicyQuote.Policies.
type PolicyQuote_Policies struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubmitTransaction defines model for SubmitTransaction.
type SubmitTransaction struct {
	CallbackToken *string `json:"callbackToken"`
	CallbackUrl   *string `json:"callbackUrl"`
	MerkleProof   *bool   `json:"merkleProof"`
	RawTx         *string `json:"rawTx,omitempty"`
}

// SubmitTransactionConflicted defines model for SubmitTransactionConflicted.
type SubmitTransactionConflicted struct {
	Hex  *string `json:"hex"`
	Size *int64  `json:"size,omitempty"`
	Txid *string `json:"txid"`
}

// SubmitTransactionResponse defines model for SubmitTransactionResponse.
type SubmitTransactionResponse struct {
	ApiVersion                *string                        `json:"apiVersion,omitempty"`
	ConflictedWith            *[]SubmitTransactionConflicted `json:"conflictedWith"`
	CurrentHighestBlockHash   *string                        `json:"currentHighestBlockHash"`
	CurrentHighestBlockHeight *int64                         `json:"currentHighestBlockHeight"`
	MinerId                   *string                        `json:"minerId"`
	Status                    *string                        `json:"status,omitempty"`
	StatusCode                *float32                       `json:"statusCode,omitempty"`
	Timestamp                 *time.Time                     `json:"timestamp,omitempty"`
	TxSecondMempoolExpiry     *int64                         `json:"txSecondMempoolExpiry"`
	Txid                      *string                        `json:"txid,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	ApiVersion            *string    `json:"apiVersion,omitempty"`
	BlockHash             *string    `json:"blockHash"`
	BlockHeight           *int64     `json:"blockHeight"`
	Confirmations         *int64     `json:"confirmations"`
	MinerId               *string    `json:"minerId"`
	Status                *string    `json:"status,omitempty"`
	StatusCode            *float32   `json:"statusCode,omitempty"`
	Timestamp             *time.Time `json:"timestamp,omitempty"`
	TxSecondMempoolExpiry *int32     `json:"txSecondMempoolExpiry"`
	Txid                  *string    `json:"txid,omitempty"`
}

// PostMapiV2TxJSONBody defines parameters for PostMapiV2Tx.
type PostMapiV2TxJSONBody = SubmitTransaction

// PostMapiV2TxsJSONBody defines parameters for PostMapiV2Txs.
type PostMapiV2TxsJSONBody = []SubmitTransaction

// PostMapiV2TxsParams defines parameters for PostMapiV2Txs.
type PostMapiV2TxsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	DefaultCallbackUrl *string `form:"defaultCallbackUrl,omitempty" json:"defaultCallbackUrl,omitempty"`

	// Default access token for notification callback endpoint.
	DefaultCallbackToken *string `form:"defaultCallbackToken,omitempty" json:"defaultCallbackToken,omitempty"`
}

// PostMapiV2TxJSONRequestBody defines body for PostMapiV2Tx for application/json ContentType.
type PostMapiV2TxJSONRequestBody = PostMapiV2TxJSONBody

// PostMapiV2TxsJSONRequestBody defines body for PostMapiV2Txs for application/json ContentType.
type PostMapiV2TxsJSONRequestBody = PostMapiV2TxsJSONBody

// Getter for additional properties for PolicyQuote_Policies. Returns the specified
// element and whether it was found
func (a PolicyQuote_Policies) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyQuote_Policies
func (a *PolicyQuote_Policies) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyQuote_Policies to handle AdditionalProperties
func (a *PolicyQuote_Policies) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyQuote_Policies to handle AdditionalProperties
func (a PolicyQuote_Policies) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMapiV2FeeQuote request
	GetMapiV2FeeQuote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapiV2PolicyQuote request
	GetMapiV2PolicyQuote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMapiV2Tx request with any body
	PostMapiV2TxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMapiV2Tx(ctx context.Context, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapiV2TxId request
	GetMapiV2TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMapiV2Txs request with any body
	PostMapiV2TxsWithBody(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMapiV2Txs(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMapiV2FeeQuote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2FeeQuoteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapiV2PolicyQuote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2PolicyQuoteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2TxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2Tx(ctx context.Context, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapiV2TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2TxIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2TxsWithBody(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2Txs(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMapiV2FeeQuoteRequest generates requests for GetMapiV2FeeQuote
func NewGetMapiV2FeeQuoteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/feeQuote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapiV2PolicyQuoteRequest generates requests for GetMapiV2PolicyQuote
func NewGetMapiV2PolicyQuoteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/policyQuote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMapiV2TxRequest calls the generic PostMapiV2Tx builder with application/json body
func NewPostMapiV2TxRequest(server string, body PostMapiV2TxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMapiV2TxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMapiV2TxRequestWithBody generates requests for PostMapiV2Tx with any type of body
func NewPostMapiV2TxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMapiV2TxIdRequest generates requests for GetMapiV2TxId
func NewGetMapiV2TxIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMapiV2TxsRequest calls the generic PostMapiV2Txs builder with application/json body
func NewPostMapiV2TxsRequest(server string, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMapiV2TxsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostMapiV2TxsRequestWithBody generates requests for PostMapiV2Txs with any type of body
func NewPostMapiV2TxsRequestWithBody(server string, params *PostMapiV2TxsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DefaultCallbackUrl != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "defaultCallbackUrl", runtime.ParamLocationQuery, *params.DefaultCallbackUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultCallbackToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "defaultCallbackToken", runtime.ParamLocationQuery, *params.DefaultCallbackToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMapiV2FeeQuote request
	GetMapiV2FeeQuoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2FeeQuoteResponse, error)

	// GetMapiV2PolicyQuote request
	GetMapiV2PolicyQuoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2PolicyQuoteResponse, error)

	// PostMapiV2Tx request with any body
	PostMapiV2TxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error)

	PostMapiV2TxWithResponse(ctx context.Context, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error)

	// GetMapiV2TxId request
	GetMapiV2TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxIdResponse, error)

	// PostMapiV2Txs request with any body
	PostMapiV2TxsWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error)

	PostMapiV2TxsWithResponse(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error)
}

type GetMapiV2FeeQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeeQuote
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMapiV2FeeQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2FeeQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapiV2PolicyQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyQuote
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMapiV2PolicyQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2PolicyQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMapiV2TxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmitTransactionResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostMapiV2TxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMapiV2TxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapiV2TxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMapiV2TxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2TxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMapiV2TxsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmitTransactionResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostMapiV2TxsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMapiV2TxsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMapiV2FeeQuoteWithResponse request returning *GetMapiV2FeeQuoteResponse
func (c *ClientWithResponses) GetMapiV2FeeQuoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2FeeQuoteResponse, error) {
	rsp, err := c.GetMapiV2FeeQuote(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2FeeQuoteResponse(rsp)
}

// GetMapiV2PolicyQuoteWithResponse request returning *GetMapiV2PolicyQuoteResponse
func (c *ClientWithResponses) GetMapiV2PolicyQuoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2PolicyQuoteResponse, error) {
	rsp, err := c.GetMapiV2PolicyQuote(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2PolicyQuoteResponse(rsp)
}

// PostMapiV2TxWithBodyWithResponse request with arbitrary body returning *PostMapiV2TxResponse
func (c *ClientWithResponses) PostMapiV2TxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error) {
	rsp, err := c.PostMapiV2TxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxResponse(rsp)
}

func (c *ClientWithResponses) PostMapiV2TxWithResponse(ctx context.Context, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error) {
	rsp, err := c.PostMapiV2Tx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxResponse(rsp)
}

// GetMapiV2TxIdWithResponse request returning *GetMapiV2TxIdResponse
func (c *ClientWithResponses) GetMapiV2TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxIdResponse, error) {
	rsp, err := c.GetMapiV2TxId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2TxIdResponse(rsp)
}

// PostMapiV2TxsWithBodyWithResponse request with arbitrary body returning *PostMapiV2TxsResponse
func (c *ClientWithResponses) PostMapiV2TxsWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error) {
	rsp, err := c.PostMapiV2TxsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxsResponse(rsp)
}

func (c *ClientWithResponses) PostMapiV2TxsWithResponse(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error) {
	rsp, err := c.PostMapiV2Txs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxsResponse(rsp)
}

// ParseGetMapiV2FeeQuoteResponse parses an HTTP response from a GetMapiV2FeeQuoteWithResponse call
func ParseGetMapiV2FeeQuoteResponse(rsp *http.Response) (*GetMapiV2FeeQuoteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2FeeQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeeQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMapiV2PolicyQuoteResponse parses an HTTP response from a GetMapiV2PolicyQuoteWithResponse call
func ParseGetMapiV2PolicyQuoteResponse(rsp *http.Response) (*GetMapiV2PolicyQuoteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2PolicyQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMapiV2TxResponse parses an HTTP response from a PostMapiV2TxWithResponse call
func ParsePostMapiV2TxResponse(rsp *http.Response) (*PostMapiV2TxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMapiV2TxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMapiV2TxIdResponse parses an HTTP response from a GetMapiV2TxIdWithResponse call
func ParseGetMapiV2TxIdResponse(rsp *http.Response) (*GetMapiV2TxIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2TxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMapiV2TxsResponse parses an HTTP response from a PostMapiV2TxsWithResponse call
func ParsePostMapiV2TxsResponse(rsp *http.Response) (*PostMapiV2TxsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMapiV2TxsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a fee quote.
	// (GET /mapi/v2/feeQuote)
	GetMapiV2FeeQuote(ctx echo.Context) error
	// Get a policy quote.
	// (GET /mapi/v2/policyQuote)
	GetMapiV2PolicyQuote(ctx echo.Context) error
	// Submit a transaction.
	// (POST /mapi/v2/tx)
	PostMapiV2Tx(ctx echo.Context) error
	// Query transaction status.
	// (GET /mapi/v2/tx/{id})
	GetMapiV2TxId(ctx echo.Context, id string) error
	// Submit multiple transactions.
	// (POST /mapi/v2/txs)
	PostMapiV2Txs(ctx echo.Context, params PostMapiV2TxsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMapiV2FeeQuote converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2FeeQuote(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2FeeQuote(ctx)
	return err
}

// GetMapiV2PolicyQuote converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2PolicyQuote(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2PolicyQuote(ctx)
	return err
}

// PostMapiV2Tx converts echo context to params.
func (w *ServerInterfaceWrapper) PostMapiV2Tx(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMapiV2Tx(ctx)
	return err
}

// GetMapiV2TxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2TxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2TxId(ctx, id)
	return err
}

// PostMapiV2Txs converts echo context to params.
func (w *ServerInterfaceWrapper) PostMapiV2Txs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostMapiV2TxsParams
	// ------------- Optional query parameter "defaultCallbackUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultCallbackUrl", ctx.QueryParams(), &params.DefaultCallbackUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defaultCallbackUrl: %s", err))
	}

	// ------------- Optional query parameter "defaultCallbackToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultCallbackToken", ctx.QueryParams(), &params.DefaultCallbackToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defaultCallbackToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMapiV2Txs(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/mapi/v2/feeQuote", wrapper.GetMapiV2FeeQuote)
	router.GET(baseURL+"/mapi/v2/policyQuote", wrapper.GetMapiV2PolicyQuote)
	router.POST(baseURL+"/mapi/v2/tx", wrapper.PostMapiV2Tx)
	router.GET(baseURL+"/mapi/v2/tx/:id", wrapper.GetMapiV2TxId)
	router.POST(baseURL+"/mapi/v2/txs", wrapper.PostMapiV2Txs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+NQWXPPGc3xanpb/BQAA//+68mkLLh4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
