// Package mapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package mapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for FeeFeeType.
const (
	Data     FeeFeeType = "data"
	Standard FeeFeeType = "standard"
)

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	ApiVersion string    `json:"apiVersion"`
	MinerId    string    `json:"minerId"`
	Timestamp  time.Time `json:"timestamp"`
}

// ChainInfo defines model for ChainInfo.
type ChainInfo struct {
	BlockHash   *string `json:"blockHash,omitempty"`
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error interface{}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorConflict defines model for ErrorConflict.
type ErrorConflict struct {
	ConflictedWith *interface{} `json:"conflictedWith,omitempty"`
	Detail         interface{}  `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Longer description of error
	Detail string `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Error code
	Status int `json:"status"`

	// Descriptive text for error
	Title string `json:"title"`

	// Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// Fee defines model for Fee.
type Fee struct {
	FeeType   FeeFeeType `json:"feeType"`
	MiningFee FeeAmount  `json:"miningFee"`
	RelayFee  FeeAmount  `json:"relayFee"`
}

// FeeFeeType defines model for Fee.FeeType.
type FeeFeeType string

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    uint64 `json:"bytes"`
	Satoshis uint64 `json:"satoshis"`
}

// FeeQuote defines model for FeeQuote.
type FeeQuote struct {
	ExpiryTime time.Time `json:"expiryTime"`
	Fees       *[]Fee    `json:"fees"`
}

// Policy defines model for Policy.
type Policy struct {
	ApiVersion string                  `json:"apiVersion"`
	ExpiryTime time.Time               `json:"expiryTime"`
	Fees       *[]Fee                  `json:"fees"`
	MinerId    string                  `json:"minerId"`
	Policies   *map[string]interface{} `json:"policies"`
	Timestamp  time.Time               `json:"timestamp"`
}

// SubmitTransactionModel defines model for SubmitTransactionModel.
type SubmitTransactionModel struct {
	RawTx string `json:"rawTx"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	ApiVersion  string    `json:"apiVersion"`
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	MinerId     string    `json:"minerId"`
	Timestamp   time.Time `json:"timestamp"`
	Tx          string    `json:"tx"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	ConflictedWith *[]string `json:"conflictedWith"`
	Status         int       `json:"status"`
	Title          string    `json:"title"`

	// Transaction status
	TxStatus *string `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	ApiVersion     string    `json:"apiVersion"`
	BlockHash      *string   `json:"blockHash,omitempty"`
	BlockHeight    *uint64   `json:"blockHeight,omitempty"`
	ConflictedWith *[]string `json:"conflictedWith"`
	MinerId        string    `json:"minerId"`
	Status         int       `json:"status"`
	Timestamp      time.Time `json:"timestamp"`
	Title          string    `json:"title"`

	// Transaction status
	TxStatus *string `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	ApiVersion   string         `json:"apiVersion"`
	BlockHash    *string        `json:"blockHash,omitempty"`
	BlockHeight  *uint64        `json:"blockHeight,omitempty"`
	MinerId      string         `json:"minerId"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions *[]interface{} `json:"transactions,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	ApiVersion  string    `json:"apiVersion"`
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	MinerId     string    `json:"minerId"`
	Timestamp   time.Time `json:"timestamp"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionSubmitStatus defines model for TransactionSubmitStatus.
type TransactionSubmitStatus struct {
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// MerkleProof defines model for merkleProof.
type MerkleProof = string

// PostMapiV2TxJSONBody defines parameters for PostMapiV2Tx.
type PostMapiV2TxJSONBody = SubmitTransactionModel

// PostMapiV2TxParams defines parameters for PostMapiV2Tx.
type PostMapiV2TxParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`
}

// PostMapiV2TxsJSONBody defines parameters for PostMapiV2Txs.
type PostMapiV2TxsJSONBody = []string

// PostMapiV2TxsParams defines parameters for PostMapiV2Txs.
type PostMapiV2TxsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`
}

// PostMapiV2TxJSONRequestBody defines body for PostMapiV2Tx for application/json ContentType.
type PostMapiV2TxJSONRequestBody = PostMapiV2TxJSONBody

// PostMapiV2TxsJSONRequestBody defines body for PostMapiV2Txs for application/json ContentType.
type PostMapiV2TxsJSONRequestBody = PostMapiV2TxsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMapiV2Policy request
	GetMapiV2Policy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMapiV2Tx request with any body
	PostMapiV2TxWithBody(ctx context.Context, params *PostMapiV2TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMapiV2Tx(ctx context.Context, params *PostMapiV2TxParams, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapiV2TxId request
	GetMapiV2TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapiV2TxStatusId request
	GetMapiV2TxStatusId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMapiV2Txs request with any body
	PostMapiV2TxsWithBody(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMapiV2Txs(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMapiV2Policy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2PolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2TxWithBody(ctx context.Context, params *PostMapiV2TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2Tx(ctx context.Context, params *PostMapiV2TxParams, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapiV2TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2TxIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapiV2TxStatusId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapiV2TxStatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2TxsWithBody(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMapiV2Txs(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMapiV2TxsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMapiV2PolicyRequest generates requests for GetMapiV2Policy
func NewGetMapiV2PolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMapiV2TxRequest calls the generic PostMapiV2Tx builder with application/json body
func NewPostMapiV2TxRequest(server string, params *PostMapiV2TxParams, body PostMapiV2TxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMapiV2TxRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostMapiV2TxRequestWithBody generates requests for PostMapiV2Tx with any type of body
func NewPostMapiV2TxRequestWithBody(server string, params *PostMapiV2TxParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	return req, nil
}

// NewGetMapiV2TxIdRequest generates requests for GetMapiV2TxId
func NewGetMapiV2TxIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapiV2TxStatusIdRequest generates requests for GetMapiV2TxStatusId
func NewGetMapiV2TxStatusIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/txStatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMapiV2TxsRequest calls the generic PostMapiV2Txs builder with application/json body
func NewPostMapiV2TxsRequest(server string, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMapiV2TxsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostMapiV2TxsRequestWithBody generates requests for PostMapiV2Txs with any type of body
func NewPostMapiV2TxsRequestWithBody(server string, params *PostMapiV2TxsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapi/v2/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMapiV2Policy request
	GetMapiV2PolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2PolicyResponse, error)

	// PostMapiV2Tx request with any body
	PostMapiV2TxWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error)

	PostMapiV2TxWithResponse(ctx context.Context, params *PostMapiV2TxParams, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error)

	// GetMapiV2TxId request
	GetMapiV2TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxIdResponse, error)

	// GetMapiV2TxStatusId request
	GetMapiV2TxStatusIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxStatusIdResponse, error)

	// PostMapiV2Txs request with any body
	PostMapiV2TxsWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error)

	PostMapiV2TxsWithResponse(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error)
}

type GetMapiV2PolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetMapiV2PolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2PolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMapiV2TxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON201      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON402      *ErrorFee
	JSON409      *ErrorConflict
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r PostMapiV2TxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMapiV2TxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapiV2TxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
}

// Status returns HTTPResponse.Status
func (r GetMapiV2TxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2TxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapiV2TxStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
}

// Status returns HTTPResponse.Status
func (r GetMapiV2TxStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapiV2TxStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMapiV2TxsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
}

// Status returns HTTPResponse.Status
func (r PostMapiV2TxsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMapiV2TxsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMapiV2PolicyWithResponse request returning *GetMapiV2PolicyResponse
func (c *ClientWithResponses) GetMapiV2PolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapiV2PolicyResponse, error) {
	rsp, err := c.GetMapiV2Policy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2PolicyResponse(rsp)
}

// PostMapiV2TxWithBodyWithResponse request with arbitrary body returning *PostMapiV2TxResponse
func (c *ClientWithResponses) PostMapiV2TxWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error) {
	rsp, err := c.PostMapiV2TxWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxResponse(rsp)
}

func (c *ClientWithResponses) PostMapiV2TxWithResponse(ctx context.Context, params *PostMapiV2TxParams, body PostMapiV2TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxResponse, error) {
	rsp, err := c.PostMapiV2Tx(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxResponse(rsp)
}

// GetMapiV2TxIdWithResponse request returning *GetMapiV2TxIdResponse
func (c *ClientWithResponses) GetMapiV2TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxIdResponse, error) {
	rsp, err := c.GetMapiV2TxId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2TxIdResponse(rsp)
}

// GetMapiV2TxStatusIdWithResponse request returning *GetMapiV2TxStatusIdResponse
func (c *ClientWithResponses) GetMapiV2TxStatusIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMapiV2TxStatusIdResponse, error) {
	rsp, err := c.GetMapiV2TxStatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapiV2TxStatusIdResponse(rsp)
}

// PostMapiV2TxsWithBodyWithResponse request with arbitrary body returning *PostMapiV2TxsResponse
func (c *ClientWithResponses) PostMapiV2TxsWithBodyWithResponse(ctx context.Context, params *PostMapiV2TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error) {
	rsp, err := c.PostMapiV2TxsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxsResponse(rsp)
}

func (c *ClientWithResponses) PostMapiV2TxsWithResponse(ctx context.Context, params *PostMapiV2TxsParams, body PostMapiV2TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMapiV2TxsResponse, error) {
	rsp, err := c.PostMapiV2Txs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMapiV2TxsResponse(rsp)
}

// ParseGetMapiV2PolicyResponse parses an HTTP response from a GetMapiV2PolicyWithResponse call
func ParseGetMapiV2PolicyResponse(rsp *http.Response) (*GetMapiV2PolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2PolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMapiV2TxResponse parses an HTTP response from a PostMapiV2TxWithResponse call
func ParsePostMapiV2TxResponse(rsp *http.Response) (*PostMapiV2TxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMapiV2TxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetMapiV2TxIdResponse parses an HTTP response from a GetMapiV2TxIdWithResponse call
func ParseGetMapiV2TxIdResponse(rsp *http.Response) (*GetMapiV2TxIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2TxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapiV2TxStatusIdResponse parses an HTTP response from a GetMapiV2TxStatusIdWithResponse call
func ParseGetMapiV2TxStatusIdResponse(rsp *http.Response) (*GetMapiV2TxStatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapiV2TxStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMapiV2TxsResponse parses an HTTP response from a PostMapiV2TxsWithResponse call
func ParsePostMapiV2TxsResponse(rsp *http.Response) (*PostMapiV2TxsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMapiV2TxsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the miner policy
	// (GET /mapi/v2/policy)
	GetMapiV2Policy(ctx echo.Context) error
	// Submit a transaction.
	// (POST /mapi/v2/tx)
	PostMapiV2Tx(ctx echo.Context, params PostMapiV2TxParams) error
	// Query transaction
	// (GET /mapi/v2/tx/{id})
	GetMapiV2TxId(ctx echo.Context, id string) error
	// Query transaction status.
	// (GET /mapi/v2/txStatus/{id})
	GetMapiV2TxStatusId(ctx echo.Context, id string) error
	// Submit multiple transactions.
	// (POST /mapi/v2/txs)
	PostMapiV2Txs(ctx echo.Context, params PostMapiV2TxsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMapiV2Policy converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2Policy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2Policy(ctx)
	return err
}

// PostMapiV2Tx converts echo context to params.
func (w *ServerInterfaceWrapper) PostMapiV2Tx(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostMapiV2TxParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMapiV2Tx(ctx, params)
	return err
}

// GetMapiV2TxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2TxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2TxId(ctx, id)
	return err
}

// GetMapiV2TxStatusId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapiV2TxStatusId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapiV2TxStatusId(ctx, id)
	return err
}

// PostMapiV2Txs converts echo context to params.
func (w *ServerInterfaceWrapper) PostMapiV2Txs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostMapiV2TxsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMapiV2Txs(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/mapi/v2/policy", wrapper.GetMapiV2Policy)
	router.POST(baseURL+"/mapi/v2/tx", wrapper.PostMapiV2Tx)
	router.GET(baseURL+"/mapi/v2/tx/:id", wrapper.GetMapiV2TxId)
	router.GET(baseURL+"/mapi/v2/txStatus/:id", wrapper.GetMapiV2TxStatusId)
	router.POST(baseURL+"/mapi/v2/txs", wrapper.PostMapiV2Txs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
