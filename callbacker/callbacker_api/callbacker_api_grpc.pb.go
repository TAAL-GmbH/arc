// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: callbacker/callbacker_api/callbacker_api.proto

package callbacker_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CallbackerAPI_Health_FullMethodName           = "/callbacker_api.CallbackerAPI/Health"
	CallbackerAPI_RegisterCallback_FullMethodName = "/callbacker_api.CallbackerAPI/RegisterCallback"
)

// CallbackerAPIClient is the client API for CallbackerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackerAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	RegisterCallback(ctx context.Context, in *Callback, opts ...grpc.CallOption) (*RegisterCallbackResponse, error)
}

type callbackerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackerAPIClient(cc grpc.ClientConnInterface) CallbackerAPIClient {
	return &callbackerAPIClient{cc}
}

func (c *callbackerAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CallbackerAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackerAPIClient) RegisterCallback(ctx context.Context, in *Callback, opts ...grpc.CallOption) (*RegisterCallbackResponse, error) {
	out := new(RegisterCallbackResponse)
	err := c.cc.Invoke(ctx, CallbackerAPI_RegisterCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackerAPIServer is the server API for CallbackerAPI service.
// All implementations must embed UnimplementedCallbackerAPIServer
// for forward compatibility
type CallbackerAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	RegisterCallback(context.Context, *Callback) (*RegisterCallbackResponse, error)
	mustEmbedUnimplementedCallbackerAPIServer()
}

// UnimplementedCallbackerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackerAPIServer struct {
}

func (UnimplementedCallbackerAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCallbackerAPIServer) RegisterCallback(context.Context, *Callback) (*RegisterCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCallback not implemented")
}
func (UnimplementedCallbackerAPIServer) mustEmbedUnimplementedCallbackerAPIServer() {}

// UnsafeCallbackerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackerAPIServer will
// result in compilation errors.
type UnsafeCallbackerAPIServer interface {
	mustEmbedUnimplementedCallbackerAPIServer()
}

func RegisterCallbackerAPIServer(s grpc.ServiceRegistrar, srv CallbackerAPIServer) {
	s.RegisterService(&CallbackerAPI_ServiceDesc, srv)
}

func _CallbackerAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackerAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackerAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackerAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackerAPI_RegisterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Callback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackerAPIServer).RegisterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackerAPI_RegisterCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackerAPIServer).RegisterCallback(ctx, req.(*Callback))
	}
	return interceptor(ctx, in, info, handler)
}

// CallbackerAPI_ServiceDesc is the grpc.ServiceDesc for CallbackerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "callbacker_api.CallbackerAPI",
	HandlerType: (*CallbackerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _CallbackerAPI_Health_Handler,
		},
		{
			MethodName: "RegisterCallback",
			Handler:    _CallbackerAPI_RegisterCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "callbacker/callbacker_api/callbacker_api.proto",
}
