// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	"github.com/bitcoin-sv/arc/blocktx/blocktx_api"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// Ensure, that BlockTxAPIClientMock does implement blocktx_api.BlockTxAPIClient.
// If this is not the case, regenerate this file with moq.
var _ blocktx_api.BlockTxAPIClient = &BlockTxAPIClientMock{}

// BlockTxAPIClientMock is a mock implementation of blocktx_api.BlockTxAPIClient.
//
//	func TestSomethingThatUsesBlockTxAPIClient(t *testing.T) {
//
//		// make and configure a mocked blocktx_api.BlockTxAPIClient
//		mockedBlockTxAPIClient := &BlockTxAPIClientMock{
//			ClearBlockTransactionsMapFunc: func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
//				panic("mock out the ClearBlockTransactionsMap method")
//			},
//			ClearBlocksFunc: func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
//				panic("mock out the ClearBlocks method")
//			},
//			ClearTransactionsFunc: func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
//				panic("mock out the ClearTransactions method")
//			},
//			GetTransactionBlocksFunc: func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.TransactionBlocks, error) {
//				panic("mock out the GetTransactionBlocks method")
//			},
//			GetTransactionMerklePathFunc: func(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.MerklePath, error) {
//				panic("mock out the GetTransactionMerklePath method")
//			},
//			HealthFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error) {
//				panic("mock out the Health method")
//			},
//			RegisterTransactionFunc: func(ctx context.Context, in *blocktx_api.TransactionAndSource, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the RegisterTransaction method")
//			},
//		}
//
//		// use mockedBlockTxAPIClient in code that requires blocktx_api.BlockTxAPIClient
//		// and then make assertions.
//
//	}
type BlockTxAPIClientMock struct {
	// ClearBlockTransactionsMapFunc mocks the ClearBlockTransactionsMap method.
	ClearBlockTransactionsMapFunc func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error)

	// ClearBlocksFunc mocks the ClearBlocks method.
	ClearBlocksFunc func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error)

	// ClearTransactionsFunc mocks the ClearTransactions method.
	ClearTransactionsFunc func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error)

	// GetTransactionBlocksFunc mocks the GetTransactionBlocks method.
	GetTransactionBlocksFunc func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.TransactionBlocks, error)

	// GetTransactionMerklePathFunc mocks the GetTransactionMerklePath method.
	GetTransactionMerklePathFunc func(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.MerklePath, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error)

	// RegisterTransactionFunc mocks the RegisterTransaction method.
	RegisterTransactionFunc func(ctx context.Context, in *blocktx_api.TransactionAndSource, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClearBlockTransactionsMap holds details about calls to the ClearBlockTransactionsMap method.
		ClearBlockTransactionsMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.ClearData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ClearBlocks holds details about calls to the ClearBlocks method.
		ClearBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.ClearData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ClearTransactions holds details about calls to the ClearTransactions method.
		ClearTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.ClearData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetTransactionBlocks holds details about calls to the GetTransactionBlocks method.
		GetTransactionBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.Transactions
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetTransactionMerklePath holds details about calls to the GetTransactionMerklePath method.
		GetTransactionMerklePath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.Transaction
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RegisterTransaction holds details about calls to the RegisterTransaction method.
		RegisterTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.TransactionAndSource
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockClearBlockTransactionsMap sync.RWMutex
	lockClearBlocks               sync.RWMutex
	lockClearTransactions         sync.RWMutex
	lockGetTransactionBlocks      sync.RWMutex
	lockGetTransactionMerklePath  sync.RWMutex
	lockHealth                    sync.RWMutex
	lockRegisterTransaction       sync.RWMutex
}

// ClearBlockTransactionsMap calls ClearBlockTransactionsMapFunc.
func (mock *BlockTxAPIClientMock) ClearBlockTransactionsMap(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
	if mock.ClearBlockTransactionsMapFunc == nil {
		panic("BlockTxAPIClientMock.ClearBlockTransactionsMapFunc: method is nil but BlockTxAPIClient.ClearBlockTransactionsMap was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearBlockTransactionsMap.Lock()
	mock.calls.ClearBlockTransactionsMap = append(mock.calls.ClearBlockTransactionsMap, callInfo)
	mock.lockClearBlockTransactionsMap.Unlock()
	return mock.ClearBlockTransactionsMapFunc(ctx, in, opts...)
}

// ClearBlockTransactionsMapCalls gets all the calls that were made to ClearBlockTransactionsMap.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.ClearBlockTransactionsMapCalls())
func (mock *BlockTxAPIClientMock) ClearBlockTransactionsMapCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.ClearData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}
	mock.lockClearBlockTransactionsMap.RLock()
	calls = mock.calls.ClearBlockTransactionsMap
	mock.lockClearBlockTransactionsMap.RUnlock()
	return calls
}

// ClearBlocks calls ClearBlocksFunc.
func (mock *BlockTxAPIClientMock) ClearBlocks(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
	if mock.ClearBlocksFunc == nil {
		panic("BlockTxAPIClientMock.ClearBlocksFunc: method is nil but BlockTxAPIClient.ClearBlocks was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearBlocks.Lock()
	mock.calls.ClearBlocks = append(mock.calls.ClearBlocks, callInfo)
	mock.lockClearBlocks.Unlock()
	return mock.ClearBlocksFunc(ctx, in, opts...)
}

// ClearBlocksCalls gets all the calls that were made to ClearBlocks.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.ClearBlocksCalls())
func (mock *BlockTxAPIClientMock) ClearBlocksCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.ClearData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}
	mock.lockClearBlocks.RLock()
	calls = mock.calls.ClearBlocks
	mock.lockClearBlocks.RUnlock()
	return calls
}

// ClearTransactions calls ClearTransactionsFunc.
func (mock *BlockTxAPIClientMock) ClearTransactions(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.ClearDataResponse, error) {
	if mock.ClearTransactionsFunc == nil {
		panic("BlockTxAPIClientMock.ClearTransactionsFunc: method is nil but BlockTxAPIClient.ClearTransactions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearTransactions.Lock()
	mock.calls.ClearTransactions = append(mock.calls.ClearTransactions, callInfo)
	mock.lockClearTransactions.Unlock()
	return mock.ClearTransactionsFunc(ctx, in, opts...)
}

// ClearTransactionsCalls gets all the calls that were made to ClearTransactions.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.ClearTransactionsCalls())
func (mock *BlockTxAPIClientMock) ClearTransactionsCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.ClearData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}
	mock.lockClearTransactions.RLock()
	calls = mock.calls.ClearTransactions
	mock.lockClearTransactions.RUnlock()
	return calls
}

// GetTransactionBlocks calls GetTransactionBlocksFunc.
func (mock *BlockTxAPIClientMock) GetTransactionBlocks(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.TransactionBlocks, error) {
	if mock.GetTransactionBlocksFunc == nil {
		panic("BlockTxAPIClientMock.GetTransactionBlocksFunc: method is nil but BlockTxAPIClient.GetTransactionBlocks was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetTransactionBlocks.Lock()
	mock.calls.GetTransactionBlocks = append(mock.calls.GetTransactionBlocks, callInfo)
	mock.lockGetTransactionBlocks.Unlock()
	return mock.GetTransactionBlocksFunc(ctx, in, opts...)
}

// GetTransactionBlocksCalls gets all the calls that were made to GetTransactionBlocks.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.GetTransactionBlocksCalls())
func (mock *BlockTxAPIClientMock) GetTransactionBlocksCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.Transactions
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}
	mock.lockGetTransactionBlocks.RLock()
	calls = mock.calls.GetTransactionBlocks
	mock.lockGetTransactionBlocks.RUnlock()
	return calls
}

// GetTransactionMerklePath calls GetTransactionMerklePathFunc.
func (mock *BlockTxAPIClientMock) GetTransactionMerklePath(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.MerklePath, error) {
	if mock.GetTransactionMerklePathFunc == nil {
		panic("BlockTxAPIClientMock.GetTransactionMerklePathFunc: method is nil but BlockTxAPIClient.GetTransactionMerklePath was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.Transaction
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetTransactionMerklePath.Lock()
	mock.calls.GetTransactionMerklePath = append(mock.calls.GetTransactionMerklePath, callInfo)
	mock.lockGetTransactionMerklePath.Unlock()
	return mock.GetTransactionMerklePathFunc(ctx, in, opts...)
}

// GetTransactionMerklePathCalls gets all the calls that were made to GetTransactionMerklePath.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.GetTransactionMerklePathCalls())
func (mock *BlockTxAPIClientMock) GetTransactionMerklePathCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.Transaction
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.Transaction
		Opts []grpc.CallOption
	}
	mock.lockGetTransactionMerklePath.RLock()
	calls = mock.calls.GetTransactionMerklePath
	mock.lockGetTransactionMerklePath.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *BlockTxAPIClientMock) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error) {
	if mock.HealthFunc == nil {
		panic("BlockTxAPIClientMock.HealthFunc: method is nil but BlockTxAPIClient.Health was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx, in, opts...)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.HealthCalls())
func (mock *BlockTxAPIClientMock) HealthCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// RegisterTransaction calls RegisterTransactionFunc.
func (mock *BlockTxAPIClientMock) RegisterTransaction(ctx context.Context, in *blocktx_api.TransactionAndSource, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.RegisterTransactionFunc == nil {
		panic("BlockTxAPIClientMock.RegisterTransactionFunc: method is nil but BlockTxAPIClient.RegisterTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.TransactionAndSource
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegisterTransaction.Lock()
	mock.calls.RegisterTransaction = append(mock.calls.RegisterTransaction, callInfo)
	mock.lockRegisterTransaction.Unlock()
	return mock.RegisterTransactionFunc(ctx, in, opts...)
}

// RegisterTransactionCalls gets all the calls that were made to RegisterTransaction.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.RegisterTransactionCalls())
func (mock *BlockTxAPIClientMock) RegisterTransactionCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.TransactionAndSource
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.TransactionAndSource
		Opts []grpc.CallOption
	}
	mock.lockRegisterTransaction.RLock()
	calls = mock.calls.RegisterTransaction
	mock.lockRegisterTransaction.RUnlock()
	return calls
}
