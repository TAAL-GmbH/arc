openapi: 3.0.0
info:
  title: BSV ARC
  version: 1.0.0
  license:
    name: Open BSV Licence
    url: https://bitcoinassociation.net/open-bsv-license/

paths:

  # Get Policy
  /v1/policy:
    get:
      operationId: GET policy
      tags:
        - Arc
      summary: Get the policy settings
      description: >-
        This endpoint returns the policy settings.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        401:
          $ref: '#/components/responses/NotAuthorized'

  # Get transaction status
  /v1/tx/{id}:
    get:
      operationId: GET transaction status
      tags:
        - Arc
      summary: Get transaction status.
      description: >-
        This endpoint is used to get the current status of a previously submitted transaction.
      parameters:
        - name: id
          in: path
          description: The transaction ID (32 byte hash) hex string
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatus'
        401:
          $ref: '#/components/responses/NotAuthorized'
        404:
          description: Not found

  # Post transaction
  /v1/tx:
    post:
      operationId: POST transaction
      tags:
        - Arc
      summary: Submit a transaction.
      description: >-
        This endpoint is used to send a raw transaction to a miner for inclusion in the next block that the miner creates.  The header parameters can be used to override the global settings in your Arc dashboard for these transactions.
      parameters:
        - $ref: '#/components/parameters/callbackUrl'
        - $ref: '#/components/parameters/callbackToken'
        - $ref: '#/components/parameters/merkleProof'
        - $ref: '#/components/parameters/waitForStatus'
      requestBody:
        description: ''
        content:
          text/plain:
            schema:
              type: string
              example: "<transaction hex string>"
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: Added to block template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              examples:
                success:
                  summary: Added to block template
                  value:
                    timestamp: "2022-10-18T13:30:22.653Z"
                    txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              examples:
                mined:
                  summary: Already mined
                  value:
                    timestamp: "2022-10-18T13:30:22.653Z"
                    txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
                    blockHash: "000000000000000001d8f4bb24dd93d4e91ce926cc7a971be018c2b8d46d45ff"
                    blockHeight: 761868
                mempool:
                  summary: Already in mempool
                  value:
                    timestamp: "2022-10-18T13:30:22.653Z"
                    txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'
        402:
          description: Fee too low
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorFee'
        409:
          description: Conflicting transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        422:
          description: Unprocessable entity - with IETF RFC 7807 Error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/txs:
    post:
      operationId: POST transactions
      tags:
        - Arc
      summary: Submit multiple transactions.
      description: >-
        This endpoint is used to send multiple raw transactions to a miner for inclusion in the next block that the miner creates. The header parameters can be used to override the global settings in your Arc dashboard for these transactions.
      parameters:
        - $ref: '#/components/parameters/callbackUrl'
        - $ref: '#/components/parameters/callbackToken'
        - $ref: '#/components/parameters/merkleProof'
        - $ref: '#/components/parameters/waitForStatus'
      requestBody:
        description: ''
        content:
          text/plain:
            schema:
              type: string
              example: "<transaction hex string>\n<transaction hex string>"
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "<transaction hex string>"
          application/octet-stream:
            schema:
              type: string
              example: "<transaction binary data>"
      responses:
        200:
          description: Already in block template, or already mined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponses'
              examples:
                mined:
                  summary: Already mined
                  value:
                    apiVersion: "v2.0.0"
                    timestamp: "2022-10-18T13:30:22.653Z"
                    minerId: "03e92d3e5c3f7bd945dfbf48e7a99393b1bfb3f11f380ae30d286e7ff2aec5a270"
                    transactions: [
                      {
                        status: 200,
                        title: "Already mined",
                        blockHash: "000000000000000001d8f4bb24dd93d4e91ce926cc7a971be018c2b8d46d45ff",
                        blockHeight: 761868,
                        txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
                      }
                    ]
                added:
                  summary: Added to block template
                  value:
                    apiVersion: "v2.0.0"
                    timestamp: "2022-10-18T13:30:22.653Z"
                    minerId: "03e92d3e5c3f7bd945dfbf48e7a99393b1bfb3f11f380ae30d286e7ff2aec5a270"
                    transactions: [
                      {
                        status: 201,
                        title: "Added to block template",
                        txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
                      }
                    ]
                error:
                  summary: "Fee too low"
                  value:
                    apiVersion: "v2.0.0"
                    timestamp: "2022-10-18T13:30:22.653Z"
                    minerId: "03e92d3e5c3f7bd945dfbf48e7a99393b1bfb3f11f380ae30d286e7ff2aec5a270"
                    transactions: [
                      {
                        type: "https://arc.bitcoinsv.com/errors/402",
                        title: "Fee too low",
                        status: 402,
                        detail: "The fee in the transaction is too low to be included in a block",
                        instance: "https://arc.taal.com/errors/123452",
                        txid: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
                      }
                    ]
        400:
          description: IETF RFC 7807 Error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
              example:
                {
                  "type": "https://arc.bitcoinsv.com/errors/400",
                  "title": "Bad request",
                  "status": 400,
                  "detail": "The request seems to be malformed and cannot be processed",
                  "instance": "https://arc.taal.com/errors/1234556"
                }
        403:
          $ref: '#/components/responses/NotAuthorized'

components:

  schemas:

    # Common response object
    CommonResponse:
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          type: string
          format: date-time
          nullable: false

    ChainInfo:
      type: object
      properties:
        blockHash:
          type: string
          nullable: false
        blockHeight:
          type: integer
          format: uint64
          nullable: false

    PolicyResponse:
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          required:
            - fees
          properties:
            fees:
              type: array
              items:
                $ref: '#/components/schemas/Policy'
              nullable: true
          additionalProperties: false

    Policy:
      type: object
      required:
        - maxtxsizepolicy
        - maxscriptsizepolicy
        - minminingtxfee
        - miningFee
      properties:
        maxtxsizepolicy:
          type: number
          nullable: false
        maxscriptsizepolicy:
          type: number
          nullable: false
        miningFee:
          $ref: '#/components/schemas/FeeAmount'
      additionalProperties: false

    FeeAmount:
      type: object
      required:
        - satoshis
        - bytes
      properties:
        satoshis:
          type: integer
          format: uint64
        bytes:
          type: integer
          format: uint64
      additionalProperties: false

    # Transaction request for application/json
    TransactionRequest:
      type: object
      required:
        - rawTx
      properties:
        rawTx:
          type: string
          nullable: false

    TransactionResponse000:
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - $ref: '#/components/schemas/ChainInfo'
        - type: object
          required:
            - txid
            - tx
          properties:
            txid:
              type: string
              nullable: false
            tx:
              type: string
              nullable: false
            txStatus:
              type: string
              nullable: false
          additionalProperties: false

    TransactionStatus:
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - $ref: '#/components/schemas/ChainInfo'
        - type: object
          required:
            - txid
            - status
          properties:
            txid:
              type: string
              nullable: false
            txStatus:
              type: string
              nullable: false
          additionalProperties: false

    TransactionResponse:
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - $ref: '#/components/schemas/ChainInfo'
        - $ref: '#/components/schemas/TransactionDetails'
      additionalProperties: false

    TransactionResponses:
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - $ref: '#/components/schemas/ChainInfo'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/TransactionDetails'
                  - $ref: '#/components/schemas/Error'
          additionalProperties: false

    TransactionSubmitStatus:
      type: object
      required:
        - status
        - title
      properties:
        status:
          type: integer
          format: int
          example: 201
          nullable: false
        title:
          type: string
          example: "Added to mempool"
          nullable: false

    TransactionDetails:
      type: object
      required:
        - txid
      allOf:
        - $ref: '#/components/schemas/TransactionSubmitStatus'
        - type: object
          properties:
            txid:
              type: string
              description: Transaction ID in hex
              example: "6bdbcfab0526d30e8d68279f79dff61fb4026ace8b7b32789af016336e54f2f0"
              nullable: false
            txStatus:
              type: string
              enum: [
                "UNKNOWN",
                "RECEIVED",
                "STORED",
                "ANNOUNCED_TO_NETWORK",
                "REQUESTED_BY_NETWORK",
                "SENT_TO_NETWORK",
                "SEEN_ON_NETWORK",
                "MINED",
                "CONFIRMED",
                "REJECTED"
              ]
              description: Transaction status
              example: "ACCEPTED"
              nullable: false

    Error:
      description: An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
      oneOf: [
        {
          "$ref": "#/components/schemas/ErrorUnlockingScripts"
        },
        {
          "$ref": "#/components/schemas/ErrorInputs"
        },
        {
          "$ref": "#/components/schemas/ErrorMalformed"
        },
        {
          "$ref": "#/components/schemas/ErrorFrozenPolicy"
        },
        {
          "$ref": "#/components/schemas/ErrorFrozenConsensus"
        }
      ]
    ErrorBadRequest:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/400"
            title:
              example: "Bad request"
            status:
              example: 400
            detail:
              example: "The request seems to be malformed and cannot be processed"
            instance:
              example: "https://arc.taal.com/errors/1234556"
    ErrorFee:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/402"
            title:
              example: "Fee too low"
            status:
              example: 402
            detail:
              example: "The fee in the transaction is too low to be included in a block"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorConflict:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/409"
            title:
              example: "Conflicting tx found"
            status:
              example: 409
            detail:
              example: "Tx is valid, but there is a conflicting tx in the block template"
            instance:
              example: "https://arc.taal.com/errors/123453"

    ErrorUnlockingScripts:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/461"
            title:
              example: "Invalid unlocking scripts"
            status:
              example: 461
            detail:
              example: "Tx is invalid because the unlock scripts are invalid"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorInputs:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/462"
            title:
              example: "Invalid inputs"
            status:
              example: 462
            detail:
              example: "Tx is invalid because the inputs are non-existent or spent"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorMalformed:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/463"
            title:
              example: "Malformed transaction"
            status:
              example: 463
            detail:
              example: "Tx is malformed"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorFrozenPolicy:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/471"
            title:
              example: "Input Frozen"
            status:
              example: 471
            detail:
              example: "Input Frozen (blacklist manager policy blacklisted)"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorFrozenConsensus:
      type: object
      allOf:
        - "$ref": "#/components/schemas/ErrorFields"
        - type: object
          properties:
            type:
              example: "https://arc.bitcoinsv.com/errors/472"
            title:
              example: "Input Frozen"
            status:
              example: 472
            detail:
              example: "Input Frozen (blacklist manager consensus blacklisted)"
            instance:
              example: "https://arc.taal.com/errors/123452"
    ErrorFields:
      type: object
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: Type of error, with link to more information
          nullable: false
        title:
          type: string
          description: Descriptive text for error
          nullable: false
        status:
          type: integer
          format: int
          description: Error code
          example: 402
          nullable: false
        detail:
          type: string
          description: Longer description of error
          example: The fee in the transaction is too low to be included in a block.
          nullable: false
        instance:
          type: string
          description: (Optional) Link to actual error on server
          nullable: true
        txid:
          type: string
          description: Transaction ID this error is referring to
          nullable: true
        extraInfo:
          type: string
          description: Optional extra information about the error from the miner
          nullable: true
  responses:
    NotAuthorized:
      description: Security requirements failed
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: >-
        Bearer authentication as defined in RFC 6750
    Api-Key:
      type: apiKey
      description: >-
        Please enter API key needed to access endpoints into field.
        Api-Key: My_API_Key
      name: Api-Key
      in: header
    Authorization:
      type: apiKey
      description: >-
        Please enter the custom authorization needed to access endpoints into field.
        Authorization: My_Authorization_Key
      name: Authorization
      in: header
  parameters:
    callbackUrl:
      name: X-CallbackUrl
      in: header
      description: >-
        Default double spend and merkle proof notification callback endpoint.
      schema:
        type: string
    callbackToken:
      name: X-CallbackToken
      in: header
      description: Access token for notification callback endpoint.
      schema:
        type: string
    merkleProof:
      name: X-MerkleProof
      in: header
      description: Whether to include merkle proofs in the callbacks (true | false).
      schema:
        type: string
    waitForStatus:
      name: X-WaitForStatus
      in: header
      description: Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = SENT_TO_NETWORK, 6 = SEEN_ON_NETWORK)
      schema:
        type: integer

security:
  - BearerAuth: []
  - Api-Key: []
  - Authorization: []
