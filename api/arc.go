// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for FeeFeeType.
const (
	Data     FeeFeeType = "data"
	Standard FeeFeeType = "standard"
)

// Defines values for TransactionDetailsTxStatus.
const (
	TransactionDetailsTxStatusANNOUNCEDTONETWORK TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionDetailsTxStatusCONFIRMED          TransactionDetailsTxStatus = "CONFIRMED"
	TransactionDetailsTxStatusMINED              TransactionDetailsTxStatus = "MINED"
	TransactionDetailsTxStatusRECEIVED           TransactionDetailsTxStatus = "RECEIVED"
	TransactionDetailsTxStatusREJECTED           TransactionDetailsTxStatus = "REJECTED"
	TransactionDetailsTxStatusSEENONNETWORK      TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	TransactionDetailsTxStatusSENTTONETWORK      TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	TransactionDetailsTxStatusSTORED             TransactionDetailsTxStatus = "STORED"
	TransactionDetailsTxStatusUNKNOWN            TransactionDetailsTxStatus = "UNKNOWN"
)

// Defines values for TransactionResponseTxStatus.
const (
	TransactionResponseTxStatusANNOUNCEDTONETWORK TransactionResponseTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionResponseTxStatusCONFIRMED          TransactionResponseTxStatus = "CONFIRMED"
	TransactionResponseTxStatusMINED              TransactionResponseTxStatus = "MINED"
	TransactionResponseTxStatusRECEIVED           TransactionResponseTxStatus = "RECEIVED"
	TransactionResponseTxStatusREJECTED           TransactionResponseTxStatus = "REJECTED"
	TransactionResponseTxStatusSEENONNETWORK      TransactionResponseTxStatus = "SEEN_ON_NETWORK"
	TransactionResponseTxStatusSENTTONETWORK      TransactionResponseTxStatus = "SENT_TO_NETWORK"
	TransactionResponseTxStatusSTORED             TransactionResponseTxStatus = "STORED"
	TransactionResponseTxStatusUNKNOWN            TransactionResponseTxStatus = "UNKNOWN"
)

// ChainInfo defines model for ChainInfo.
type ChainInfo struct {
	BlockHash   *string `json:"blockHash,omitempty"`
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse defines model for CommonResponse.
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error interface{}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorConflict defines model for ErrorConflict.
type ErrorConflict struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Longer description of error
	Detail string `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Error code
	Status int `json:"status"`

	// Descriptive text for error
	Title string `json:"title"`

	// Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// Fee defines model for Fee.
type Fee struct {
	FeeType   FeeFeeType `json:"feeType"`
	MiningFee FeeAmount  `json:"miningFee"`
	RelayFee  FeeAmount  `json:"relayFee"`
}

// FeeFeeType defines model for Fee.FeeType.
type FeeFeeType string

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    uint64 `json:"bytes"`
	Satoshis uint64 `json:"satoshis"`
}

// FeesResponse defines model for FeesResponse.
type FeesResponse struct {
	Fees      *[]Fee    `json:"fees"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	Status int    `json:"status"`
	Title  string `json:"title"`

	// Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Status      int       `json:"status"`
	Timestamp   time.Time `json:"timestamp"`
	Title       string    `json:"title"`

	// Transaction status
	TxStatus *TransactionResponseTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionResponseTxStatus string

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	BlockHash    *string        `json:"blockHash,omitempty"`
	BlockHeight  *uint64        `json:"blockHeight,omitempty"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions *[]interface{} `json:"transactions,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Timestamp   time.Time `json:"timestamp"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionSubmitStatus defines model for TransactionSubmitStatus.
type TransactionSubmitStatus struct {
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// MerkleProof defines model for merkleProof.
type MerkleProof = string

// PostArcV1TxJSONBody defines parameters for PostArcV1Tx.
type PostArcV1TxJSONBody = TransactionRequest

// PostArcV1TxParams defines parameters for PostArcV1Tx.
type PostArcV1TxParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`
}

// PostArcV1TxsJSONBody defines parameters for PostArcV1Txs.
type PostArcV1TxsJSONBody = []string

// PostArcV1TxsParams defines parameters for PostArcV1Txs.
type PostArcV1TxsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`
}

// PostArcV1TxJSONRequestBody defines body for PostArcV1Tx for application/json ContentType.
type PostArcV1TxJSONRequestBody = PostArcV1TxJSONBody

// PostArcV1TxsJSONRequestBody defines body for PostArcV1Txs for application/json ContentType.
type PostArcV1TxsJSONRequestBody = PostArcV1TxsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArcV1Fees request
	GetArcV1Fees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArcV1Tx request with any body
	PostArcV1TxWithBody(ctx context.Context, params *PostArcV1TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArcV1Tx(ctx context.Context, params *PostArcV1TxParams, body PostArcV1TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArcV1TxId request
	GetArcV1TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArcV1Txs request with any body
	PostArcV1TxsWithBody(ctx context.Context, params *PostArcV1TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArcV1Txs(ctx context.Context, params *PostArcV1TxsParams, body PostArcV1TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetArcV1Fees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArcV1FeesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArcV1TxWithBody(ctx context.Context, params *PostArcV1TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArcV1TxRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArcV1Tx(ctx context.Context, params *PostArcV1TxParams, body PostArcV1TxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArcV1TxRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArcV1TxId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArcV1TxIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArcV1TxsWithBody(ctx context.Context, params *PostArcV1TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArcV1TxsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArcV1Txs(ctx context.Context, params *PostArcV1TxsParams, body PostArcV1TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArcV1TxsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetArcV1FeesRequest generates requests for GetArcV1Fees
func NewGetArcV1FeesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arc/v1/fees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArcV1TxRequest calls the generic PostArcV1Tx builder with application/json body
func NewPostArcV1TxRequest(server string, params *PostArcV1TxParams, body PostArcV1TxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArcV1TxRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostArcV1TxRequestWithBody generates requests for PostArcV1Tx with any type of body
func NewPostArcV1TxRequestWithBody(server string, params *PostArcV1TxParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arc/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	return req, nil
}

// NewGetArcV1TxIdRequest generates requests for GetArcV1TxId
func NewGetArcV1TxIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arc/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArcV1TxsRequest calls the generic PostArcV1Txs builder with application/json body
func NewPostArcV1TxsRequest(server string, params *PostArcV1TxsParams, body PostArcV1TxsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArcV1TxsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostArcV1TxsRequestWithBody generates requests for PostArcV1Txs with any type of body
func NewPostArcV1TxsRequestWithBody(server string, params *PostArcV1TxsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arc/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArcV1Fees request
	GetArcV1FeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetArcV1FeesResponse, error)

	// PostArcV1Tx request with any body
	PostArcV1TxWithBodyWithResponse(ctx context.Context, params *PostArcV1TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArcV1TxResponse, error)

	PostArcV1TxWithResponse(ctx context.Context, params *PostArcV1TxParams, body PostArcV1TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArcV1TxResponse, error)

	// GetArcV1TxId request
	GetArcV1TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArcV1TxIdResponse, error)

	// PostArcV1Txs request with any body
	PostArcV1TxsWithBodyWithResponse(ctx context.Context, params *PostArcV1TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArcV1TxsResponse, error)

	PostArcV1TxsWithResponse(ctx context.Context, params *PostArcV1TxsParams, body PostArcV1TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArcV1TxsResponse, error)
}

type GetArcV1FeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeesResponse
}

// Status returns HTTPResponse.Status
func (r GetArcV1FeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArcV1FeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArcV1TxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON201      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON402      *ErrorFee
	JSON409      *ErrorConflict
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r PostArcV1TxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArcV1TxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArcV1TxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
}

// Status returns HTTPResponse.Status
func (r GetArcV1TxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArcV1TxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArcV1TxsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
}

// Status returns HTTPResponse.Status
func (r PostArcV1TxsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArcV1TxsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArcV1FeesWithResponse request returning *GetArcV1FeesResponse
func (c *ClientWithResponses) GetArcV1FeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetArcV1FeesResponse, error) {
	rsp, err := c.GetArcV1Fees(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArcV1FeesResponse(rsp)
}

// PostArcV1TxWithBodyWithResponse request with arbitrary body returning *PostArcV1TxResponse
func (c *ClientWithResponses) PostArcV1TxWithBodyWithResponse(ctx context.Context, params *PostArcV1TxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArcV1TxResponse, error) {
	rsp, err := c.PostArcV1TxWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArcV1TxResponse(rsp)
}

func (c *ClientWithResponses) PostArcV1TxWithResponse(ctx context.Context, params *PostArcV1TxParams, body PostArcV1TxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArcV1TxResponse, error) {
	rsp, err := c.PostArcV1Tx(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArcV1TxResponse(rsp)
}

// GetArcV1TxIdWithResponse request returning *GetArcV1TxIdResponse
func (c *ClientWithResponses) GetArcV1TxIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArcV1TxIdResponse, error) {
	rsp, err := c.GetArcV1TxId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArcV1TxIdResponse(rsp)
}

// PostArcV1TxsWithBodyWithResponse request with arbitrary body returning *PostArcV1TxsResponse
func (c *ClientWithResponses) PostArcV1TxsWithBodyWithResponse(ctx context.Context, params *PostArcV1TxsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArcV1TxsResponse, error) {
	rsp, err := c.PostArcV1TxsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArcV1TxsResponse(rsp)
}

func (c *ClientWithResponses) PostArcV1TxsWithResponse(ctx context.Context, params *PostArcV1TxsParams, body PostArcV1TxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArcV1TxsResponse, error) {
	rsp, err := c.PostArcV1Txs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArcV1TxsResponse(rsp)
}

// ParseGetArcV1FeesResponse parses an HTTP response from a GetArcV1FeesWithResponse call
func ParseGetArcV1FeesResponse(rsp *http.Response) (*GetArcV1FeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArcV1FeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostArcV1TxResponse parses an HTTP response from a PostArcV1TxWithResponse call
func ParsePostArcV1TxResponse(rsp *http.Response) (*PostArcV1TxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArcV1TxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetArcV1TxIdResponse parses an HTTP response from a GetArcV1TxIdWithResponse call
func ParseGetArcV1TxIdResponse(rsp *http.Response) (*GetArcV1TxIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArcV1TxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostArcV1TxsResponse parses an HTTP response from a PostArcV1TxsWithResponse call
func ParsePostArcV1TxsResponse(rsp *http.Response) (*PostArcV1TxsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArcV1TxsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the transaction fees required
	// (GET /arc/v1/fees)
	GetArcV1Fees(ctx echo.Context) error
	// Submit a transaction.
	// (POST /arc/v1/tx)
	PostArcV1Tx(ctx echo.Context, params PostArcV1TxParams) error
	// Get transaction status.
	// (GET /arc/v1/tx/{id})
	GetArcV1TxId(ctx echo.Context, id string) error
	// Submit multiple transactions.
	// (POST /arc/v1/txs)
	PostArcV1Txs(ctx echo.Context, params PostArcV1TxsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArcV1Fees converts echo context to params.
func (w *ServerInterfaceWrapper) GetArcV1Fees(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArcV1Fees(ctx)
	return err
}

// PostArcV1Tx converts echo context to params.
func (w *ServerInterfaceWrapper) PostArcV1Tx(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostArcV1TxParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostArcV1Tx(ctx, params)
	return err
}

// GetArcV1TxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetArcV1TxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArcV1TxId(ctx, id)
	return err
}

// PostArcV1Txs converts echo context to params.
func (w *ServerInterfaceWrapper) PostArcV1Txs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostArcV1TxsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostArcV1Txs(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/arc/v1/fees", wrapper.GetArcV1Fees)
	router.POST(baseURL+"/arc/v1/tx", wrapper.PostArcV1Tx)
	router.GET(baseURL+"/arc/v1/tx/:id", wrapper.GetArcV1TxId)
	router.POST(baseURL+"/arc/v1/txs", wrapper.PostArcV1Txs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
