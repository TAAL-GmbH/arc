// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Api_KeyScopes       = "Api_Key.Scopes"
	AuthorizationScopes = "Authorization.Scopes"
	BearerAuthScopes    = "BearerAuth.Scopes"
)

// Defines values for FeeFeeType.
const (
	Data     FeeFeeType = "data"
	Standard FeeFeeType = "standard"
)

// Defines values for TransactionDetailsTxStatus.
const (
	TransactionDetailsTxStatusANNOUNCEDTONETWORK TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionDetailsTxStatusCONFIRMED          TransactionDetailsTxStatus = "CONFIRMED"
	TransactionDetailsTxStatusMINED              TransactionDetailsTxStatus = "MINED"
	TransactionDetailsTxStatusRECEIVED           TransactionDetailsTxStatus = "RECEIVED"
	TransactionDetailsTxStatusREJECTED           TransactionDetailsTxStatus = "REJECTED"
	TransactionDetailsTxStatusSEENONNETWORK      TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	TransactionDetailsTxStatusSENTTONETWORK      TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	TransactionDetailsTxStatusSTORED             TransactionDetailsTxStatus = "STORED"
	TransactionDetailsTxStatusUNKNOWN            TransactionDetailsTxStatus = "UNKNOWN"
)

// Defines values for TransactionResponseTxStatus.
const (
	TransactionResponseTxStatusANNOUNCEDTONETWORK TransactionResponseTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionResponseTxStatusCONFIRMED          TransactionResponseTxStatus = "CONFIRMED"
	TransactionResponseTxStatusMINED              TransactionResponseTxStatus = "MINED"
	TransactionResponseTxStatusRECEIVED           TransactionResponseTxStatus = "RECEIVED"
	TransactionResponseTxStatusREJECTED           TransactionResponseTxStatus = "REJECTED"
	TransactionResponseTxStatusSEENONNETWORK      TransactionResponseTxStatus = "SEEN_ON_NETWORK"
	TransactionResponseTxStatusSENTTONETWORK      TransactionResponseTxStatus = "SENT_TO_NETWORK"
	TransactionResponseTxStatusSTORED             TransactionResponseTxStatus = "STORED"
	TransactionResponseTxStatusUNKNOWN            TransactionResponseTxStatus = "UNKNOWN"
)

// ChainInfo defines model for ChainInfo.
type ChainInfo struct {
	BlockHash   *string `json:"blockHash,omitempty"`
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse defines model for CommonResponse.
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error interface{}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorConflict defines model for ErrorConflict.
type ErrorConflict struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Longer description of error
	Detail string `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Error code
	Status int `json:"status"`

	// Descriptive text for error
	Title string `json:"title"`

	// Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// Fee defines model for Fee.
type Fee struct {
	FeeType   FeeFeeType `json:"feeType"`
	MiningFee FeeAmount  `json:"miningFee"`
	RelayFee  FeeAmount  `json:"relayFee"`
}

// FeeFeeType defines model for Fee.FeeType.
type FeeFeeType string

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    uint64 `json:"bytes"`
	Satoshis uint64 `json:"satoshis"`
}

// FeesResponse defines model for FeesResponse.
type FeesResponse struct {
	Fees      *[]Fee    `json:"fees"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	Status int    `json:"status"`
	Title  string `json:"title"`

	// Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Status      int       `json:"status"`
	Timestamp   time.Time `json:"timestamp"`
	Title       string    `json:"title"`

	// Transaction status
	TxStatus *TransactionResponseTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionResponseTxStatus string

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	BlockHash    *string        `json:"blockHash,omitempty"`
	BlockHeight  *uint64        `json:"blockHeight,omitempty"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions *[]interface{} `json:"transactions,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Timestamp   time.Time `json:"timestamp"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionSubmitStatus defines model for TransactionSubmitStatus.
type TransactionSubmitStatus struct {
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// MerkleProof defines model for merkleProof.
type MerkleProof = string

// WaitForStatus defines model for waitForStatus.
type WaitForStatus = int

// POSTTransactionJSONBody defines parameters for POSTTransaction.
type POSTTransactionJSONBody = TransactionRequest

// POSTTransactionParams defines parameters for POSTTransaction.
type POSTTransactionParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = SENT_TO_NETWORK, 6 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionsJSONBody defines parameters for POSTTransactions.
type POSTTransactionsJSONBody = []string

// POSTTransactionsParams defines parameters for POSTTransactions.
type POSTTransactionsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = SENT_TO_NETWORK, 6 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionJSONRequestBody defines body for POSTTransaction for application/json ContentType.
type POSTTransactionJSONRequestBody = POSTTransactionJSONBody

// POSTTransactionsJSONRequestBody defines body for POSTTransactions for application/json ContentType.
type POSTTransactionsJSONRequestBody = POSTTransactionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETFees request
	GETFees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransaction request with any body
	POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETTransactionStatus request
	GETTransactionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETFees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETFeesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETTransactionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETTransactionStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETFeesRequest generates requests for GETFees
func NewGETFeesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/fees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionRequest calls the generic POSTTransaction builder with application/json body
func NewPOSTTransactionRequest(server string, params *POSTTransactionParams, body POSTTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionRequestWithBody generates requests for POSTTransaction with any type of body
func NewPOSTTransactionRequestWithBody(server string, params *POSTTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

// NewGETTransactionStatusRequest generates requests for GETTransactionStatus
func NewGETTransactionStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionsRequest calls the generic POSTTransactions builder with application/json body
func NewPOSTTransactionsRequest(server string, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionsRequestWithBody generates requests for POSTTransactions with any type of body
func NewPOSTTransactionsRequestWithBody(server string, params *POSTTransactionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETFees request
	GETFeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETFeesResponse, error)

	// POSTTransaction request with any body
	POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	// GETTransactionStatus request
	GETTransactionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)
}

type GETFeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeesResponse
}

// Status returns HTTPResponse.Status
func (r GETFeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETFeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON201      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON402      *ErrorFee
	JSON409      *ErrorConflict
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r POSTTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETTransactionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
}

// Status returns HTTPResponse.Status
func (r GETTransactionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETTransactionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
}

// Status returns HTTPResponse.Status
func (r POSTTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETFeesWithResponse request returning *GETFeesResponse
func (c *ClientWithResponses) GETFeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETFeesResponse, error) {
	rsp, err := c.GETFees(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETFeesResponse(rsp)
}

// POSTTransactionWithBodyWithResponse request with arbitrary body returning *POSTTransactionResponse
func (c *ClientWithResponses) POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

// GETTransactionStatusWithResponse request returning *GETTransactionStatusResponse
func (c *ClientWithResponses) GETTransactionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error) {
	rsp, err := c.GETTransactionStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETTransactionStatusResponse(rsp)
}

// POSTTransactionsWithBodyWithResponse request with arbitrary body returning *POSTTransactionsResponse
func (c *ClientWithResponses) POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

// ParseGETFeesResponse parses an HTTP response from a GETFeesWithResponse call
func ParseGETFeesResponse(rsp *http.Response) (*GETFeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETFeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionResponse parses an HTTP response from a POSTTransactionWithResponse call
func ParsePOSTTransactionResponse(rsp *http.Response) (*POSTTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGETTransactionStatusResponse parses an HTTP response from a GETTransactionStatusWithResponse call
func ParseGETTransactionStatusResponse(rsp *http.Response) (*GETTransactionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETTransactionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionsResponse parses an HTTP response from a POSTTransactionsWithResponse call
func ParsePOSTTransactionsResponse(rsp *http.Response) (*POSTTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the transaction fees required
	// (GET /v1/fees)
	GETFees(ctx echo.Context) error
	// Submit a transaction.
	// (POST /v1/tx)
	POSTTransaction(ctx echo.Context, params POSTTransactionParams) error
	// Get transaction status.
	// (GET /v1/tx/{id})
	GETTransactionStatus(ctx echo.Context, id string) error
	// Submit multiple transactions.
	// (POST /v1/txs)
	POSTTransactions(ctx echo.Context, params POSTTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GETFees converts echo context to params.
func (w *ServerInterfaceWrapper) GETFees(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETFees(ctx)
	return err
}

// POSTTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransaction(ctx, params)
	return err
}

// GETTransactionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GETTransactionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETTransactionStatus(ctx, id)
	return err
}

// POSTTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/fees", wrapper.GETFees)
	router.POST(baseURL+"/v1/tx", wrapper.POSTTransaction)
	router.GET(baseURL+"/v1/tx/:id", wrapper.GETTransactionStatus)
	router.POST(baseURL+"/v1/txs", wrapper.POSTTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
