// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Api_KeyScopes       = "Api_Key.Scopes"
	AuthorizationScopes = "Authorization.Scopes"
	BearerAuthScopes    = "BearerAuth.Scopes"
)

// Defines values for TransactionDetailsTxStatus.
const (
	ANNOUNCEDTONETWORK TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	CONFIRMED          TransactionDetailsTxStatus = "CONFIRMED"
	MINED              TransactionDetailsTxStatus = "MINED"
	RECEIVED           TransactionDetailsTxStatus = "RECEIVED"
	REJECTED           TransactionDetailsTxStatus = "REJECTED"
	REQUESTEDBYNETWORK TransactionDetailsTxStatus = "REQUESTED_BY_NETWORK"
	SEENONNETWORK      TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	SENTTONETWORK      TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	STORED             TransactionDetailsTxStatus = "STORED"
	UNKNOWN            TransactionDetailsTxStatus = "UNKNOWN"
)

// ChainInfo defines model for ChainInfo.
type ChainInfo struct {
	BlockHash   *string `json:"blockHash,omitempty"`
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse defines model for CommonResponse.
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error interface{}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorConflict defines model for ErrorConflict.
type ErrorConflict struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Longer description of error
	Detail string `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Error code
	Status int `json:"status"`

	// Descriptive text for error
	Title string `json:"title"`

	// Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    uint64 `json:"bytes"`
	Satoshis uint64 `json:"satoshis"`
}

// Policy defines model for Policy.
type Policy struct {
	Maxscriptsizepolicy     uint64    `json:"maxscriptsizepolicy"`
	Maxtxsigopscountspolicy uint64    `json:"maxtxsigopscountspolicy"`
	Maxtxsizepolicy         uint64    `json:"maxtxsizepolicy"`
	MiningFee               FeeAmount `json:"miningFee"`
}

// PolicyResponse defines model for PolicyResponse.
type PolicyResponse struct {
	Policy    Policy    `json:"policy"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	// Extra information about the transaction
	ExtraInfo *string `json:"extraInfo"`
	Status    int     `json:"status"`
	Title     string  `json:"title"`

	// Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	ExtraInfo   *string   `json:"extraInfo"`
	Status      int       `json:"status"`
	Timestamp   time.Time `json:"timestamp"`
	Title       string    `json:"title"`
	TxStatus    string    `json:"txStatus"`
	Txid        string    `json:"txid"`
}

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	BlockHash    *string        `json:"blockHash,omitempty"`
	BlockHeight  *uint64        `json:"blockHeight,omitempty"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions *[]interface{} `json:"transactions,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	ExtraInfo   *string   `json:"extraInfo"`
	Timestamp   time.Time `json:"timestamp"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionSubmitStatus defines model for TransactionSubmitStatus.
type TransactionSubmitStatus struct {
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// MerkleProof defines model for merkleProof.
type MerkleProof = string

// WaitForStatus defines model for waitForStatus.
type WaitForStatus = int

// POSTTransactionJSONBody defines parameters for POSTTransaction.
type POSTTransactionJSONBody = TransactionRequest

// POSTTransactionParams defines parameters for POSTTransaction.
type POSTTransactionParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionsJSONBody defines parameters for POSTTransactions.
type POSTTransactionsJSONBody = []TransactionRequest

// POSTTransactionsParams defines parameters for POSTTransactions.
type POSTTransactionsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionJSONRequestBody defines body for POSTTransaction for application/json ContentType.
type POSTTransactionJSONRequestBody = POSTTransactionJSONBody

// POSTTransactionsJSONRequestBody defines body for POSTTransactions for application/json ContentType.
type POSTTransactionsJSONRequestBody = POSTTransactionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETPolicy request
	GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransaction request with any body
	POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETTransactionStatus request
	GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETTransactionStatusRequest(c.Server, txid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETPolicyRequest generates requests for GETPolicy
func NewGETPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionRequest calls the generic POSTTransaction builder with application/json body
func NewPOSTTransactionRequest(server string, params *POSTTransactionParams, body POSTTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionRequestWithBody generates requests for POSTTransaction with any type of body
func NewPOSTTransactionRequestWithBody(server string, params *POSTTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

// NewGETTransactionStatusRequest generates requests for GETTransactionStatus
func NewGETTransactionStatusRequest(server string, txid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "txid", runtime.ParamLocationPath, txid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionsRequest calls the generic POSTTransactions builder with application/json body
func NewPOSTTransactionsRequest(server string, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionsRequestWithBody generates requests for POSTTransactions with any type of body
func NewPOSTTransactionsRequestWithBody(server string, params *POSTTransactionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETPolicy request
	GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error)

	// POSTTransaction request with any body
	POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	// GETTransactionStatus request
	GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)
}

type GETPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponse
}

// Status returns HTTPResponse.Status
func (r GETPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON422      *Error
	JSON465      *ErrorFee
	JSON466      *ErrorConflict
}

// Status returns HTTPResponse.Status
func (r POSTTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETTransactionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
}

// Status returns HTTPResponse.Status
func (r GETTransactionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETTransactionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
}

// Status returns HTTPResponse.Status
func (r POSTTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETPolicyWithResponse request returning *GETPolicyResponse
func (c *ClientWithResponses) GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error) {
	rsp, err := c.GETPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETPolicyResponse(rsp)
}

// POSTTransactionWithBodyWithResponse request with arbitrary body returning *POSTTransactionResponse
func (c *ClientWithResponses) POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

// GETTransactionStatusWithResponse request returning *GETTransactionStatusResponse
func (c *ClientWithResponses) GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error) {
	rsp, err := c.GETTransactionStatus(ctx, txid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETTransactionStatusResponse(rsp)
}

// POSTTransactionsWithBodyWithResponse request with arbitrary body returning *POSTTransactionsResponse
func (c *ClientWithResponses) POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

// ParseGETPolicyResponse parses an HTTP response from a GETPolicyWithResponse call
func ParseGETPolicyResponse(rsp *http.Response) (*GETPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionResponse parses an HTTP response from a POSTTransactionWithResponse call
func ParsePOSTTransactionResponse(rsp *http.Response) (*POSTTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 465:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON465 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 466:
		var dest ErrorConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON466 = &dest

	}

	return response, nil
}

// ParseGETTransactionStatusResponse parses an HTTP response from a GETTransactionStatusWithResponse call
func ParseGETTransactionStatusResponse(rsp *http.Response) (*GETTransactionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETTransactionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionsResponse parses an HTTP response from a POSTTransactionsWithResponse call
func ParsePOSTTransactionsResponse(rsp *http.Response) (*POSTTransactionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the policy settings
	// (GET /v1/policy)
	GETPolicy(ctx echo.Context) error
	// Submit a transaction.
	// (POST /v1/tx)
	POSTTransaction(ctx echo.Context, params POSTTransactionParams) error
	// Get transaction status.
	// (GET /v1/tx/{txid})
	GETTransactionStatus(ctx echo.Context, txid string) error
	// Submit multiple transactions.
	// (POST /v1/txs)
	POSTTransactions(ctx echo.Context, params POSTTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GETPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GETPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETPolicy(ctx)
	return err
}

// POSTTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransaction(ctx, params)
	return err
}

// GETTransactionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GETTransactionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETTransactionStatus(ctx, txid)
	return err
}

// POSTTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/policy", wrapper.GETPolicy)
	router.POST(baseURL+"/v1/tx", wrapper.POSTTransaction)
	router.GET(baseURL+"/v1/tx/:txid", wrapper.GETTransactionStatus)
	router.POST(baseURL+"/v1/txs", wrapper.POSTTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PvxvAAAA///82akx4ToAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
