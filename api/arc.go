// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Api_KeyScopes       = "Api_Key.Scopes"
	AuthorizationScopes = "Authorization.Scopes"
	BearerAuthScopes    = "BearerAuth.Scopes"
)

// Defines values for TransactionDetailsTxStatus.
const (
	TransactionDetailsTxStatusANNOUNCEDTONETWORK TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionDetailsTxStatusCONFIRMED          TransactionDetailsTxStatus = "CONFIRMED"
	TransactionDetailsTxStatusMINED              TransactionDetailsTxStatus = "MINED"
	TransactionDetailsTxStatusRECEIVED           TransactionDetailsTxStatus = "RECEIVED"
	TransactionDetailsTxStatusREJECTED           TransactionDetailsTxStatus = "REJECTED"
	TransactionDetailsTxStatusREQUESTEDBYNETWORK TransactionDetailsTxStatus = "REQUESTED_BY_NETWORK"
	TransactionDetailsTxStatusSEENONNETWORK      TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	TransactionDetailsTxStatusSENTTONETWORK      TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	TransactionDetailsTxStatusSTORED             TransactionDetailsTxStatus = "STORED"
	TransactionDetailsTxStatusUNKNOWN            TransactionDetailsTxStatus = "UNKNOWN"
)

// Defines values for TransactionResponseTxStatus.
const (
	TransactionResponseTxStatusANNOUNCEDTONETWORK TransactionResponseTxStatus = "ANNOUNCED_TO_NETWORK"
	TransactionResponseTxStatusCONFIRMED          TransactionResponseTxStatus = "CONFIRMED"
	TransactionResponseTxStatusMINED              TransactionResponseTxStatus = "MINED"
	TransactionResponseTxStatusRECEIVED           TransactionResponseTxStatus = "RECEIVED"
	TransactionResponseTxStatusREJECTED           TransactionResponseTxStatus = "REJECTED"
	TransactionResponseTxStatusREQUESTEDBYNETWORK TransactionResponseTxStatus = "REQUESTED_BY_NETWORK"
	TransactionResponseTxStatusSEENONNETWORK      TransactionResponseTxStatus = "SEEN_ON_NETWORK"
	TransactionResponseTxStatusSENTTONETWORK      TransactionResponseTxStatus = "SENT_TO_NETWORK"
	TransactionResponseTxStatusSTORED             TransactionResponseTxStatus = "STORED"
	TransactionResponseTxStatusUNKNOWN            TransactionResponseTxStatus = "UNKNOWN"
)

// ChainInfo defines model for ChainInfo.
type ChainInfo struct {
	BlockHash   *string `json:"blockHash,omitempty"`
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse defines model for CommonResponse.
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error interface{}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorConflict defines model for ErrorConflict.
type ErrorConflict struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Longer description of error
	Detail string `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Error code
	Status int `json:"status"`

	// Descriptive text for error
	Title string `json:"title"`

	// Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	Bytes    uint64 `json:"bytes"`
	Satoshis uint64 `json:"satoshis"`
}

// Policy defines model for Policy.
type Policy struct {
	Maxscriptsizepolicy     uint64    `json:"maxscriptsizepolicy"`
	Maxtxsigopscountspolicy uint64    `json:"maxtxsigopscountspolicy"`
	Maxtxsizepolicy         uint64    `json:"maxtxsizepolicy"`
	MiningFee               FeeAmount `json:"miningFee"`
}

// PolicyResponse defines model for PolicyResponse.
type PolicyResponse struct {
	Policy    Policy    `json:"policy"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	Status int    `json:"status"`
	Title  string `json:"title"`

	// Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Status      int       `json:"status"`
	Timestamp   time.Time `json:"timestamp"`
	Title       string    `json:"title"`

	// Transaction status
	TxStatus *TransactionResponseTxStatus `json:"txStatus,omitempty"`

	// Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// Transaction status
type TransactionResponseTxStatus string

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	BlockHash    *string        `json:"blockHash,omitempty"`
	BlockHeight  *uint64        `json:"blockHeight,omitempty"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions *[]interface{} `json:"transactions,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	BlockHash   *string   `json:"blockHash,omitempty"`
	BlockHeight *uint64   `json:"blockHeight,omitempty"`
	Timestamp   time.Time `json:"timestamp"`
	TxStatus    *string   `json:"txStatus,omitempty"`
	Txid        string    `json:"txid"`
}

// TransactionSubmitStatus defines model for TransactionSubmitStatus.
type TransactionSubmitStatus struct {
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// MerkleProof defines model for merkleProof.
type MerkleProof = string

// WaitForStatus defines model for waitForStatus.
type WaitForStatus = int

// POSTTransactionJSONBody defines parameters for POSTTransaction.
type POSTTransactionJSONBody = TransactionRequest

// POSTTransactionParams defines parameters for POSTTransaction.
type POSTTransactionParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = SENT_TO_NETWORK, 6 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionsJSONBody defines parameters for POSTTransactions.
type POSTTransactionsJSONBody = []string

// POSTTransactionsParams defines parameters for POSTTransactions.
type POSTTransactionsParams struct {
	// Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// Access token for notification callback endpoint.
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// Whether to include merkle proofs in the callbacks (true | false).
	XMerkleProof *MerkleProof `json:"X-MerkleProof,omitempty"`

	// Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = SENT_TO_NETWORK, 6 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionJSONRequestBody defines body for POSTTransaction for application/json ContentType.
type POSTTransactionJSONRequestBody = POSTTransactionJSONBody

// POSTTransactionsJSONRequestBody defines body for POSTTransactions for application/json ContentType.
type POSTTransactionsJSONRequestBody = POSTTransactionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETPolicy request
	GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransaction request with any body
	POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETTransactionStatus request
	GETTransactionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETTransactionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETTransactionStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETPolicyRequest generates requests for GETPolicy
func NewGETPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionRequest calls the generic POSTTransaction builder with application/json body
func NewPOSTTransactionRequest(server string, params *POSTTransactionParams, body POSTTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionRequestWithBody generates requests for POSTTransaction with any type of body
func NewPOSTTransactionRequestWithBody(server string, params *POSTTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

// NewGETTransactionStatusRequest generates requests for GETTransactionStatus
func NewGETTransactionStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionsRequest calls the generic POSTTransactions builder with application/json body
func NewPOSTTransactionsRequest(server string, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionsRequestWithBody generates requests for POSTTransactions with any type of body
func NewPOSTTransactionsRequestWithBody(server string, params *POSTTransactionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCallbackUrl != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackUrl", headerParam0)
	}

	if params.XCallbackToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CallbackToken", headerParam1)
	}

	if params.XMerkleProof != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, *params.XMerkleProof)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-MerkleProof", headerParam2)
	}

	if params.XWaitForStatus != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-WaitForStatus", headerParam3)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETPolicy request
	GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error)

	// POSTTransaction request with any body
	POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	// GETTransactionStatus request
	GETTransactionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error)

	// POSTTransactions request with any body
	POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)
}

type GETPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponse
}

// Status returns HTTPResponse.Status
func (r GETPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON201      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON402      *ErrorFee
	JSON409      *ErrorConflict
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r POSTTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETTransactionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
}

// Status returns HTTPResponse.Status
func (r GETTransactionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETTransactionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
}

// Status returns HTTPResponse.Status
func (r POSTTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETPolicyWithResponse request returning *GETPolicyResponse
func (c *ClientWithResponses) GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error) {
	rsp, err := c.GETPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETPolicyResponse(rsp)
}

// POSTTransactionWithBodyWithResponse request with arbitrary body returning *POSTTransactionResponse
func (c *ClientWithResponses) POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

// GETTransactionStatusWithResponse request returning *GETTransactionStatusResponse
func (c *ClientWithResponses) GETTransactionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error) {
	rsp, err := c.GETTransactionStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETTransactionStatusResponse(rsp)
}

// POSTTransactionsWithBodyWithResponse request with arbitrary body returning *POSTTransactionsResponse
func (c *ClientWithResponses) POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

// ParseGETPolicyResponse parses an HTTP response from a GETPolicyWithResponse call
func ParseGETPolicyResponse(rsp *http.Response) (*GETPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionResponse parses an HTTP response from a POSTTransactionWithResponse call
func ParsePOSTTransactionResponse(rsp *http.Response) (*POSTTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGETTransactionStatusResponse parses an HTTP response from a GETTransactionStatusWithResponse call
func ParseGETTransactionStatusResponse(rsp *http.Response) (*GETTransactionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETTransactionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionsResponse parses an HTTP response from a POSTTransactionsWithResponse call
func ParsePOSTTransactionsResponse(rsp *http.Response) (*POSTTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the policy settings
	// (GET /v1/policy)
	GETPolicy(ctx echo.Context) error
	// Submit a transaction.
	// (POST /v1/tx)
	POSTTransaction(ctx echo.Context, params POSTTransactionParams) error
	// Get transaction status.
	// (GET /v1/tx/{id})
	GETTransactionStatus(ctx echo.Context, id string) error
	// Submit multiple transactions.
	// (POST /v1/txs)
	POSTTransactions(ctx echo.Context, params POSTTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GETPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GETPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETPolicy(ctx)
	return err
}

// POSTTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransaction(ctx, params)
	return err
}

// GETTransactionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GETTransactionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GETTransactionStatus(ctx, id)
	return err
}

// POSTTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(Api_KeyScopes, []string{""})

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-MerkleProof" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MerkleProof")]; found {
		var XMerkleProof MerkleProof
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MerkleProof, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MerkleProof", runtime.ParamLocationHeader, valueList[0], &XMerkleProof)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MerkleProof: %s", err))
		}

		params.XMerkleProof = &XMerkleProof
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.POSTTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/policy", wrapper.GETPolicy)
	router.POST(baseURL+"/v1/tx", wrapper.POSTTransaction)
	router.GET(baseURL+"/v1/tx/:id", wrapper.GETTransactionStatus)
	router.POST(baseURL+"/v1/txs", wrapper.POSTTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mjDCVrg4AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
