// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_KeyScopes       = "Api_Key.Scopes"
	AuthorizationScopes = "Authorization.Scopes"
	BearerAuthScopes    = "BearerAuth.Scopes"
)

// Defines values for TransactionDetailsTxStatus.
const (
	ANNOUNCEDTONETWORK TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	CONFIRMED          TransactionDetailsTxStatus = "CONFIRMED"
	MINED              TransactionDetailsTxStatus = "MINED"
	RECEIVED           TransactionDetailsTxStatus = "RECEIVED"
	REJECTED           TransactionDetailsTxStatus = "REJECTED"
	REQUESTEDBYNETWORK TransactionDetailsTxStatus = "REQUESTED_BY_NETWORK"
	SEENONNETWORK      TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	SENTTONETWORK      TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	STORED             TransactionDetailsTxStatus = "STORED"
	UNKNOWN            TransactionDetailsTxStatus = "UNKNOWN"
)

// ChainInfo Chain info
type ChainInfo struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse Common response object
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// Error An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error struct {
	union json.RawMessage
}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Detail Longer description of error
	Detail string `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// Instance (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Status Error code
	Status int `json:"status"`

	// Title Descriptive text for error
	Title string `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorGeneric defines model for ErrorGeneric.
type ErrorGeneric struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorOutputs defines model for ErrorOutputs.
type ErrorOutputs struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorTxFormat defines model for ErrorTxFormat.
type ErrorTxFormat struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	// Bytes Number of bytes
	Bytes uint64 `json:"bytes"`

	// Satoshis Amount in Satoshis
	Satoshis uint64 `json:"satoshis"`
}

// Policy defines model for Policy.
type Policy struct {
	// Maxscriptsizepolicy Maximum script size [bytes]
	Maxscriptsizepolicy uint64 `json:"maxscriptsizepolicy"`

	// Maxtxsigopscountspolicy Maximum number of signature operations
	Maxtxsigopscountspolicy uint64 `json:"maxtxsigopscountspolicy"`

	// Maxtxsizepolicy Maximum transaction size [bytes]
	Maxtxsizepolicy uint64    `json:"maxtxsizepolicy"`
	MiningFee       FeeAmount `json:"miningFee"`
}

// PolicyResponse defines model for PolicyResponse.
type PolicyResponse struct {
	Policy    Policy    `json:"policy"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	// ExtraInfo Extra information about the transaction
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string `json:"merklePath"`

	// Status Status
	Status int `json:"status"`

	// Title Title
	Title string `json:"title"`

	// TxStatus Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Txid Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// TransactionDetailsTxStatus Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	// RawTx Raw hex string
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight *uint64 `json:"blockHeight,omitempty"`

	// ExtraInfo Extra info
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in  BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string `json:"merklePath"`

	// Status Status
	Status    int       `json:"status"`
	Timestamp time.Time `json:"timestamp"`

	// Title Title
	Title string `json:"title"`

	// TxStatus Transaction status
	TxStatus string `json:"txStatus"`

	// Txid Transaction ID in hex
	Txid string `json:"txid"`
}

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight  *uint64                                   `json:"blockHeight,omitempty"`
	Timestamp    time.Time                                 `json:"timestamp"`
	Transactions *[]TransactionResponses_Transactions_Item `json:"transactions,omitempty"`
}

// TransactionResponses_Transactions_Item defines model for TransactionResponses.transactions.Item.
type TransactionResponses_Transactions_Item struct {
	union json.RawMessage
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight *uint64 `json:"blockHeight,omitempty"`

	// ExtraInfo Extra information about the transaction
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string   `json:"merklePath"`
	Timestamp  time.Time `json:"timestamp"`

	// TxStatus Transaction status
	TxStatus *string `json:"txStatus,omitempty"`

	// Txid Transaction ID in hex
	Txid string `json:"txid"`
}

// TransactionSubmitStatus Transaction submit status
type TransactionSubmitStatus struct {
	// Status Status
	Status int `json:"status"`

	// Title Title
	Title string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// FullStatusUpdates defines model for fullStatusUpdates.
type FullStatusUpdates = bool

// MaxTimeout defines model for maxTimeout.
type MaxTimeout = int

// SkipFeeValidation defines model for skipFeeValidation.
type SkipFeeValidation = bool

// SkipScriptValidation defines model for skipScriptValidation.
type SkipScriptValidation = bool

// SkipTxValidation defines model for skipTxValidation.
type SkipTxValidation = bool

// WaitForStatus defines model for waitForStatus.
type WaitForStatus = int

// POSTTransactionTextBody defines parameters for POSTTransaction.
type POSTTransactionTextBody = string

// POSTTransactionParams defines parameters for POSTTransaction.
type POSTTransactionParams struct {
	// XCallbackUrl Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// XFullStatusUpdates Whether we should have full status updates in callback or not (including SEEN_IN_ORPHAN_MEMPOOL and SEEN_ON_NETWORK statuses).
	XFullStatusUpdates *FullStatusUpdates `json:"X-FullStatusUpdates,omitempty"`

	// XMaxTimeout Timeout in seconds to wait for new transaction status before request expires (max 30 seconds, default 5)
	XMaxTimeout *MaxTimeout `json:"X-MaxTimeout,omitempty"`

	// XSkipFeeValidation Whether we should skip fee validation or not.
	XSkipFeeValidation *SkipFeeValidation `json:"X-SkipFeeValidation,omitempty"`

	// XSkipScriptValidation Whether we should skip script validation or not.
	XSkipScriptValidation *SkipScriptValidation `json:"X-SkipScriptValidation,omitempty"`

	// XSkipTxValidation Whether we should skip overall tx validation or not.
	XSkipTxValidation *SkipTxValidation `json:"X-SkipTxValidation,omitempty"`

	// XCallbackToken Access token for notification callback endpoint. It will be used as a Authorization header for the http callback
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// XWaitForStatus Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionsJSONBody defines parameters for POSTTransactions.
type POSTTransactionsJSONBody = []TransactionRequest

// POSTTransactionsTextBody defines parameters for POSTTransactions.
type POSTTransactionsTextBody = string

// POSTTransactionsParams defines parameters for POSTTransactions.
type POSTTransactionsParams struct {
	// XCallbackUrl Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// XFullStatusUpdates Whether we should have full status updates in callback or not (including SEEN_IN_ORPHAN_MEMPOOL and SEEN_ON_NETWORK statuses).
	XFullStatusUpdates *FullStatusUpdates `json:"X-FullStatusUpdates,omitempty"`

	// XMaxTimeout Timeout in seconds to wait for new transaction status before request expires (max 30 seconds, default 5)
	XMaxTimeout *MaxTimeout `json:"X-MaxTimeout,omitempty"`

	// XSkipFeeValidation Whether we should skip fee validation or not.
	XSkipFeeValidation *SkipFeeValidation `json:"X-SkipFeeValidation,omitempty"`

	// XSkipScriptValidation Whether we should skip script validation or not.
	XSkipScriptValidation *SkipScriptValidation `json:"X-SkipScriptValidation,omitempty"`

	// XSkipTxValidation Whether we should skip overall tx validation or not.
	XSkipTxValidation *SkipTxValidation `json:"X-SkipTxValidation,omitempty"`

	// XCallbackToken Access token for notification callback endpoint. It will be used as a Authorization header for the http callback
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// XWaitForStatus Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`
}

// POSTTransactionJSONRequestBody defines body for POSTTransaction for application/json ContentType.
type POSTTransactionJSONRequestBody = TransactionRequest

// POSTTransactionTextRequestBody defines body for POSTTransaction for text/plain ContentType.
type POSTTransactionTextRequestBody = POSTTransactionTextBody

// POSTTransactionsJSONRequestBody defines body for POSTTransactions for application/json ContentType.
type POSTTransactionsJSONRequestBody = POSTTransactionsJSONBody

// POSTTransactionsTextRequestBody defines body for POSTTransactions for text/plain ContentType.
type POSTTransactionsTextRequestBody = POSTTransactionsTextBody

// AsErrorUnlockingScripts returns the union data inside the Error as a ErrorUnlockingScripts
func (t Error) AsErrorUnlockingScripts() (ErrorUnlockingScripts, error) {
	var body ErrorUnlockingScripts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorUnlockingScripts overwrites any union data inside the Error as the provided ErrorUnlockingScripts
func (t *Error) FromErrorUnlockingScripts(v ErrorUnlockingScripts) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorUnlockingScripts performs a merge with any union data inside the Error, using the provided ErrorUnlockingScripts
func (t *Error) MergeErrorUnlockingScripts(v ErrorUnlockingScripts) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorInputs returns the union data inside the Error as a ErrorInputs
func (t Error) AsErrorInputs() (ErrorInputs, error) {
	var body ErrorInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorInputs overwrites any union data inside the Error as the provided ErrorInputs
func (t *Error) FromErrorInputs(v ErrorInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorInputs performs a merge with any union data inside the Error, using the provided ErrorInputs
func (t *Error) MergeErrorInputs(v ErrorInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorMalformed returns the union data inside the Error as a ErrorMalformed
func (t Error) AsErrorMalformed() (ErrorMalformed, error) {
	var body ErrorMalformed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorMalformed overwrites any union data inside the Error as the provided ErrorMalformed
func (t *Error) FromErrorMalformed(v ErrorMalformed) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorMalformed performs a merge with any union data inside the Error, using the provided ErrorMalformed
func (t *Error) MergeErrorMalformed(v ErrorMalformed) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorFrozenPolicy returns the union data inside the Error as a ErrorFrozenPolicy
func (t Error) AsErrorFrozenPolicy() (ErrorFrozenPolicy, error) {
	var body ErrorFrozenPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorFrozenPolicy overwrites any union data inside the Error as the provided ErrorFrozenPolicy
func (t *Error) FromErrorFrozenPolicy(v ErrorFrozenPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorFrozenPolicy performs a merge with any union data inside the Error, using the provided ErrorFrozenPolicy
func (t *Error) MergeErrorFrozenPolicy(v ErrorFrozenPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorFrozenConsensus returns the union data inside the Error as a ErrorFrozenConsensus
func (t Error) AsErrorFrozenConsensus() (ErrorFrozenConsensus, error) {
	var body ErrorFrozenConsensus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorFrozenConsensus overwrites any union data inside the Error as the provided ErrorFrozenConsensus
func (t *Error) FromErrorFrozenConsensus(v ErrorFrozenConsensus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorFrozenConsensus performs a merge with any union data inside the Error, using the provided ErrorFrozenConsensus
func (t *Error) MergeErrorFrozenConsensus(v ErrorFrozenConsensus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTransactionDetails returns the union data inside the TransactionResponses_Transactions_Item as a TransactionDetails
func (t TransactionResponses_Transactions_Item) AsTransactionDetails() (TransactionDetails, error) {
	var body TransactionDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransactionDetails overwrites any union data inside the TransactionResponses_Transactions_Item as the provided TransactionDetails
func (t *TransactionResponses_Transactions_Item) FromTransactionDetails(v TransactionDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransactionDetails performs a merge with any union data inside the TransactionResponses_Transactions_Item, using the provided TransactionDetails
func (t *TransactionResponses_Transactions_Item) MergeTransactionDetails(v TransactionDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsError returns the union data inside the TransactionResponses_Transactions_Item as a Error
func (t TransactionResponses_Transactions_Item) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the TransactionResponses_Transactions_Item as the provided Error
func (t *TransactionResponses_Transactions_Item) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the TransactionResponses_Transactions_Item, using the provided Error
func (t *TransactionResponses_Transactions_Item) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransactionResponses_Transactions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransactionResponses_Transactions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETPolicy request
	GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactionWithBody request with any body
	POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactionWithTextBody(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETTransactionStatus request
	GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactionsWithBody request with any body
	POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactionsWithTextBody(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithTextBody(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETTransactionStatusRequest(c.Server, txid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithTextBody(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETPolicyRequest generates requests for GETPolicy
func NewGETPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionRequest calls the generic POSTTransaction builder with application/json body
func NewPOSTTransactionRequest(server string, params *POSTTransactionParams, body POSTTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionRequestWithTextBody calls the generic POSTTransaction builder with text/plain body
func NewPOSTTransactionRequestWithTextBody(server string, params *POSTTransactionParams, body POSTTransactionTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPOSTTransactionRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPOSTTransactionRequestWithBody generates requests for POSTTransaction with any type of body
func NewPOSTTransactionRequestWithBody(server string, params *POSTTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XCallbackUrl != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackUrl", headerParam0)
		}

		if params.XFullStatusUpdates != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, *params.XFullStatusUpdates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-FullStatusUpdates", headerParam1)
		}

		if params.XMaxTimeout != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, *params.XMaxTimeout)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-MaxTimeout", headerParam2)
		}

		if params.XSkipFeeValidation != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, *params.XSkipFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipFeeValidation", headerParam3)
		}

		if params.XSkipScriptValidation != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, *params.XSkipScriptValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipScriptValidation", headerParam4)
		}

		if params.XSkipTxValidation != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, *params.XSkipTxValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipTxValidation", headerParam5)
		}

		if params.XCallbackToken != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackToken", headerParam6)
		}

		if params.XWaitForStatus != nil {
			var headerParam7 string

			headerParam7, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitForStatus", headerParam7)
		}

	}

	return req, nil
}

// NewGETTransactionStatusRequest generates requests for GETTransactionStatus
func NewGETTransactionStatusRequest(server string, txid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "txid", runtime.ParamLocationPath, txid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionsRequest calls the generic POSTTransactions builder with application/json body
func NewPOSTTransactionsRequest(server string, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionsRequestWithTextBody calls the generic POSTTransactions builder with text/plain body
func NewPOSTTransactionsRequestWithTextBody(server string, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPOSTTransactionsRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPOSTTransactionsRequestWithBody generates requests for POSTTransactions with any type of body
func NewPOSTTransactionsRequestWithBody(server string, params *POSTTransactionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XCallbackUrl != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackUrl", headerParam0)
		}

		if params.XFullStatusUpdates != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, *params.XFullStatusUpdates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-FullStatusUpdates", headerParam1)
		}

		if params.XMaxTimeout != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, *params.XMaxTimeout)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-MaxTimeout", headerParam2)
		}

		if params.XSkipFeeValidation != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, *params.XSkipFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipFeeValidation", headerParam3)
		}

		if params.XSkipScriptValidation != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, *params.XSkipScriptValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipScriptValidation", headerParam4)
		}

		if params.XSkipTxValidation != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, *params.XSkipTxValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipTxValidation", headerParam5)
		}

		if params.XCallbackToken != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackToken", headerParam6)
		}

		if params.XWaitForStatus != nil {
			var headerParam7 string

			headerParam7, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitForStatus", headerParam7)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETPolicyWithResponse request
	GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error)

	// POSTTransactionWithBodyWithResponse request with any body
	POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	// GETTransactionStatusWithResponse request
	GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error)

	// POSTTransactionsWithBodyWithResponse request with any body
	POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)
}

type GETPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponse
}

// Status returns HTTPResponse.Status
func (r GETPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON409      *ErrorGeneric
	JSON422      *Error
	JSON460      *ErrorTxFormat
	JSON461      *ErrorUnlockingScripts
	JSON462      *ErrorInputs
	JSON463      *ErrorMalformed
	JSON464      *ErrorOutputs
	JSON465      *ErrorFee
}

// Status returns HTTPResponse.Status
func (r POSTTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETTransactionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
	JSON404      *ErrorNotFound
	JSON409      *ErrorGeneric
}

// Status returns HTTPResponse.Status
func (r GETTransactionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETTransactionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
	JSON409      *ErrorGeneric
	JSON460      *ErrorTxFormat
	JSON461      *ErrorUnlockingScripts
	JSON462      *ErrorInputs
	JSON463      *ErrorMalformed
	JSON464      *ErrorOutputs
	JSON465      *ErrorFee
}

// Status returns HTTPResponse.Status
func (r POSTTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETPolicyWithResponse request returning *GETPolicyResponse
func (c *ClientWithResponses) GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error) {
	rsp, err := c.GETPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETPolicyResponse(rsp)
}

// POSTTransactionWithBodyWithResponse request with arbitrary body returning *POSTTransactionResponse
func (c *ClientWithResponses) POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

// GETTransactionStatusWithResponse request returning *GETTransactionStatusResponse
func (c *ClientWithResponses) GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error) {
	rsp, err := c.GETTransactionStatus(ctx, txid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETTransactionStatusResponse(rsp)
}

// POSTTransactionsWithBodyWithResponse request with arbitrary body returning *POSTTransactionsResponse
func (c *ClientWithResponses) POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

// ParseGETPolicyResponse parses an HTTP response from a GETPolicyWithResponse call
func ParseGETPolicyResponse(rsp *http.Response) (*GETPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionResponse parses an HTTP response from a POSTTransactionWithResponse call
func ParsePOSTTransactionResponse(rsp *http.Response) (*POSTTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 460:
		var dest ErrorTxFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON460 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 461:
		var dest ErrorUnlockingScripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON461 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 462:
		var dest ErrorInputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON462 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 463:
		var dest ErrorMalformed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON463 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 464:
		var dest ErrorOutputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON464 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 465:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON465 = &dest

	}

	return response, nil
}

// ParseGETTransactionStatusResponse parses an HTTP response from a GETTransactionStatusWithResponse call
func ParseGETTransactionStatusResponse(rsp *http.Response) (*GETTransactionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETTransactionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionsResponse parses an HTTP response from a POSTTransactionsWithResponse call
func ParsePOSTTransactionsResponse(rsp *http.Response) (*POSTTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 460:
		var dest ErrorTxFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON460 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 461:
		var dest ErrorUnlockingScripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON461 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 462:
		var dest ErrorInputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON462 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 463:
		var dest ErrorMalformed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON463 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 464:
		var dest ErrorOutputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON464 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 465:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON465 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the policy settings
	// (GET /v1/policy)
	GETPolicy(ctx echo.Context) error
	// Submit a transaction.
	// (POST /v1/tx)
	POSTTransaction(ctx echo.Context, params POSTTransactionParams) error
	// Get transaction status.
	// (GET /v1/tx/{txid})
	GETTransactionStatus(ctx echo.Context, txid string) error
	// Submit multiple transactions.
	// (POST /v1/txs)
	POSTTransactions(ctx echo.Context, params POSTTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GETPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GETPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GETPolicy(ctx)
	return err
}

// POSTTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-FullStatusUpdates" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-FullStatusUpdates")]; found {
		var XFullStatusUpdates FullStatusUpdates
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-FullStatusUpdates, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, valueList[0], &XFullStatusUpdates)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-FullStatusUpdates: %s", err))
		}

		params.XFullStatusUpdates = &XFullStatusUpdates
	}
	// ------------- Optional header parameter "X-MaxTimeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MaxTimeout")]; found {
		var XMaxTimeout MaxTimeout
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MaxTimeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, valueList[0], &XMaxTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MaxTimeout: %s", err))
		}

		params.XMaxTimeout = &XMaxTimeout
	}
	// ------------- Optional header parameter "X-SkipFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipFeeValidation")]; found {
		var XSkipFeeValidation SkipFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, valueList[0], &XSkipFeeValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipFeeValidation: %s", err))
		}

		params.XSkipFeeValidation = &XSkipFeeValidation
	}
	// ------------- Optional header parameter "X-SkipScriptValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipScriptValidation")]; found {
		var XSkipScriptValidation SkipScriptValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipScriptValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, valueList[0], &XSkipScriptValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipScriptValidation: %s", err))
		}

		params.XSkipScriptValidation = &XSkipScriptValidation
	}
	// ------------- Optional header parameter "X-SkipTxValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipTxValidation")]; found {
		var XSkipTxValidation SkipTxValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipTxValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, valueList[0], &XSkipTxValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipTxValidation: %s", err))
		}

		params.XSkipTxValidation = &XSkipTxValidation
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.POSTTransaction(ctx, params)
	return err
}

// GETTransactionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GETTransactionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GETTransactionStatus(ctx, txid)
	return err
}

// POSTTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, valueList[0], &XCallbackUrl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-FullStatusUpdates" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-FullStatusUpdates")]; found {
		var XFullStatusUpdates FullStatusUpdates
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-FullStatusUpdates, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, valueList[0], &XFullStatusUpdates)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-FullStatusUpdates: %s", err))
		}

		params.XFullStatusUpdates = &XFullStatusUpdates
	}
	// ------------- Optional header parameter "X-MaxTimeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MaxTimeout")]; found {
		var XMaxTimeout MaxTimeout
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MaxTimeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, valueList[0], &XMaxTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MaxTimeout: %s", err))
		}

		params.XMaxTimeout = &XMaxTimeout
	}
	// ------------- Optional header parameter "X-SkipFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipFeeValidation")]; found {
		var XSkipFeeValidation SkipFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, valueList[0], &XSkipFeeValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipFeeValidation: %s", err))
		}

		params.XSkipFeeValidation = &XSkipFeeValidation
	}
	// ------------- Optional header parameter "X-SkipScriptValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipScriptValidation")]; found {
		var XSkipScriptValidation SkipScriptValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipScriptValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, valueList[0], &XSkipScriptValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipScriptValidation: %s", err))
		}

		params.XSkipScriptValidation = &XSkipScriptValidation
	}
	// ------------- Optional header parameter "X-SkipTxValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipTxValidation")]; found {
		var XSkipTxValidation SkipTxValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipTxValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, valueList[0], &XSkipTxValidation)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipTxValidation: %s", err))
		}

		params.XSkipTxValidation = &XSkipTxValidation
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, valueList[0], &XCallbackToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, valueList[0], &XWaitForStatus)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.POSTTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/policy", wrapper.GETPolicy)
	router.POST(baseURL+"/v1/tx", wrapper.POSTTransaction)
	router.GET(baseURL+"/v1/tx/:txid", wrapper.GETTransactionStatus)
	router.POST(baseURL+"/v1/txs", wrapper.POSTTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6aFlPGUUwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
