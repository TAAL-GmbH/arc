// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/bitcoin-sv/arc/k8s_watcher"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/watch"
	"sync"
)

// Ensure, that K8sClientMock does implement k8s_watcher.K8sClient.
// If this is not the case, regenerate this file with moq.
var _ k8s_watcher.K8sClient = &K8sClientMock{}

// K8sClientMock is a mock implementation of k8s_watcher.K8sClient.
//
//	func TestSomethingThatUsesK8sClient(t *testing.T) {
//
//		// make and configure a mocked k8s_watcher.K8sClient
//		mockedK8sClient := &K8sClientMock{
//			GetPodWatcherFunc: func(ctx context.Context, namespace string, podName string) (watch.Interface, error) {
//				panic("mock out the GetPodWatcher method")
//			},
//			GetPodsFunc: func(ctx context.Context, namespace string) (*v1.PodList, error) {
//				panic("mock out the GetPods method")
//			},
//		}
//
//		// use mockedK8sClient in code that requires k8s_watcher.K8sClient
//		// and then make assertions.
//
//	}
type K8sClientMock struct {
	// GetPodWatcherFunc mocks the GetPodWatcher method.
	GetPodWatcherFunc func(ctx context.Context, namespace string, podName string) (watch.Interface, error)

	// GetPodsFunc mocks the GetPods method.
	GetPodsFunc func(ctx context.Context, namespace string) (*v1.PodList, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPodWatcher holds details about calls to the GetPodWatcher method.
		GetPodWatcher []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// PodName is the podName argument value.
			PodName string
		}
		// GetPods holds details about calls to the GetPods method.
		GetPods []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockGetPodWatcher sync.RWMutex
	lockGetPods       sync.RWMutex
}

// GetPodWatcher calls GetPodWatcherFunc.
func (mock *K8sClientMock) GetPodWatcher(ctx context.Context, namespace string, podName string) (watch.Interface, error) {
	if mock.GetPodWatcherFunc == nil {
		panic("K8sClientMock.GetPodWatcherFunc: method is nil but K8sClient.GetPodWatcher was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		PodName   string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		PodName:   podName,
	}
	mock.lockGetPodWatcher.Lock()
	mock.calls.GetPodWatcher = append(mock.calls.GetPodWatcher, callInfo)
	mock.lockGetPodWatcher.Unlock()
	return mock.GetPodWatcherFunc(ctx, namespace, podName)
}

// GetPodWatcherCalls gets all the calls that were made to GetPodWatcher.
// Check the length with:
//
//	len(mockedK8sClient.GetPodWatcherCalls())
func (mock *K8sClientMock) GetPodWatcherCalls() []struct {
	Ctx       context.Context
	Namespace string
	PodName   string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		PodName   string
	}
	mock.lockGetPodWatcher.RLock()
	calls = mock.calls.GetPodWatcher
	mock.lockGetPodWatcher.RUnlock()
	return calls
}

// GetPods calls GetPodsFunc.
func (mock *K8sClientMock) GetPods(ctx context.Context, namespace string) (*v1.PodList, error) {
	if mock.GetPodsFunc == nil {
		panic("K8sClientMock.GetPodsFunc: method is nil but K8sClient.GetPods was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
	}{
		Ctx:       ctx,
		Namespace: namespace,
	}
	mock.lockGetPods.Lock()
	mock.calls.GetPods = append(mock.calls.GetPods, callInfo)
	mock.lockGetPods.Unlock()
	return mock.GetPodsFunc(ctx, namespace)
}

// GetPodsCalls gets all the calls that were made to GetPods.
// Check the length with:
//
//	len(mockedK8sClient.GetPodsCalls())
func (mock *K8sClientMock) GetPodsCalls() []struct {
	Ctx       context.Context
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
	}
	mock.lockGetPods.RLock()
	calls = mock.calls.GetPods
	mock.lockGetPods.RUnlock()
	return calls
}
