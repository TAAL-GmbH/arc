// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/bitcoin-sv/arc/metamorph"
	"github.com/bitcoin-sv/arc/metamorph/metamorph_api"
	"sync"
)

// Ensure, that TransactionMaintainerMock does implement metamorph.TransactionMaintainer.
// If this is not the case, regenerate this file with moq.
var _ metamorph.TransactionMaintainer = &TransactionMaintainerMock{}

// TransactionMaintainerMock is a mock implementation of metamorph.TransactionMaintainer.
//
//	func TestSomethingThatUsesTransactionMaintainer(t *testing.T) {
//
//		// make and configure a mocked metamorph.TransactionMaintainer
//		mockedTransactionMaintainer := &TransactionMaintainerMock{
//			ClearDataFunc: func(ctx context.Context, req *metamorph_api.ClearDataRequest) (int64, error) {
//				panic("mock out the ClearData method")
//			},
//			SetUnlockedByNameFunc: func(ctx context.Context, req *metamorph_api.SetUnlockedByNameRequest) (int64, error) {
//				panic("mock out the SetUnlockedByName method")
//			},
//		}
//
//		// use mockedTransactionMaintainer in code that requires metamorph.TransactionMaintainer
//		// and then make assertions.
//
//	}
type TransactionMaintainerMock struct {
	// ClearDataFunc mocks the ClearData method.
	ClearDataFunc func(ctx context.Context, req *metamorph_api.ClearDataRequest) (int64, error)

	// SetUnlockedByNameFunc mocks the SetUnlockedByName method.
	SetUnlockedByNameFunc func(ctx context.Context, req *metamorph_api.SetUnlockedByNameRequest) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClearData holds details about calls to the ClearData method.
		ClearData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *metamorph_api.ClearDataRequest
		}
		// SetUnlockedByName holds details about calls to the SetUnlockedByName method.
		SetUnlockedByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *metamorph_api.SetUnlockedByNameRequest
		}
	}
	lockClearData         sync.RWMutex
	lockSetUnlockedByName sync.RWMutex
}

// ClearData calls ClearDataFunc.
func (mock *TransactionMaintainerMock) ClearData(ctx context.Context, req *metamorph_api.ClearDataRequest) (int64, error) {
	if mock.ClearDataFunc == nil {
		panic("TransactionMaintainerMock.ClearDataFunc: method is nil but TransactionMaintainer.ClearData was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *metamorph_api.ClearDataRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockClearData.Lock()
	mock.calls.ClearData = append(mock.calls.ClearData, callInfo)
	mock.lockClearData.Unlock()
	return mock.ClearDataFunc(ctx, req)
}

// ClearDataCalls gets all the calls that were made to ClearData.
// Check the length with:
//
//	len(mockedTransactionMaintainer.ClearDataCalls())
func (mock *TransactionMaintainerMock) ClearDataCalls() []struct {
	Ctx context.Context
	Req *metamorph_api.ClearDataRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *metamorph_api.ClearDataRequest
	}
	mock.lockClearData.RLock()
	calls = mock.calls.ClearData
	mock.lockClearData.RUnlock()
	return calls
}

// SetUnlockedByName calls SetUnlockedByNameFunc.
func (mock *TransactionMaintainerMock) SetUnlockedByName(ctx context.Context, req *metamorph_api.SetUnlockedByNameRequest) (int64, error) {
	if mock.SetUnlockedByNameFunc == nil {
		panic("TransactionMaintainerMock.SetUnlockedByNameFunc: method is nil but TransactionMaintainer.SetUnlockedByName was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *metamorph_api.SetUnlockedByNameRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSetUnlockedByName.Lock()
	mock.calls.SetUnlockedByName = append(mock.calls.SetUnlockedByName, callInfo)
	mock.lockSetUnlockedByName.Unlock()
	return mock.SetUnlockedByNameFunc(ctx, req)
}

// SetUnlockedByNameCalls gets all the calls that were made to SetUnlockedByName.
// Check the length with:
//
//	len(mockedTransactionMaintainer.SetUnlockedByNameCalls())
func (mock *TransactionMaintainerMock) SetUnlockedByNameCalls() []struct {
	Ctx context.Context
	Req *metamorph_api.SetUnlockedByNameRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *metamorph_api.SetUnlockedByNameRequest
	}
	mock.lockSetUnlockedByName.RLock()
	calls = mock.calls.SetUnlockedByName
	mock.lockSetUnlockedByName.RUnlock()
	return calls
}
