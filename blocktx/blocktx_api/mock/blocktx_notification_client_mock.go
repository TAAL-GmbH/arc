// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	"github.com/bitcoin-sv/arc/blocktx/blocktx_api"
	"google.golang.org/grpc/metadata"
	sync "sync"
)

// Ensure, that BlockTxAPI_GetBlockNotificationStreamClientMock does implement blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient.
// If this is not the case, regenerate this file with moq.
var _ blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient = &BlockTxAPI_GetBlockNotificationStreamClientMock{}

// BlockTxAPI_GetBlockNotificationStreamClientMock is a mock implementation of blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient.
//
//	func TestSomethingThatUsesBlockTxAPI_GetBlockNotificationStreamClient(t *testing.T) {
//
//		// make and configure a mocked blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient
//		mockedBlockTxAPI_GetBlockNotificationStreamClient := &BlockTxAPI_GetBlockNotificationStreamClientMock{
//			CloseSendFunc: func() error {
//				panic("mock out the CloseSend method")
//			},
//			ContextFunc: func() context.Context {
//				panic("mock out the Context method")
//			},
//			HeaderFunc: func() (metadata.MD, error) {
//				panic("mock out the Header method")
//			},
//			RecvFunc: func() (*blocktx_api.Block, error) {
//				panic("mock out the Recv method")
//			},
//			RecvMsgFunc: func(m interface{}) error {
//				panic("mock out the RecvMsg method")
//			},
//			SendMsgFunc: func(m interface{}) error {
//				panic("mock out the SendMsg method")
//			},
//			TrailerFunc: func() metadata.MD {
//				panic("mock out the Trailer method")
//			},
//		}
//
//		// use mockedBlockTxAPI_GetBlockNotificationStreamClient in code that requires blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient
//		// and then make assertions.
//
//	}
type BlockTxAPI_GetBlockNotificationStreamClientMock struct {
	// CloseSendFunc mocks the CloseSend method.
	CloseSendFunc func() error

	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// HeaderFunc mocks the Header method.
	HeaderFunc func() (metadata.MD, error)

	// RecvFunc mocks the Recv method.
	RecvFunc func() (*blocktx_api.Block, error)

	// RecvMsgFunc mocks the RecvMsg method.
	RecvMsgFunc func(m interface{}) error

	// SendMsgFunc mocks the SendMsg method.
	SendMsgFunc func(m interface{}) error

	// TrailerFunc mocks the Trailer method.
	TrailerFunc func() metadata.MD

	// calls tracks calls to the methods.
	calls struct {
		// CloseSend holds details about calls to the CloseSend method.
		CloseSend []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Header holds details about calls to the Header method.
		Header []struct {
		}
		// Recv holds details about calls to the Recv method.
		Recv []struct {
		}
		// RecvMsg holds details about calls to the RecvMsg method.
		RecvMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// SendMsg holds details about calls to the SendMsg method.
		SendMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Trailer holds details about calls to the Trailer method.
		Trailer []struct {
		}
	}
	lockCloseSend sync.RWMutex
	lockContext   sync.RWMutex
	lockHeader    sync.RWMutex
	lockRecv      sync.RWMutex
	lockRecvMsg   sync.RWMutex
	lockSendMsg   sync.RWMutex
	lockTrailer   sync.RWMutex
}

// CloseSend calls CloseSendFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) CloseSend() error {
	if mock.CloseSendFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.CloseSendFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.CloseSend was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCloseSend.Lock()
	mock.calls.CloseSend = append(mock.calls.CloseSend, callInfo)
	mock.lockCloseSend.Unlock()
	return mock.CloseSendFunc()
}

// CloseSendCalls gets all the calls that were made to CloseSend.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.CloseSendCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) CloseSendCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCloseSend.RLock()
	calls = mock.calls.CloseSend
	mock.lockCloseSend.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.ContextFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.ContextCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Header calls HeaderFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) Header() (metadata.MD, error) {
	if mock.HeaderFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.HeaderFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.Header was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeader.Lock()
	mock.calls.Header = append(mock.calls.Header, callInfo)
	mock.lockHeader.Unlock()
	return mock.HeaderFunc()
}

// HeaderCalls gets all the calls that were made to Header.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.HeaderCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) HeaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeader.RLock()
	calls = mock.calls.Header
	mock.lockHeader.RUnlock()
	return calls
}

// Recv calls RecvFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) Recv() (*blocktx_api.Block, error) {
	if mock.RecvFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.RecvFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.Recv was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRecv.Lock()
	mock.calls.Recv = append(mock.calls.Recv, callInfo)
	mock.lockRecv.Unlock()
	return mock.RecvFunc()
}

// RecvCalls gets all the calls that were made to Recv.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.RecvCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) RecvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRecv.RLock()
	calls = mock.calls.Recv
	mock.lockRecv.RUnlock()
	return calls
}

// RecvMsg calls RecvMsgFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) RecvMsg(m interface{}) error {
	if mock.RecvMsgFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.RecvMsgFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.RecvMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockRecvMsg.Lock()
	mock.calls.RecvMsg = append(mock.calls.RecvMsg, callInfo)
	mock.lockRecvMsg.Unlock()
	return mock.RecvMsgFunc(m)
}

// RecvMsgCalls gets all the calls that were made to RecvMsg.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.RecvMsgCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) RecvMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockRecvMsg.RLock()
	calls = mock.calls.RecvMsg
	mock.lockRecvMsg.RUnlock()
	return calls
}

// SendMsg calls SendMsgFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) SendMsg(m interface{}) error {
	if mock.SendMsgFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.SendMsgFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.SendMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockSendMsg.Lock()
	mock.calls.SendMsg = append(mock.calls.SendMsg, callInfo)
	mock.lockSendMsg.Unlock()
	return mock.SendMsgFunc(m)
}

// SendMsgCalls gets all the calls that were made to SendMsg.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.SendMsgCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) SendMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockSendMsg.RLock()
	calls = mock.calls.SendMsg
	mock.lockSendMsg.RUnlock()
	return calls
}

// Trailer calls TrailerFunc.
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) Trailer() metadata.MD {
	if mock.TrailerFunc == nil {
		panic("BlockTxAPI_GetBlockNotificationStreamClientMock.TrailerFunc: method is nil but BlockTxAPI_GetBlockNotificationStreamClient.Trailer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTrailer.Lock()
	mock.calls.Trailer = append(mock.calls.Trailer, callInfo)
	mock.lockTrailer.Unlock()
	return mock.TrailerFunc()
}

// TrailerCalls gets all the calls that were made to Trailer.
// Check the length with:
//
//	len(mockedBlockTxAPI_GetBlockNotificationStreamClient.TrailerCalls())
func (mock *BlockTxAPI_GetBlockNotificationStreamClientMock) TrailerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTrailer.RLock()
	calls = mock.calls.Trailer
	mock.lockTrailer.RUnlock()
	return calls
}
