// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"

	blocktx_api "github.com/bitcoin-sv/arc/blocktx/blocktx_api"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// BlockTxAPIClientMock is an autogenerated mock type for the BlockTxAPIClient type
type BlockTxAPIClientMock struct {
	mock.Mock
}

// GetBlock provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetBlock(ctx context.Context, in *blocktx_api.Hash, opts ...grpc.CallOption) (*blocktx_api.Block, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Hash, ...grpc.CallOption) (*blocktx_api.Block, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Hash, ...grpc.CallOption) *blocktx_api.Block); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Hash, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockForHeight provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetBlockForHeight(ctx context.Context, in *blocktx_api.Height, opts ...grpc.CallOption) (*blocktx_api.Block, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) (*blocktx_api.Block, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) *blocktx_api.Block); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockNotificationStream provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetBlockNotificationStream(ctx context.Context, in *blocktx_api.Height, opts ...grpc.CallOption) (blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) (blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocktx_api.BlockTxAPI_GetBlockNotificationStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Height, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockTransactions provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetBlockTransactions(ctx context.Context, in *blocktx_api.Block, opts ...grpc.CallOption) (*blocktx_api.Transactions, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Block, ...grpc.CallOption) (*blocktx_api.Transactions, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Block, ...grpc.CallOption) *blocktx_api.Transactions); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Block, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastProcessedBlock provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetLastProcessedBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.Block, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*blocktx_api.Block, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *blocktx_api.Block); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinedTransactionsForBlock provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetMinedTransactionsForBlock(ctx context.Context, in *blocktx_api.BlockAndSource, opts ...grpc.CallOption) (*blocktx_api.MinedTransactions, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.MinedTransactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.BlockAndSource, ...grpc.CallOption) (*blocktx_api.MinedTransactions, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.BlockAndSource, ...grpc.CallOption) *blocktx_api.MinedTransactions); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.MinedTransactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.BlockAndSource, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionBlock provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetTransactionBlock(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.Block, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) (*blocktx_api.Block, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) *blocktx_api.Block); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionBlocks provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetTransactionBlocks(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.TransactionBlocks, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.TransactionBlocks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transactions, ...grpc.CallOption) (*blocktx_api.TransactionBlocks, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transactions, ...grpc.CallOption) *blocktx_api.TransactionBlocks); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.TransactionBlocks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Transactions, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionMerklePath provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) GetTransactionMerklePath(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.MerklePath, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.MerklePath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) (*blocktx_api.MerklePath, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) *blocktx_api.MerklePath); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.MerklePath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.HealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*blocktx_api.HealthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *blocktx_api.HealthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.HealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocateTransaction provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) LocateTransaction(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*blocktx_api.Source, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.Source
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) (*blocktx_api.Source, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) *blocktx_api.Source); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.Source)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.Transaction, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransaction provides a mock function with given fields: ctx, in, opts
func (_m *BlockTxAPIClientMock) RegisterTransaction(ctx context.Context, in *blocktx_api.TransactionAndSource, opts ...grpc.CallOption) (*blocktx_api.RegisterTransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blocktx_api.RegisterTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.TransactionAndSource, ...grpc.CallOption) (*blocktx_api.RegisterTransactionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blocktx_api.TransactionAndSource, ...grpc.CallOption) *blocktx_api.RegisterTransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocktx_api.RegisterTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blocktx_api.TransactionAndSource, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBlockTxAPIClientMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlockTxAPIClientMock creates a new instance of BlockTxAPIClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockTxAPIClientMock(t mockConstructorTestingTNewBlockTxAPIClientMock) *BlockTxAPIClientMock {
	mock := &BlockTxAPIClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
