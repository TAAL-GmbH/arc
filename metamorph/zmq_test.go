package metamorph

import (
	"net/url"
	"testing"

	"github.com/bitcoin-sv/arc/metamorph/metamorph_api"
	"github.com/bitcoin-sv/arc/metamorph/mocks"
	"github.com/stretchr/testify/assert"
)

//go:generate moq -pkg mocks -out ./mocks/zmq_mock.go . ZMQI
func TestMissingInputsZMQI(t *testing.T) {
	// make and configure a mocked ZMQI
	mockedZMQI := &mocks.ZMQIMock{
		SubscribeFunc: func(s string, stringsCh chan []string) error {
			if s != "invalidtx" {
				return nil
			}
			event := make([]string, 0)
			event = append(event, "invalidtx")
			event = append(event, "7b2266726f6d426c6f636b223a2066616c73652c22736f75726365223a2022703270222c2261646472657373223a20223132372e302e302e313a3135323234222c226e6f64654964223a2037303139352c2274786964223a202234616531643230396131616165326134616137303365326164646166393133356634613162316364306438373032303033376561353631396434393566373137222c2273697a65223a203139322c22686578223ac226973496e76616c6964223a20747275652c22697356616c69646174696f6e4572726f72223a2066616c73652c2269734d697373696e67496e70757473223a20747275652c226973446f75626c655370656e644465746563746564223a2066616c73652c2269734d656d706f6f6c436f6e666c6963744465746563746564223a2066616c73652c2269734e6f6e46696e616c223a2066616c73652c22697356616c69646174696f6e54696d656f75744578636565646564223a2066616c73652c2269735374616e646172645478223a20747275652c2272656a656374696f6e436f6465223a20302c2272656a656374696f6e526561736f6e223a2022222c22636f6c6c6964656457697468223a205b5d2c2272656a656374696f6e54696d65223a2022323032332d31312d31335431333a33393a32365a227d")
			event = append(event, "2459")
			stringsCh <- event
			return nil
		},
	}

	statuses := make(chan *PeerTxMessage, 1)
	url, _ := url.Parse("https://some-url.com")
	zmq := NewZMQ(url, statuses)
	zmq.Start(mockedZMQI)
	status := <-statuses

	assert.Equal(t, status.Status, metamorph_api.Status_SENT_TO_NETWORK)
	assert.Equal(t, status.Err.Error(), "Transaction 4ae1d209a1aae2a4aa703e2addaf9135f4a1b1cd0d87020037ea5619d495f717 is currently orphaned")
}

func TestInvalidTxZMQI(t *testing.T) {
	// make and configure a mocked ZMQI
	mockedZMQI := &mocks.ZMQIMock{
		SubscribeFunc: func(s string, stringsCh chan []string) error {
			if s != "hashtx2" {
				return nil
			}
			event := make([]string, 0)
			event = append(event, "hashtx2")
			event = append(event, "7b2266726f6d426c6f636b223a2066616c73652c22736f75726365223a2022703270222c2261646472657373223a20223132372e302e302e313a3135323234222c226e6f64654964223a2037303139352c2274786964223a202234616531643230396131616165326134616137303365326164646166393133356634613162316364306438373032303033376561353631396434393566373137222c2273697a65223a203139322c22686578223ac226973496e76616c6964223a20747275652c22697356616c69646174696f6e4572726f72223a2066616c73652c2269734d697373696e67496e70757473223a20747275652c226973446f75626c655370656e644465746563746564223a2066616c73652c2269734d656d706f6f6c436f6e666c6963744465746563746564223a2066616c73652c2269734e6f6e46696e616c223a2066616c73652c22697356616c69646174696f6e54696d656f75744578636565646564223a2066616c73652c2269735374616e646172645478223a20747275652c2272656a656374696f6e436f6465223a20302c2272656a656374696f6e526561736f6e223a2022222c22636f6c6c6964656457697468223a205b5d2c2272656a656374696f6e54696d65223a2022323032332d31312d31335431333a33393a32365a227d")
			event = append(event, "2459")
			stringsCh <- event
			return nil
		},
	}

	statuses := make(chan *PeerTxMessage, 1)
	url, _ := url.Parse("https://some-url.com")
	zmq := NewZMQ(url, statuses)
	zmq.Start(mockedZMQI)
	status := <-statuses

	assert.Equal(t, status.Status, metamorph_api.Status_ACCEPTED_BY_NETWORK)
}
