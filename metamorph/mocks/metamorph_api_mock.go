// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	context "context"
	"github.com/bitcoin-sv/arc/metamorph/metamorph_api"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// Ensure, that MetaMorphAPIClientMock does implement metamorph_api.MetaMorphAPIClient.
// If this is not the case, regenerate this file with moq.
var _ metamorph_api.MetaMorphAPIClient = &MetaMorphAPIClientMock{}

// MetaMorphAPIClientMock is a mock implementation of metamorph_api.MetaMorphAPIClient.
//
//	func TestSomethingThatUsesMetaMorphAPIClient(t *testing.T) {
//
//		// make and configure a mocked metamorph_api.MetaMorphAPIClient
//		mockedMetaMorphAPIClient := &MetaMorphAPIClientMock{
//			ClearDataFunc: func(ctx context.Context, in *metamorph_api.ClearDataRequest, opts ...grpc.CallOption) (*metamorph_api.ClearDataResponse, error) {
//				panic("mock out the ClearData method")
//			},
//			GetTransactionFunc: func(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.Transaction, error) {
//				panic("mock out the GetTransaction method")
//			},
//			GetTransactionStatusFunc: func(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error) {
//				panic("mock out the GetTransactionStatus method")
//			},
//			HealthFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*metamorph_api.HealthResponse, error) {
//				panic("mock out the Health method")
//			},
//			PutTransactionFunc: func(ctx context.Context, in *metamorph_api.TransactionRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error) {
//				panic("mock out the PutTransaction method")
//			},
//			PutTransactionsFunc: func(ctx context.Context, in *metamorph_api.TransactionRequests, opts ...grpc.CallOption) (*metamorph_api.TransactionStatuses, error) {
//				panic("mock out the PutTransactions method")
//			},
//			SetUnlockedByNameFunc: func(ctx context.Context, in *metamorph_api.SetUnlockedByNameRequest, opts ...grpc.CallOption) (*metamorph_api.SetUnlockedByNameResponse, error) {
//				panic("mock out the SetUnlockedByName method")
//			},
//		}
//
//		// use mockedMetaMorphAPIClient in code that requires metamorph_api.MetaMorphAPIClient
//		// and then make assertions.
//
//	}
type MetaMorphAPIClientMock struct {
	// ClearDataFunc mocks the ClearData method.
	ClearDataFunc func(ctx context.Context, in *metamorph_api.ClearDataRequest, opts ...grpc.CallOption) (*metamorph_api.ClearDataResponse, error)

	// GetTransactionFunc mocks the GetTransaction method.
	GetTransactionFunc func(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.Transaction, error)

	// GetTransactionStatusFunc mocks the GetTransactionStatus method.
	GetTransactionStatusFunc func(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*metamorph_api.HealthResponse, error)

	// PutTransactionFunc mocks the PutTransaction method.
	PutTransactionFunc func(ctx context.Context, in *metamorph_api.TransactionRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error)

	// PutTransactionsFunc mocks the PutTransactions method.
	PutTransactionsFunc func(ctx context.Context, in *metamorph_api.TransactionRequests, opts ...grpc.CallOption) (*metamorph_api.TransactionStatuses, error)

	// SetUnlockedByNameFunc mocks the SetUnlockedByName method.
	SetUnlockedByNameFunc func(ctx context.Context, in *metamorph_api.SetUnlockedByNameRequest, opts ...grpc.CallOption) (*metamorph_api.SetUnlockedByNameResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClearData holds details about calls to the ClearData method.
		ClearData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.ClearDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetTransaction holds details about calls to the GetTransaction method.
		GetTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.TransactionStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetTransactionStatus holds details about calls to the GetTransactionStatus method.
		GetTransactionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.TransactionStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// PutTransaction holds details about calls to the PutTransaction method.
		PutTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.TransactionRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// PutTransactions holds details about calls to the PutTransactions method.
		PutTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.TransactionRequests
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SetUnlockedByName holds details about calls to the SetUnlockedByName method.
		SetUnlockedByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *metamorph_api.SetUnlockedByNameRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockClearData            sync.RWMutex
	lockGetTransaction       sync.RWMutex
	lockGetTransactionStatus sync.RWMutex
	lockHealth               sync.RWMutex
	lockPutTransaction       sync.RWMutex
	lockPutTransactions      sync.RWMutex
	lockSetUnlockedByName    sync.RWMutex
}

// ClearData calls ClearDataFunc.
func (mock *MetaMorphAPIClientMock) ClearData(ctx context.Context, in *metamorph_api.ClearDataRequest, opts ...grpc.CallOption) (*metamorph_api.ClearDataResponse, error) {
	if mock.ClearDataFunc == nil {
		panic("MetaMorphAPIClientMock.ClearDataFunc: method is nil but MetaMorphAPIClient.ClearData was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.ClearDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearData.Lock()
	mock.calls.ClearData = append(mock.calls.ClearData, callInfo)
	mock.lockClearData.Unlock()
	return mock.ClearDataFunc(ctx, in, opts...)
}

// ClearDataCalls gets all the calls that were made to ClearData.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.ClearDataCalls())
func (mock *MetaMorphAPIClientMock) ClearDataCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.ClearDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.ClearDataRequest
		Opts []grpc.CallOption
	}
	mock.lockClearData.RLock()
	calls = mock.calls.ClearData
	mock.lockClearData.RUnlock()
	return calls
}

// GetTransaction calls GetTransactionFunc.
func (mock *MetaMorphAPIClientMock) GetTransaction(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.Transaction, error) {
	if mock.GetTransactionFunc == nil {
		panic("MetaMorphAPIClientMock.GetTransactionFunc: method is nil but MetaMorphAPIClient.GetTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetTransaction.Lock()
	mock.calls.GetTransaction = append(mock.calls.GetTransaction, callInfo)
	mock.lockGetTransaction.Unlock()
	return mock.GetTransactionFunc(ctx, in, opts...)
}

// GetTransactionCalls gets all the calls that were made to GetTransaction.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.GetTransactionCalls())
func (mock *MetaMorphAPIClientMock) GetTransactionCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.TransactionStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockGetTransaction.RLock()
	calls = mock.calls.GetTransaction
	mock.lockGetTransaction.RUnlock()
	return calls
}

// GetTransactionStatus calls GetTransactionStatusFunc.
func (mock *MetaMorphAPIClientMock) GetTransactionStatus(ctx context.Context, in *metamorph_api.TransactionStatusRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error) {
	if mock.GetTransactionStatusFunc == nil {
		panic("MetaMorphAPIClientMock.GetTransactionStatusFunc: method is nil but MetaMorphAPIClient.GetTransactionStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetTransactionStatus.Lock()
	mock.calls.GetTransactionStatus = append(mock.calls.GetTransactionStatus, callInfo)
	mock.lockGetTransactionStatus.Unlock()
	return mock.GetTransactionStatusFunc(ctx, in, opts...)
}

// GetTransactionStatusCalls gets all the calls that were made to GetTransactionStatus.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.GetTransactionStatusCalls())
func (mock *MetaMorphAPIClientMock) GetTransactionStatusCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.TransactionStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockGetTransactionStatus.RLock()
	calls = mock.calls.GetTransactionStatus
	mock.lockGetTransactionStatus.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *MetaMorphAPIClientMock) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*metamorph_api.HealthResponse, error) {
	if mock.HealthFunc == nil {
		panic("MetaMorphAPIClientMock.HealthFunc: method is nil but MetaMorphAPIClient.Health was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx, in, opts...)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.HealthCalls())
func (mock *MetaMorphAPIClientMock) HealthCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// PutTransaction calls PutTransactionFunc.
func (mock *MetaMorphAPIClientMock) PutTransaction(ctx context.Context, in *metamorph_api.TransactionRequest, opts ...grpc.CallOption) (*metamorph_api.TransactionStatus, error) {
	if mock.PutTransactionFunc == nil {
		panic("MetaMorphAPIClientMock.PutTransactionFunc: method is nil but MetaMorphAPIClient.PutTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPutTransaction.Lock()
	mock.calls.PutTransaction = append(mock.calls.PutTransaction, callInfo)
	mock.lockPutTransaction.Unlock()
	return mock.PutTransactionFunc(ctx, in, opts...)
}

// PutTransactionCalls gets all the calls that were made to PutTransaction.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.PutTransactionCalls())
func (mock *MetaMorphAPIClientMock) PutTransactionCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.TransactionRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionRequest
		Opts []grpc.CallOption
	}
	mock.lockPutTransaction.RLock()
	calls = mock.calls.PutTransaction
	mock.lockPutTransaction.RUnlock()
	return calls
}

// PutTransactions calls PutTransactionsFunc.
func (mock *MetaMorphAPIClientMock) PutTransactions(ctx context.Context, in *metamorph_api.TransactionRequests, opts ...grpc.CallOption) (*metamorph_api.TransactionStatuses, error) {
	if mock.PutTransactionsFunc == nil {
		panic("MetaMorphAPIClientMock.PutTransactionsFunc: method is nil but MetaMorphAPIClient.PutTransactions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionRequests
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPutTransactions.Lock()
	mock.calls.PutTransactions = append(mock.calls.PutTransactions, callInfo)
	mock.lockPutTransactions.Unlock()
	return mock.PutTransactionsFunc(ctx, in, opts...)
}

// PutTransactionsCalls gets all the calls that were made to PutTransactions.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.PutTransactionsCalls())
func (mock *MetaMorphAPIClientMock) PutTransactionsCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.TransactionRequests
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.TransactionRequests
		Opts []grpc.CallOption
	}
	mock.lockPutTransactions.RLock()
	calls = mock.calls.PutTransactions
	mock.lockPutTransactions.RUnlock()
	return calls
}

// SetUnlockedByName calls SetUnlockedByNameFunc.
func (mock *MetaMorphAPIClientMock) SetUnlockedByName(ctx context.Context, in *metamorph_api.SetUnlockedByNameRequest, opts ...grpc.CallOption) (*metamorph_api.SetUnlockedByNameResponse, error) {
	if mock.SetUnlockedByNameFunc == nil {
		panic("MetaMorphAPIClientMock.SetUnlockedByNameFunc: method is nil but MetaMorphAPIClient.SetUnlockedByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *metamorph_api.SetUnlockedByNameRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSetUnlockedByName.Lock()
	mock.calls.SetUnlockedByName = append(mock.calls.SetUnlockedByName, callInfo)
	mock.lockSetUnlockedByName.Unlock()
	return mock.SetUnlockedByNameFunc(ctx, in, opts...)
}

// SetUnlockedByNameCalls gets all the calls that were made to SetUnlockedByName.
// Check the length with:
//
//	len(mockedMetaMorphAPIClient.SetUnlockedByNameCalls())
func (mock *MetaMorphAPIClientMock) SetUnlockedByNameCalls() []struct {
	Ctx  context.Context
	In   *metamorph_api.SetUnlockedByNameRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *metamorph_api.SetUnlockedByNameRequest
		Opts []grpc.CallOption
	}
	mock.lockSetUnlockedByName.RLock()
	calls = mock.calls.SetUnlockedByName
	mock.lockSetUnlockedByName.RUnlock()
	return calls
}
