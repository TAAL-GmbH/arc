// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/bitcoin-sv/arc/k8s_coordinator"
	"sync"
)

// Ensure, that K8sClientMock does implement k8s_coordinator.K8sClient.
// If this is not the case, regenerate this file with moq.
var _ k8s_coordinator.K8sClient = &K8sClientMock{}

// K8sClientMock is a mock implementation of k8s_coordinator.K8sClient.
//
//	func TestSomethingThatUsesK8sClient(t *testing.T) {
//
//		// make and configure a mocked k8s_coordinator.K8sClient
//		mockedK8sClient := &K8sClientMock{
//			GetPodNamesFunc: func(ctx context.Context, namespace string) (map[string]struct{}, error) {
//				panic("mock out the GetPodNames method")
//			},
//		}
//
//		// use mockedK8sClient in code that requires k8s_coordinator.K8sClient
//		// and then make assertions.
//
//	}
type K8sClientMock struct {
	// GetPodNamesFunc mocks the GetPodNames method.
	GetPodNamesFunc func(ctx context.Context, namespace string) (map[string]struct{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPodNames holds details about calls to the GetPodNames method.
		GetPodNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockGetPodNames sync.RWMutex
}

// GetPodNames calls GetPodNamesFunc.
func (mock *K8sClientMock) GetPodNames(ctx context.Context, namespace string) (map[string]struct{}, error) {
	if mock.GetPodNamesFunc == nil {
		panic("K8sClientMock.GetPodNamesFunc: method is nil but K8sClient.GetPodNames was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
	}{
		Ctx:       ctx,
		Namespace: namespace,
	}
	mock.lockGetPodNames.Lock()
	mock.calls.GetPodNames = append(mock.calls.GetPodNames, callInfo)
	mock.lockGetPodNames.Unlock()
	return mock.GetPodNamesFunc(ctx, namespace)
}

// GetPodNamesCalls gets all the calls that were made to GetPodNames.
// Check the length with:
//
//	len(mockedK8sClient.GetPodNamesCalls())
func (mock *K8sClientMock) GetPodNamesCalls() []struct {
	Ctx       context.Context
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
	}
	mock.lockGetPodNames.RLock()
	calls = mock.calls.GetPodNames
	mock.lockGetPodNames.RUnlock()
	return calls
}
