// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/metamorph/metamorph_api"
	"github.com/bitcoin-sv/arc/pkg/metamorph"
	"sync"
)

// Ensure, that MessageQueueClientMock does implement metamorph.MessageQueueClient.
// If this is not the case, regenerate this file with moq.
var _ metamorph.MessageQueueClient = &MessageQueueClientMock{}

// MessageQueueClientMock is a mock implementation of metamorph.MessageQueueClient.
//
//	func TestSomethingThatUsesMessageQueueClient(t *testing.T) {
//
//		// make and configure a mocked metamorph.MessageQueueClient
//		mockedMessageQueueClient := &MessageQueueClientMock{
//			PublishSubmitTxFunc: func(tx *metamorph_api.TransactionRequest) error {
//				panic("mock out the PublishSubmitTx method")
//			},
//			PublishSubmitTxsFunc: func(txs *metamorph_api.TransactionRequests) error {
//				panic("mock out the PublishSubmitTxs method")
//			},
//			ShutdownFunc: func() error {
//				panic("mock out the Shutdown method")
//			},
//		}
//
//		// use mockedMessageQueueClient in code that requires metamorph.MessageQueueClient
//		// and then make assertions.
//
//	}
type MessageQueueClientMock struct {
	// PublishSubmitTxFunc mocks the PublishSubmitTx method.
	PublishSubmitTxFunc func(tx *metamorph_api.TransactionRequest) error

	// PublishSubmitTxsFunc mocks the PublishSubmitTxs method.
	PublishSubmitTxsFunc func(txs *metamorph_api.TransactionRequests) error

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// PublishSubmitTx holds details about calls to the PublishSubmitTx method.
		PublishSubmitTx []struct {
			// Tx is the tx argument value.
			Tx *metamorph_api.TransactionRequest
		}
		// PublishSubmitTxs holds details about calls to the PublishSubmitTxs method.
		PublishSubmitTxs []struct {
			// Txs is the txs argument value.
			Txs *metamorph_api.TransactionRequests
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
	}
	lockPublishSubmitTx  sync.RWMutex
	lockPublishSubmitTxs sync.RWMutex
	lockShutdown         sync.RWMutex
}

// PublishSubmitTx calls PublishSubmitTxFunc.
func (mock *MessageQueueClientMock) PublishSubmitTx(tx *metamorph_api.TransactionRequest) error {
	if mock.PublishSubmitTxFunc == nil {
		panic("MessageQueueClientMock.PublishSubmitTxFunc: method is nil but MessageQueueClient.PublishSubmitTx was just called")
	}
	callInfo := struct {
		Tx *metamorph_api.TransactionRequest
	}{
		Tx: tx,
	}
	mock.lockPublishSubmitTx.Lock()
	mock.calls.PublishSubmitTx = append(mock.calls.PublishSubmitTx, callInfo)
	mock.lockPublishSubmitTx.Unlock()
	return mock.PublishSubmitTxFunc(tx)
}

// PublishSubmitTxCalls gets all the calls that were made to PublishSubmitTx.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishSubmitTxCalls())
func (mock *MessageQueueClientMock) PublishSubmitTxCalls() []struct {
	Tx *metamorph_api.TransactionRequest
} {
	var calls []struct {
		Tx *metamorph_api.TransactionRequest
	}
	mock.lockPublishSubmitTx.RLock()
	calls = mock.calls.PublishSubmitTx
	mock.lockPublishSubmitTx.RUnlock()
	return calls
}

// PublishSubmitTxs calls PublishSubmitTxsFunc.
func (mock *MessageQueueClientMock) PublishSubmitTxs(txs *metamorph_api.TransactionRequests) error {
	if mock.PublishSubmitTxsFunc == nil {
		panic("MessageQueueClientMock.PublishSubmitTxsFunc: method is nil but MessageQueueClient.PublishSubmitTxs was just called")
	}
	callInfo := struct {
		Txs *metamorph_api.TransactionRequests
	}{
		Txs: txs,
	}
	mock.lockPublishSubmitTxs.Lock()
	mock.calls.PublishSubmitTxs = append(mock.calls.PublishSubmitTxs, callInfo)
	mock.lockPublishSubmitTxs.Unlock()
	return mock.PublishSubmitTxsFunc(txs)
}

// PublishSubmitTxsCalls gets all the calls that were made to PublishSubmitTxs.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishSubmitTxsCalls())
func (mock *MessageQueueClientMock) PublishSubmitTxsCalls() []struct {
	Txs *metamorph_api.TransactionRequests
} {
	var calls []struct {
		Txs *metamorph_api.TransactionRequests
	}
	mock.lockPublishSubmitTxs.RLock()
	calls = mock.calls.PublishSubmitTxs
	mock.lockPublishSubmitTxs.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *MessageQueueClientMock) Shutdown() error {
	if mock.ShutdownFunc == nil {
		panic("MessageQueueClientMock.ShutdownFunc: method is nil but MessageQueueClient.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedMessageQueueClient.ShutdownCalls())
func (mock *MessageQueueClientMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
