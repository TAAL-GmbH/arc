// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/pkg/metamorph"
	"google.golang.org/protobuf/reflect/protoreflect"
	"sync"
)

// Ensure, that MessageQueueClientMock does implement metamorph.MessageQueueClient.
// If this is not the case, regenerate this file with moq.
var _ metamorph.MessageQueueClient = &MessageQueueClientMock{}

// MessageQueueClientMock is a mock implementation of metamorph.MessageQueueClient.
//
//	func TestSomethingThatUsesMessageQueueClient(t *testing.T) {
//
//		// make and configure a mocked metamorph.MessageQueueClient
//		mockedMessageQueueClient := &MessageQueueClientMock{
//			PublishMarshalFunc: func(topic string, m protoreflect.ProtoMessage) error {
//				panic("mock out the PublishMarshal method")
//			},
//		}
//
//		// use mockedMessageQueueClient in code that requires metamorph.MessageQueueClient
//		// and then make assertions.
//
//	}
type MessageQueueClientMock struct {
	// PublishMarshalFunc mocks the PublishMarshal method.
	PublishMarshalFunc func(topic string, m protoreflect.ProtoMessage) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishMarshal holds details about calls to the PublishMarshal method.
		PublishMarshal []struct {
			// Topic is the topic argument value.
			Topic string
			// M is the m argument value.
			M protoreflect.ProtoMessage
		}
	}
	lockPublishMarshal sync.RWMutex
}

// PublishMarshal calls PublishMarshalFunc.
func (mock *MessageQueueClientMock) PublishMarshal(topic string, m protoreflect.ProtoMessage) error {
	if mock.PublishMarshalFunc == nil {
		panic("MessageQueueClientMock.PublishMarshalFunc: method is nil but MessageQueueClient.PublishMarshal was just called")
	}
	callInfo := struct {
		Topic string
		M     protoreflect.ProtoMessage
	}{
		Topic: topic,
		M:     m,
	}
	mock.lockPublishMarshal.Lock()
	mock.calls.PublishMarshal = append(mock.calls.PublishMarshal, callInfo)
	mock.lockPublishMarshal.Unlock()
	return mock.PublishMarshalFunc(topic, m)
}

// PublishMarshalCalls gets all the calls that were made to PublishMarshal.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishMarshalCalls())
func (mock *MessageQueueClientMock) PublishMarshalCalls() []struct {
	Topic string
	M     protoreflect.ProtoMessage
} {
	var calls []struct {
		Topic string
		M     protoreflect.ProtoMessage
	}
	mock.lockPublishMarshal.RLock()
	calls = mock.calls.PublishMarshal
	mock.lockPublishMarshal.RUnlock()
	return calls
}
