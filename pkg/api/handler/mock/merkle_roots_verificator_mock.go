// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/bitcoin-sv/arc/pkg/blocktx"
	"sync"
)

// Ensure, that MerkleRootsVerificatorMock does implement blocktx.MerkleRootsVerificator.
// If this is not the case, regenerate this file with moq.
var _ blocktx.MerkleRootsVerificator = &MerkleRootsVerificatorMock{}

// MerkleRootsVerificatorMock is a mock implementation of blocktx.MerkleRootsVerificator.
//
//	func TestSomethingThatUsesMerkleRootsVerificator(t *testing.T) {
//
//		// make and configure a mocked blocktx.MerkleRootsVerificator
//		mockedMerkleRootsVerificator := &MerkleRootsVerificatorMock{
//			VerifyMerkleRootsFunc: func(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error) {
//				panic("mock out the VerifyMerkleRoots method")
//			},
//		}
//
//		// use mockedMerkleRootsVerificator in code that requires blocktx.MerkleRootsVerificator
//		// and then make assertions.
//
//	}
type MerkleRootsVerificatorMock struct {
	// VerifyMerkleRootsFunc mocks the VerifyMerkleRoots method.
	VerifyMerkleRootsFunc func(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// VerifyMerkleRoots holds details about calls to the VerifyMerkleRoots method.
		VerifyMerkleRoots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MerkleRootVerificationRequest is the merkleRootVerificationRequest argument value.
			MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
		}
	}
	lockVerifyMerkleRoots sync.RWMutex
}

// VerifyMerkleRoots calls VerifyMerkleRootsFunc.
func (mock *MerkleRootsVerificatorMock) VerifyMerkleRoots(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error) {
	if mock.VerifyMerkleRootsFunc == nil {
		panic("MerkleRootsVerificatorMock.VerifyMerkleRootsFunc: method is nil but MerkleRootsVerificator.VerifyMerkleRoots was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
	}{
		Ctx:                           ctx,
		MerkleRootVerificationRequest: merkleRootVerificationRequest,
	}
	mock.lockVerifyMerkleRoots.Lock()
	mock.calls.VerifyMerkleRoots = append(mock.calls.VerifyMerkleRoots, callInfo)
	mock.lockVerifyMerkleRoots.Unlock()
	return mock.VerifyMerkleRootsFunc(ctx, merkleRootVerificationRequest)
}

// VerifyMerkleRootsCalls gets all the calls that were made to VerifyMerkleRoots.
// Check the length with:
//
//	len(mockedMerkleRootsVerificator.VerifyMerkleRootsCalls())
func (mock *MerkleRootsVerificatorMock) VerifyMerkleRootsCalls() []struct {
	Ctx                           context.Context
	MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
} {
	var calls []struct {
		Ctx                           context.Context
		MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
	}
	mock.lockVerifyMerkleRoots.RLock()
	calls = mock.calls.VerifyMerkleRoots
	mock.lockVerifyMerkleRoots.RUnlock()
	return calls
}
