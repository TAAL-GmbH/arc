// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_KeyScopes       = "Api_Key.Scopes"
	AuthorizationScopes = "Authorization.Scopes"
	BearerAuthScopes    = "BearerAuth.Scopes"
)

// Defines values for TransactionDetailsTxStatus.
const (
	ACCEPTEDBYNETWORK    TransactionDetailsTxStatus = "ACCEPTED_BY_NETWORK"
	ANNOUNCEDTONETWORK   TransactionDetailsTxStatus = "ANNOUNCED_TO_NETWORK"
	DOUBLESPENDATTEMPTED TransactionDetailsTxStatus = "DOUBLE_SPEND_ATTEMPTED"
	MINED                TransactionDetailsTxStatus = "MINED"
	RECEIVED             TransactionDetailsTxStatus = "RECEIVED"
	REJECTED             TransactionDetailsTxStatus = "REJECTED"
	REQUESTEDBYNETWORK   TransactionDetailsTxStatus = "REQUESTED_BY_NETWORK"
	SEENINORPHANMEMPOOL  TransactionDetailsTxStatus = "SEEN_IN_ORPHAN_MEMPOOL"
	SEENONNETWORK        TransactionDetailsTxStatus = "SEEN_ON_NETWORK"
	SENTTONETWORK        TransactionDetailsTxStatus = "SENT_TO_NETWORK"
	STORED               TransactionDetailsTxStatus = "STORED"
	UNKNOWN              TransactionDetailsTxStatus = "UNKNOWN"
)

// ChainInfo Chain info
type ChainInfo struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight *uint64 `json:"blockHeight,omitempty"`
}

// CommonResponse Common response object
type CommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// Error An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
type Error struct {
	union json.RawMessage
}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorCalculatingMerkleRoots defines model for ErrorCalculatingMerkleRoots.
type ErrorCalculatingMerkleRoots struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorCumulativeFees defines model for ErrorCumulativeFees.
type ErrorCumulativeFees struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFee defines model for ErrorFee.
type ErrorFee struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFields defines model for ErrorFields.
type ErrorFields struct {
	// Detail Longer description of error
	Detail string `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string `json:"extraInfo"`

	// Instance (Optional) Link to actual error on server
	Instance *string `json:"instance"`

	// Status Error code
	Status int `json:"status"`

	// Title Descriptive text for error
	Title string `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string `json:"txid"`

	// Type Type of error, with link to more information
	Type string `json:"type"`
}

// ErrorFrozenConsensus defines model for ErrorFrozenConsensus.
type ErrorFrozenConsensus struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorFrozenPolicy defines model for ErrorFrozenPolicy.
type ErrorFrozenPolicy struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorGeneric defines model for ErrorGeneric.
type ErrorGeneric struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorInputs defines model for ErrorInputs.
type ErrorInputs struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMalformed defines model for ErrorMalformed.
type ErrorMalformed struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorMinedAncestorsNotFound defines model for ErrorMinedAncestorsNotFound.
type ErrorMinedAncestorsNotFound struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorOutputs defines model for ErrorOutputs.
type ErrorOutputs struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorTxFormat defines model for ErrorTxFormat.
type ErrorTxFormat struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorUnlockingScripts defines model for ErrorUnlockingScripts.
type ErrorUnlockingScripts struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// ErrorValidatingMerkleRoots defines model for ErrorValidatingMerkleRoots.
type ErrorValidatingMerkleRoots struct {
	Detail interface{} `json:"detail"`

	// ExtraInfo Optional extra information about the error from the miner
	ExtraInfo *string      `json:"extraInfo"`
	Instance  *interface{} `json:"instance,omitempty"`
	Status    interface{}  `json:"status"`
	Title     interface{}  `json:"title"`

	// Txid Transaction ID this error is referring to
	Txid *string     `json:"txid"`
	Type interface{} `json:"type"`
}

// FeeAmount defines model for FeeAmount.
type FeeAmount struct {
	// Bytes Number of bytes
	Bytes uint64 `json:"bytes"`

	// Satoshis Amount in Satoshis
	Satoshis uint64 `json:"satoshis"`
}

// Health healthy or not
type Health struct {
	// Healthy whether healthy or not
	Healthy *bool `json:"healthy,omitempty"`

	// Reason explains the problem with metamorph
	Reason *string `json:"reason"`

	// Version version of the ARC package
	Version *string `json:"version,omitempty"`
}

// Policy defines model for Policy.
type Policy struct {
	// Maxscriptsizepolicy Maximum script size [bytes]
	Maxscriptsizepolicy uint64 `json:"maxscriptsizepolicy"`

	// Maxtxsigopscountspolicy Maximum number of signature operations
	Maxtxsigopscountspolicy uint64 `json:"maxtxsigopscountspolicy"`

	// Maxtxsizepolicy Maximum transaction size [bytes]
	Maxtxsizepolicy uint64    `json:"maxtxsizepolicy"`
	MiningFee       FeeAmount `json:"miningFee"`
}

// PolicyResponse defines model for PolicyResponse.
type PolicyResponse struct {
	Policy    Policy    `json:"policy"`
	Timestamp time.Time `json:"timestamp"`
}

// TransactionDetails defines model for TransactionDetails.
type TransactionDetails struct {
	CompetingTxs *[]string `json:"competingTxs"`

	// ExtraInfo Extra information about the transaction
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string `json:"merklePath"`

	// Status Status
	Status int `json:"status"`

	// Title Title
	Title string `json:"title"`

	// TxStatus Transaction status
	TxStatus *TransactionDetailsTxStatus `json:"txStatus,omitempty"`

	// Txid Transaction ID in hex
	Txid *string `json:"txid,omitempty"`
}

// TransactionDetailsTxStatus Transaction status
type TransactionDetailsTxStatus string

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	// RawTx Raw hex string
	RawTx string `json:"rawTx"`
}

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight  *uint64   `json:"blockHeight,omitempty"`
	CompetingTxs *[]string `json:"competingTxs"`

	// ExtraInfo Extra info
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in  BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string `json:"merklePath"`

	// Status Status
	Status    int       `json:"status"`
	Timestamp time.Time `json:"timestamp"`

	// Title Title
	Title string `json:"title"`

	// TxStatus Transaction status
	TxStatus string `json:"txStatus"`

	// Txid Transaction ID in hex
	Txid string `json:"txid"`
}

// TransactionResponses defines model for TransactionResponses.
type TransactionResponses struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight  *uint64                                   `json:"blockHeight,omitempty"`
	Timestamp    time.Time                                 `json:"timestamp"`
	Transactions *[]TransactionResponses_Transactions_Item `json:"transactions,omitempty"`
}

// TransactionResponses_Transactions_Item defines model for TransactionResponses.transactions.Item.
type TransactionResponses_Transactions_Item struct {
	union json.RawMessage
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	// BlockHash Block hash
	BlockHash *string `json:"blockHash,omitempty"`

	// BlockHeight Block height
	BlockHeight  *uint64   `json:"blockHeight,omitempty"`
	CompetingTxs *[]string `json:"competingTxs"`

	// ExtraInfo Extra information about the transaction
	ExtraInfo *string `json:"extraInfo"`

	// MerklePath Transaction Merkle path as a hex string in BUMP format [BRC-74](https://brc.dev/74)
	MerklePath *string   `json:"merklePath"`
	Timestamp  time.Time `json:"timestamp"`

	// TxStatus Transaction status
	TxStatus *string `json:"txStatus,omitempty"`

	// Txid Transaction ID in hex
	Txid string `json:"txid"`
}

// TransactionSubmitStatus Transaction submit status
type TransactionSubmitStatus struct {
	// Status Status
	Status int `json:"status"`

	// Title Title
	Title string `json:"title"`
}

// CallbackToken defines model for callbackToken.
type CallbackToken = string

// CallbackUrl defines model for callbackUrl.
type CallbackUrl = string

// CumulativeFeeValidation defines model for cumulativeFeeValidation.
type CumulativeFeeValidation = bool

// FullStatusUpdates defines model for fullStatusUpdates.
type FullStatusUpdates = bool

// MaxTimeout defines model for maxTimeout.
type MaxTimeout = int

// SkipFeeValidation defines model for skipFeeValidation.
type SkipFeeValidation = bool

// SkipScriptValidation defines model for skipScriptValidation.
type SkipScriptValidation = bool

// SkipTxValidation defines model for skipTxValidation.
type SkipTxValidation = bool

// WaitFor defines model for waitFor.
type WaitFor = string

// WaitForStatus defines model for waitForStatus.
type WaitForStatus = int

// POSTTransactionTextBody defines parameters for POSTTransaction.
type POSTTransactionTextBody = string

// POSTTransactionParams defines parameters for POSTTransaction.
type POSTTransactionParams struct {
	// XCallbackUrl Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// XFullStatusUpdates Whether we should have full status updates in callback or not (including SEEN_IN_ORPHAN_MEMPOOL and SEEN_ON_NETWORK statuses).
	XFullStatusUpdates *FullStatusUpdates `json:"X-FullStatusUpdates,omitempty"`

	// XMaxTimeout Timeout in seconds to wait for new transaction status before request expires (max 30 seconds, default 5)
	XMaxTimeout *MaxTimeout `json:"X-MaxTimeout,omitempty"`

	// XSkipFeeValidation Whether we should skip fee validation or not.
	XSkipFeeValidation *SkipFeeValidation `json:"X-SkipFeeValidation,omitempty"`

	// XSkipScriptValidation Whether we should skip script validation or not.
	XSkipScriptValidation *SkipScriptValidation `json:"X-SkipScriptValidation,omitempty"`

	// XSkipTxValidation Whether we should skip overall tx validation or not.
	XSkipTxValidation *SkipTxValidation `json:"X-SkipTxValidation,omitempty"`

	// XCumulativeFeeValidation Whether we should perform cumulative fee validation for fee consolidation txs or not.
	XCumulativeFeeValidation *CumulativeFeeValidation `json:"X-CumulativeFeeValidation,omitempty"`

	// XCallbackToken Access token for notification callback endpoint. It will be used as a Authorization header for the http callback
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// XWaitForStatus DEPRECATED, soon will become unsupported, please use 'X-WaitFor' header. Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`

	// XWaitFor Which status to wait for from the server before returning ('QUEUED', 'RECEIVED', 'STORED', 'ANNOUNCED_TO_NETWORK', 'REQUESTED_BY_NETWORK', 'SENT_TO_NETWORK', 'ACCEPTED_BY_NETWORK', 'SEEN_ON_NETWORK')
	XWaitFor *WaitFor `json:"X-WaitFor,omitempty"`
}

// POSTTransactionsJSONBody defines parameters for POSTTransactions.
type POSTTransactionsJSONBody = []TransactionRequest

// POSTTransactionsTextBody defines parameters for POSTTransactions.
type POSTTransactionsTextBody = string

// POSTTransactionsParams defines parameters for POSTTransactions.
type POSTTransactionsParams struct {
	// XCallbackUrl Default double spend and merkle proof notification callback endpoint.
	XCallbackUrl *CallbackUrl `json:"X-CallbackUrl,omitempty"`

	// XFullStatusUpdates Whether we should have full status updates in callback or not (including SEEN_IN_ORPHAN_MEMPOOL and SEEN_ON_NETWORK statuses).
	XFullStatusUpdates *FullStatusUpdates `json:"X-FullStatusUpdates,omitempty"`

	// XMaxTimeout Timeout in seconds to wait for new transaction status before request expires (max 30 seconds, default 5)
	XMaxTimeout *MaxTimeout `json:"X-MaxTimeout,omitempty"`

	// XSkipFeeValidation Whether we should skip fee validation or not.
	XSkipFeeValidation *SkipFeeValidation `json:"X-SkipFeeValidation,omitempty"`

	// XSkipScriptValidation Whether we should skip script validation or not.
	XSkipScriptValidation *SkipScriptValidation `json:"X-SkipScriptValidation,omitempty"`

	// XSkipTxValidation Whether we should skip overall tx validation or not.
	XSkipTxValidation *SkipTxValidation `json:"X-SkipTxValidation,omitempty"`

	// XCumulativeFeeValidation Whether we should perform cumulative fee validation for fee consolidation txs or not.
	XCumulativeFeeValidation *CumulativeFeeValidation `json:"X-CumulativeFeeValidation,omitempty"`

	// XCallbackToken Access token for notification callback endpoint. It will be used as a Authorization header for the http callback
	XCallbackToken *CallbackToken `json:"X-CallbackToken,omitempty"`

	// XWaitForStatus DEPRECATED, soon will become unsupported, please use 'X-WaitFor' header. Which status to wait for from the server before returning (2 = RECEIVED, 3 = STORED, 4 = ANNOUNCED_TO_NETWORK, 5 = REQUESTED_BY_NETWORK, 6 = SENT_TO_NETWORK, 7 = ACCEPTED_BY_NETWORK, 8 = SEEN_ON_NETWORK)
	XWaitForStatus *WaitForStatus `json:"X-WaitForStatus,omitempty"`

	// XWaitFor Which status to wait for from the server before returning ('QUEUED', 'RECEIVED', 'STORED', 'ANNOUNCED_TO_NETWORK', 'REQUESTED_BY_NETWORK', 'SENT_TO_NETWORK', 'ACCEPTED_BY_NETWORK', 'SEEN_ON_NETWORK')
	XWaitFor *WaitFor `json:"X-WaitFor,omitempty"`
}

// POSTTransactionJSONRequestBody defines body for POSTTransaction for application/json ContentType.
type POSTTransactionJSONRequestBody = TransactionRequest

// POSTTransactionTextRequestBody defines body for POSTTransaction for text/plain ContentType.
type POSTTransactionTextRequestBody = POSTTransactionTextBody

// POSTTransactionsJSONRequestBody defines body for POSTTransactions for application/json ContentType.
type POSTTransactionsJSONRequestBody = POSTTransactionsJSONBody

// POSTTransactionsTextRequestBody defines body for POSTTransactions for text/plain ContentType.
type POSTTransactionsTextRequestBody = POSTTransactionsTextBody

// AsErrorUnlockingScripts returns the union data inside the Error as a ErrorUnlockingScripts
func (t Error) AsErrorUnlockingScripts() (ErrorUnlockingScripts, error) {
	var body ErrorUnlockingScripts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorUnlockingScripts overwrites any union data inside the Error as the provided ErrorUnlockingScripts
func (t *Error) FromErrorUnlockingScripts(v ErrorUnlockingScripts) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorUnlockingScripts performs a merge with any union data inside the Error, using the provided ErrorUnlockingScripts
func (t *Error) MergeErrorUnlockingScripts(v ErrorUnlockingScripts) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorInputs returns the union data inside the Error as a ErrorInputs
func (t Error) AsErrorInputs() (ErrorInputs, error) {
	var body ErrorInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorInputs overwrites any union data inside the Error as the provided ErrorInputs
func (t *Error) FromErrorInputs(v ErrorInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorInputs performs a merge with any union data inside the Error, using the provided ErrorInputs
func (t *Error) MergeErrorInputs(v ErrorInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorMalformed returns the union data inside the Error as a ErrorMalformed
func (t Error) AsErrorMalformed() (ErrorMalformed, error) {
	var body ErrorMalformed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorMalformed overwrites any union data inside the Error as the provided ErrorMalformed
func (t *Error) FromErrorMalformed(v ErrorMalformed) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorMalformed performs a merge with any union data inside the Error, using the provided ErrorMalformed
func (t *Error) MergeErrorMalformed(v ErrorMalformed) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorMinedAncestorsNotFound returns the union data inside the Error as a ErrorMinedAncestorsNotFound
func (t Error) AsErrorMinedAncestorsNotFound() (ErrorMinedAncestorsNotFound, error) {
	var body ErrorMinedAncestorsNotFound
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorMinedAncestorsNotFound overwrites any union data inside the Error as the provided ErrorMinedAncestorsNotFound
func (t *Error) FromErrorMinedAncestorsNotFound(v ErrorMinedAncestorsNotFound) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorMinedAncestorsNotFound performs a merge with any union data inside the Error, using the provided ErrorMinedAncestorsNotFound
func (t *Error) MergeErrorMinedAncestorsNotFound(v ErrorMinedAncestorsNotFound) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorCalculatingMerkleRoots returns the union data inside the Error as a ErrorCalculatingMerkleRoots
func (t Error) AsErrorCalculatingMerkleRoots() (ErrorCalculatingMerkleRoots, error) {
	var body ErrorCalculatingMerkleRoots
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorCalculatingMerkleRoots overwrites any union data inside the Error as the provided ErrorCalculatingMerkleRoots
func (t *Error) FromErrorCalculatingMerkleRoots(v ErrorCalculatingMerkleRoots) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorCalculatingMerkleRoots performs a merge with any union data inside the Error, using the provided ErrorCalculatingMerkleRoots
func (t *Error) MergeErrorCalculatingMerkleRoots(v ErrorCalculatingMerkleRoots) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorValidatingMerkleRoots returns the union data inside the Error as a ErrorValidatingMerkleRoots
func (t Error) AsErrorValidatingMerkleRoots() (ErrorValidatingMerkleRoots, error) {
	var body ErrorValidatingMerkleRoots
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorValidatingMerkleRoots overwrites any union data inside the Error as the provided ErrorValidatingMerkleRoots
func (t *Error) FromErrorValidatingMerkleRoots(v ErrorValidatingMerkleRoots) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorValidatingMerkleRoots performs a merge with any union data inside the Error, using the provided ErrorValidatingMerkleRoots
func (t *Error) MergeErrorValidatingMerkleRoots(v ErrorValidatingMerkleRoots) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorFrozenPolicy returns the union data inside the Error as a ErrorFrozenPolicy
func (t Error) AsErrorFrozenPolicy() (ErrorFrozenPolicy, error) {
	var body ErrorFrozenPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorFrozenPolicy overwrites any union data inside the Error as the provided ErrorFrozenPolicy
func (t *Error) FromErrorFrozenPolicy(v ErrorFrozenPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorFrozenPolicy performs a merge with any union data inside the Error, using the provided ErrorFrozenPolicy
func (t *Error) MergeErrorFrozenPolicy(v ErrorFrozenPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorFrozenConsensus returns the union data inside the Error as a ErrorFrozenConsensus
func (t Error) AsErrorFrozenConsensus() (ErrorFrozenConsensus, error) {
	var body ErrorFrozenConsensus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorFrozenConsensus overwrites any union data inside the Error as the provided ErrorFrozenConsensus
func (t *Error) FromErrorFrozenConsensus(v ErrorFrozenConsensus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorFrozenConsensus performs a merge with any union data inside the Error, using the provided ErrorFrozenConsensus
func (t *Error) MergeErrorFrozenConsensus(v ErrorFrozenConsensus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTransactionDetails returns the union data inside the TransactionResponses_Transactions_Item as a TransactionDetails
func (t TransactionResponses_Transactions_Item) AsTransactionDetails() (TransactionDetails, error) {
	var body TransactionDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransactionDetails overwrites any union data inside the TransactionResponses_Transactions_Item as the provided TransactionDetails
func (t *TransactionResponses_Transactions_Item) FromTransactionDetails(v TransactionDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransactionDetails performs a merge with any union data inside the TransactionResponses_Transactions_Item, using the provided TransactionDetails
func (t *TransactionResponses_Transactions_Item) MergeTransactionDetails(v TransactionDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsError returns the union data inside the TransactionResponses_Transactions_Item as a Error
func (t TransactionResponses_Transactions_Item) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the TransactionResponses_Transactions_Item as the provided Error
func (t *TransactionResponses_Transactions_Item) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the TransactionResponses_Transactions_Item, using the provided Error
func (t *TransactionResponses_Transactions_Item) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransactionResponses_Transactions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransactionResponses_Transactions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETHealth request
	GETHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETPolicy request
	GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactionWithBody request with any body
	POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactionWithTextBody(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETTransactionStatus request
	GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTTransactionsWithBody request with any body
	POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTTransactionsWithTextBody(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithBody(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransaction(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionWithTextBody(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETTransactionStatus(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETTransactionStatusRequest(c.Server, txid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithBody(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactions(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTTransactionsWithTextBody(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTTransactionsRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETHealthRequest generates requests for GETHealth
func NewGETHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETPolicyRequest generates requests for GETPolicy
func NewGETPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionRequest calls the generic POSTTransaction builder with application/json body
func NewPOSTTransactionRequest(server string, params *POSTTransactionParams, body POSTTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionRequestWithTextBody calls the generic POSTTransaction builder with text/plain body
func NewPOSTTransactionRequestWithTextBody(server string, params *POSTTransactionParams, body POSTTransactionTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPOSTTransactionRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPOSTTransactionRequestWithBody generates requests for POSTTransaction with any type of body
func NewPOSTTransactionRequestWithBody(server string, params *POSTTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XCallbackUrl != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackUrl", headerParam0)
		}

		if params.XFullStatusUpdates != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, *params.XFullStatusUpdates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-FullStatusUpdates", headerParam1)
		}

		if params.XMaxTimeout != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, *params.XMaxTimeout)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-MaxTimeout", headerParam2)
		}

		if params.XSkipFeeValidation != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, *params.XSkipFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipFeeValidation", headerParam3)
		}

		if params.XSkipScriptValidation != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, *params.XSkipScriptValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipScriptValidation", headerParam4)
		}

		if params.XSkipTxValidation != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, *params.XSkipTxValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipTxValidation", headerParam5)
		}

		if params.XCumulativeFeeValidation != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "X-CumulativeFeeValidation", runtime.ParamLocationHeader, *params.XCumulativeFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CumulativeFeeValidation", headerParam6)
		}

		if params.XCallbackToken != nil {
			var headerParam7 string

			headerParam7, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackToken", headerParam7)
		}

		if params.XWaitForStatus != nil {
			var headerParam8 string

			headerParam8, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitForStatus", headerParam8)
		}

		if params.XWaitFor != nil {
			var headerParam9 string

			headerParam9, err = runtime.StyleParamWithLocation("simple", false, "X-WaitFor", runtime.ParamLocationHeader, *params.XWaitFor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitFor", headerParam9)
		}

	}

	return req, nil
}

// NewGETTransactionStatusRequest generates requests for GETTransactionStatus
func NewGETTransactionStatusRequest(server string, txid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "txid", runtime.ParamLocationPath, txid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTTransactionsRequest calls the generic POSTTransactions builder with application/json body
func NewPOSTTransactionsRequest(server string, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTTransactionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPOSTTransactionsRequestWithTextBody calls the generic POSTTransactions builder with text/plain body
func NewPOSTTransactionsRequestWithTextBody(server string, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPOSTTransactionsRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPOSTTransactionsRequestWithBody generates requests for POSTTransactions with any type of body
func NewPOSTTransactionsRequestWithBody(server string, params *POSTTransactionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/txs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XCallbackUrl != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackUrl", runtime.ParamLocationHeader, *params.XCallbackUrl)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackUrl", headerParam0)
		}

		if params.XFullStatusUpdates != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-FullStatusUpdates", runtime.ParamLocationHeader, *params.XFullStatusUpdates)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-FullStatusUpdates", headerParam1)
		}

		if params.XMaxTimeout != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-MaxTimeout", runtime.ParamLocationHeader, *params.XMaxTimeout)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-MaxTimeout", headerParam2)
		}

		if params.XSkipFeeValidation != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-SkipFeeValidation", runtime.ParamLocationHeader, *params.XSkipFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipFeeValidation", headerParam3)
		}

		if params.XSkipScriptValidation != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "X-SkipScriptValidation", runtime.ParamLocationHeader, *params.XSkipScriptValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipScriptValidation", headerParam4)
		}

		if params.XSkipTxValidation != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "X-SkipTxValidation", runtime.ParamLocationHeader, *params.XSkipTxValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-SkipTxValidation", headerParam5)
		}

		if params.XCumulativeFeeValidation != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "X-CumulativeFeeValidation", runtime.ParamLocationHeader, *params.XCumulativeFeeValidation)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CumulativeFeeValidation", headerParam6)
		}

		if params.XCallbackToken != nil {
			var headerParam7 string

			headerParam7, err = runtime.StyleParamWithLocation("simple", false, "X-CallbackToken", runtime.ParamLocationHeader, *params.XCallbackToken)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-CallbackToken", headerParam7)
		}

		if params.XWaitForStatus != nil {
			var headerParam8 string

			headerParam8, err = runtime.StyleParamWithLocation("simple", false, "X-WaitForStatus", runtime.ParamLocationHeader, *params.XWaitForStatus)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitForStatus", headerParam8)
		}

		if params.XWaitFor != nil {
			var headerParam9 string

			headerParam9, err = runtime.StyleParamWithLocation("simple", false, "X-WaitFor", runtime.ParamLocationHeader, *params.XWaitFor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-WaitFor", headerParam9)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETHealthWithResponse request
	GETHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHealthResponse, error)

	// GETPolicyWithResponse request
	GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error)

	// POSTTransactionWithBodyWithResponse request with any body
	POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	POSTTransactionWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error)

	// GETTransactionStatusWithResponse request
	GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error)

	// POSTTransactionsWithBodyWithResponse request with any body
	POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)

	POSTTransactionsWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error)
}

type GETHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Health
}

// Status returns HTTPResponse.Status
func (r GETHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponse
}

// Status returns HTTPResponse.Status
func (r GETPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorBadRequest
	JSON409      *ErrorGeneric
	JSON422      *Error
	JSON460      *ErrorTxFormat
	JSON461      *ErrorUnlockingScripts
	JSON462      *ErrorInputs
	JSON463      *ErrorMalformed
	JSON464      *ErrorOutputs
	JSON465      *ErrorFee
	JSON467      *ErrorMinedAncestorsNotFound
	JSON468      *ErrorCalculatingMerkleRoots
	JSON469      *ErrorValidatingMerkleRoots
	JSON473      *ErrorCumulativeFees
}

// Status returns HTTPResponse.Status
func (r POSTTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETTransactionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatus
	JSON404      *ErrorNotFound
	JSON409      *ErrorGeneric
}

// Status returns HTTPResponse.Status
func (r GETTransactionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETTransactionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponses
	JSON400      *ErrorBadRequest
	JSON409      *ErrorGeneric
	JSON460      *ErrorTxFormat
	JSON461      *ErrorUnlockingScripts
	JSON462      *ErrorInputs
	JSON463      *ErrorMalformed
	JSON464      *ErrorOutputs
	JSON465      *ErrorFee
	JSON467      *ErrorMinedAncestorsNotFound
	JSON468      *ErrorCalculatingMerkleRoots
	JSON469      *ErrorValidatingMerkleRoots
	JSON473      *ErrorCumulativeFees
}

// Status returns HTTPResponse.Status
func (r POSTTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETHealthWithResponse request returning *GETHealthResponse
func (c *ClientWithResponses) GETHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHealthResponse, error) {
	rsp, err := c.GETHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHealthResponse(rsp)
}

// GETPolicyWithResponse request returning *GETPolicyResponse
func (c *ClientWithResponses) GETPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETPolicyResponse, error) {
	rsp, err := c.GETPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETPolicyResponse(rsp)
}

// POSTTransactionWithBodyWithResponse request with arbitrary body returning *POSTTransactionResponse
func (c *ClientWithResponses) POSTTransactionWithBodyWithResponse(ctx context.Context, params *POSTTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionParams, body POSTTransactionTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionResponse, error) {
	rsp, err := c.POSTTransactionWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionResponse(rsp)
}

// GETTransactionStatusWithResponse request returning *GETTransactionStatusResponse
func (c *ClientWithResponses) GETTransactionStatusWithResponse(ctx context.Context, txid string, reqEditors ...RequestEditorFn) (*GETTransactionStatusResponse, error) {
	rsp, err := c.GETTransactionStatus(ctx, txid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETTransactionStatusResponse(rsp)
}

// POSTTransactionsWithBodyWithResponse request with arbitrary body returning *POSTTransactionsResponse
func (c *ClientWithResponses) POSTTransactionsWithBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

func (c *ClientWithResponses) POSTTransactionsWithTextBodyWithResponse(ctx context.Context, params *POSTTransactionsParams, body POSTTransactionsTextRequestBody, reqEditors ...RequestEditorFn) (*POSTTransactionsResponse, error) {
	rsp, err := c.POSTTransactionsWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTTransactionsResponse(rsp)
}

// ParseGETHealthResponse parses an HTTP response from a GETHealthWithResponse call
func ParseGETHealthResponse(rsp *http.Response) (*GETHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Health
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGETPolicyResponse parses an HTTP response from a GETPolicyWithResponse call
func ParseGETPolicyResponse(rsp *http.Response) (*GETPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionResponse parses an HTTP response from a POSTTransactionWithResponse call
func ParsePOSTTransactionResponse(rsp *http.Response) (*POSTTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 460:
		var dest ErrorTxFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON460 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 461:
		var dest ErrorUnlockingScripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON461 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 462:
		var dest ErrorInputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON462 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 463:
		var dest ErrorMalformed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON463 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 464:
		var dest ErrorOutputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON464 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 465:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON465 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 467:
		var dest ErrorMinedAncestorsNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON467 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 468:
		var dest ErrorCalculatingMerkleRoots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON468 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 469:
		var dest ErrorValidatingMerkleRoots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON469 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 473:
		var dest ErrorCumulativeFees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON473 = &dest

	}

	return response, nil
}

// ParseGETTransactionStatusResponse parses an HTTP response from a GETTransactionStatusWithResponse call
func ParseGETTransactionStatusResponse(rsp *http.Response) (*GETTransactionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETTransactionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePOSTTransactionsResponse parses an HTTP response from a POSTTransactionsWithResponse call
func ParsePOSTTransactionsResponse(rsp *http.Response) (*POSTTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 460:
		var dest ErrorTxFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON460 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 461:
		var dest ErrorUnlockingScripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON461 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 462:
		var dest ErrorInputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON462 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 463:
		var dest ErrorMalformed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON463 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 464:
		var dest ErrorOutputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON464 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 465:
		var dest ErrorFee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON465 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 467:
		var dest ErrorMinedAncestorsNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON467 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 468:
		var dest ErrorCalculatingMerkleRoots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON468 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 469:
		var dest ErrorValidatingMerkleRoots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON469 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 473:
		var dest ErrorCumulativeFees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON473 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get metamorph health
	// (GET /v1/health)
	GETHealth(ctx echo.Context) error
	// Get the policy settings
	// (GET /v1/policy)
	GETPolicy(ctx echo.Context) error
	// Submit a transaction.
	// (POST /v1/tx)
	POSTTransaction(ctx echo.Context, params POSTTransactionParams) error
	// Get transaction status.
	// (GET /v1/tx/{txid})
	GETTransactionStatus(ctx echo.Context, txid string) error
	// Submit multiple transactions.
	// (POST /v1/txs)
	POSTTransactions(ctx echo.Context, params POSTTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GETHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GETHealth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GETHealth(ctx)
	return err
}

// GETPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GETPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GETPolicy(ctx)
	return err
}

// POSTTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CallbackUrl", valueList[0], &XCallbackUrl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-FullStatusUpdates" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-FullStatusUpdates")]; found {
		var XFullStatusUpdates FullStatusUpdates
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-FullStatusUpdates, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-FullStatusUpdates", valueList[0], &XFullStatusUpdates, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-FullStatusUpdates: %s", err))
		}

		params.XFullStatusUpdates = &XFullStatusUpdates
	}
	// ------------- Optional header parameter "X-MaxTimeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MaxTimeout")]; found {
		var XMaxTimeout MaxTimeout
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MaxTimeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-MaxTimeout", valueList[0], &XMaxTimeout, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MaxTimeout: %s", err))
		}

		params.XMaxTimeout = &XMaxTimeout
	}
	// ------------- Optional header parameter "X-SkipFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipFeeValidation")]; found {
		var XSkipFeeValidation SkipFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipFeeValidation", valueList[0], &XSkipFeeValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipFeeValidation: %s", err))
		}

		params.XSkipFeeValidation = &XSkipFeeValidation
	}
	// ------------- Optional header parameter "X-SkipScriptValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipScriptValidation")]; found {
		var XSkipScriptValidation SkipScriptValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipScriptValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipScriptValidation", valueList[0], &XSkipScriptValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipScriptValidation: %s", err))
		}

		params.XSkipScriptValidation = &XSkipScriptValidation
	}
	// ------------- Optional header parameter "X-SkipTxValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipTxValidation")]; found {
		var XSkipTxValidation SkipTxValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipTxValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipTxValidation", valueList[0], &XSkipTxValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipTxValidation: %s", err))
		}

		params.XSkipTxValidation = &XSkipTxValidation
	}
	// ------------- Optional header parameter "X-CumulativeFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CumulativeFeeValidation")]; found {
		var XCumulativeFeeValidation CumulativeFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CumulativeFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CumulativeFeeValidation", valueList[0], &XCumulativeFeeValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CumulativeFeeValidation: %s", err))
		}

		params.XCumulativeFeeValidation = &XCumulativeFeeValidation
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CallbackToken", valueList[0], &XCallbackToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-WaitForStatus", valueList[0], &XWaitForStatus, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}
	// ------------- Optional header parameter "X-WaitFor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitFor")]; found {
		var XWaitFor WaitFor
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitFor, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-WaitFor", valueList[0], &XWaitFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitFor: %s", err))
		}

		params.XWaitFor = &XWaitFor
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.POSTTransaction(ctx, params)
	return err
}

// GETTransactionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GETTransactionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GETTransactionStatus(ctx, txid)
	return err
}

// POSTTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) POSTTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(Api_KeyScopes, []string{})

	ctx.Set(AuthorizationScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params POSTTransactionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-CallbackUrl" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackUrl")]; found {
		var XCallbackUrl CallbackUrl
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackUrl, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CallbackUrl", valueList[0], &XCallbackUrl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackUrl: %s", err))
		}

		params.XCallbackUrl = &XCallbackUrl
	}
	// ------------- Optional header parameter "X-FullStatusUpdates" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-FullStatusUpdates")]; found {
		var XFullStatusUpdates FullStatusUpdates
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-FullStatusUpdates, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-FullStatusUpdates", valueList[0], &XFullStatusUpdates, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-FullStatusUpdates: %s", err))
		}

		params.XFullStatusUpdates = &XFullStatusUpdates
	}
	// ------------- Optional header parameter "X-MaxTimeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-MaxTimeout")]; found {
		var XMaxTimeout MaxTimeout
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-MaxTimeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-MaxTimeout", valueList[0], &XMaxTimeout, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-MaxTimeout: %s", err))
		}

		params.XMaxTimeout = &XMaxTimeout
	}
	// ------------- Optional header parameter "X-SkipFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipFeeValidation")]; found {
		var XSkipFeeValidation SkipFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipFeeValidation", valueList[0], &XSkipFeeValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipFeeValidation: %s", err))
		}

		params.XSkipFeeValidation = &XSkipFeeValidation
	}
	// ------------- Optional header parameter "X-SkipScriptValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipScriptValidation")]; found {
		var XSkipScriptValidation SkipScriptValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipScriptValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipScriptValidation", valueList[0], &XSkipScriptValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipScriptValidation: %s", err))
		}

		params.XSkipScriptValidation = &XSkipScriptValidation
	}
	// ------------- Optional header parameter "X-SkipTxValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SkipTxValidation")]; found {
		var XSkipTxValidation SkipTxValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SkipTxValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SkipTxValidation", valueList[0], &XSkipTxValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SkipTxValidation: %s", err))
		}

		params.XSkipTxValidation = &XSkipTxValidation
	}
	// ------------- Optional header parameter "X-CumulativeFeeValidation" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CumulativeFeeValidation")]; found {
		var XCumulativeFeeValidation CumulativeFeeValidation
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CumulativeFeeValidation, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CumulativeFeeValidation", valueList[0], &XCumulativeFeeValidation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CumulativeFeeValidation: %s", err))
		}

		params.XCumulativeFeeValidation = &XCumulativeFeeValidation
	}
	// ------------- Optional header parameter "X-CallbackToken" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CallbackToken")]; found {
		var XCallbackToken CallbackToken
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-CallbackToken, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CallbackToken", valueList[0], &XCallbackToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-CallbackToken: %s", err))
		}

		params.XCallbackToken = &XCallbackToken
	}
	// ------------- Optional header parameter "X-WaitForStatus" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitForStatus")]; found {
		var XWaitForStatus WaitForStatus
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitForStatus, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-WaitForStatus", valueList[0], &XWaitForStatus, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitForStatus: %s", err))
		}

		params.XWaitForStatus = &XWaitForStatus
	}
	// ------------- Optional header parameter "X-WaitFor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-WaitFor")]; found {
		var XWaitFor WaitFor
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-WaitFor, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-WaitFor", valueList[0], &XWaitFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-WaitFor: %s", err))
		}

		params.XWaitFor = &XWaitFor
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.POSTTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/health", wrapper.GETHealth)
	router.GET(baseURL+"/v1/policy", wrapper.GETPolicy)
	router.POST(baseURL+"/v1/tx", wrapper.POSTTransaction)
	router.GET(baseURL+"/v1/tx/:txid", wrapper.GETTransactionStatus)
	router.POST(baseURL+"/v1/txs", wrapper.POSTTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/rtpL/KoTuAuccwEkk6h2gWCQ5zm22zeMmTru7p8EBSY1i3aOHV6RynBb57gtS",
	"si1Zkh+Jk3b3pn+0scQhhzPDmeGPQ/UPjWXJJEshFVw7/EObkJwkICBXvxiJY0rYt1H2DVL5IADO8mgi",
	"oizVDrUjxoBzJORbFGY5SjMRhREj8j2aESNIg0kWpWIfnQn0PYpjRAEVHAJEOCLoqBDjLI9+L6nGQALI",
	"VW9iDGgsxGTekzbQIjlu2UYbaClJQDvU/nPvpMHoQONsDAmRHIvHiWzCRR6l99rT02A+qds8bk/pM4Sk",
	"iAUKsoLGgPgE0gCRNEAJ5N9iQJM8y8J181zPpxx7DZdFUsRERA9wCvALiaOAlCwuc/zrGMQYcvQdEB9n",
	"RRygCeRhlido0QUKAdDDvBMlXfmIZSnP5k/FlKNSiatm0MNXx2xolsVAUjWdsIjjG0FEwW8nARHAN5nI",
	"mEjWizhGXJGioqRFUU3qJcfoY5SyuAii9B7dDIcXX88uvl5eX/14dPH1fHh+dXn5s9KienV58fViOPr1",
	"8vqnql/gn1bM+LTF+pq5JmQ6ihLICtGeZPVCzoADy9JALh/0nUSiXEDwHYmcpJwwpZJq3hTCLAeUw/8U",
	"wAWC6STKgaOPCZkiU5/1NEBBZb32p/7pnC+465hHlAq4h1zNg3+LJlsbnyRaNre1RnXTGmmNiOUoN4qP",
	"Z3BXNtmawdZ4G/A4mj6Dv+wBchLHSEy35rEx3hr+pNGdZnkXWxEbz0yvbp1hniXKK3PIHyBfmKUo8lSu",
	"vI8f/nE7vB1+/jBAH66HJ8OzX8q/b0aX1+VfRxcXl7cXJ8PPX0eXs1VYtv7H7fBmNPz89fi/6s9vhhej",
	"paZHJyfDq66WjaX9YcUS+LWa+WoPXMmnXPodkWJ4dT08ORoNPw8Qz7J0FtlYlgAqUl5MJlkuIBigSQyE",
	"q4iHPswH/1BFun30AnFj9AOayXmATPQDKiU9QBb6AXXJeoBsRdOW9gA5kr4p7wFyZUdtiQ+Qp1o3ZL5e",
	"5JUwVzqep4GWA59kKS+jxEUmZikCBG093AAr8kg8Ku8Y5ZDIVAaFJIohKNehGkp1dTImUXqWhlm7G/UK",
	"RfLdQJvk2QRyEZUM0Dhj334kfNymOpav0Fi+G2gwJckklpPRl//xbMu1fGoyA9uBjZnjW6bjurZlMY84",
	"xPNsbLm+aVPiBYYbaINlexxUXEB0Pxa9fJRva5y4HjYNb6DJfIAI7VArolQ41qL/ur+vHmX0n8CEHPIk",
	"S5Isva6U0SEz9R7NtIUqymX5iSgBLkgykT/mnMhQuidftSerLEApM9AOv9To7zqYHOZ5lxM7StGPo9EV",
	"usozGkOCPoMgUcwrHgcy9QwgjFIIZCw+G45O0fXpCXI93UUfZdbJDw8ORJbFfD8CEe5n+f3BWCTxQR4y",
	"2UhlDFkKl6F2+OUP7d9yCLVD7W8Hi3T6oDK8A8XhbSpVFKX3ZRjh2tNgA6qzdFJs2vacxFK40uo3ai7n",
	"fpQy4CLL+UUmTrMi3ZD2hMRMZYHp/bnKi6+zbFM2ZwHqGaSnefY7pFdZHLHHbShOpHWmvODa093MYo5J",
	"cF2mU9J2SBxvqsjTCOKgZLhp5oGyMPnXwhGMxousjQMkysFTQMlMVyorZSSVKSxV2wu5pVI61KKUC5Iy",
	"aHY5s02Ss31BSLzPsuQAJGf8wMCmZduOJObzsDUntXRdrvJIxEtdHpNgxqU29wNdY9JIsCxK9/jD/n0k",
	"xgXdjzLJyMHfKg7+PQp++Grpepc/6V28Pdb0impRFPPkKr1Hx8Ph6SFiKgeTqmAVS4BKjpBiqYzI99ED",
	"pOj49vyKv0BLZp+SHK9bSWep4ncx8IvV5Hjbqam+8+OvvWqWNq+RXDkZirPvL5A57pO5a3bL/KTJRI2D",
	"FwvfNbcS/inAa0s8BOCI5PCagnbsbkGf7li6jr2ddEtZHfaLqplc/Jyl95Cj2kOUhUgx0MgDK7HKDEPm",
	"8fWd/cKgq5BQ4hdlOkKQyvb2u/JAmIqcdOewl+oPEiPVRiWzMtmSwxGaFUIxobhc7C2SKC0z9SKOCZVc",
	"i7yAjnHrptAc9uNs3E/o5yj9JudDmCgkH2qsLK12MJsMw3u2W6XLZlkAdQlbOq4lt1EqOjLbmsEtY33V",
	"rwdAAqblpmumxBZjYhp17D5GNZWefUZiHPFq1hFHOYSQS3oksk3mPjP7pSEeJzA3rwH6Hokxiis5J3JD",
	"WNPz+lxavp1JZC7twczS+1fIUiL1ir5I5byoHBB9pDFh3+KIC5SQlMhVx2ZMoPk7CD69SljAfaF4weFu",
	"ggHezl3V8+A/URMTxcHrq8F4KzUYW6nh75BCHrFXjcs197LITl9/o+B3S7yaceUkd7JV8LcSebUffiOJ",
	"RxxFVdZNgZGCgwqZkWJCpUpplu7BVJp+KlCWq/Mi8SqJE169K4hmQMEOcqftnNECdng7rbzm9rlfBT2b",
	"hLkA6vndbjSx3R6hB9F5+310omA1MuNE+axQ8qIS4boq51a7812026OsPtZ2ozB3K4W9hYpqCBQEKAee",
	"FTmDZjCZC2D3gcTqVsPFTsWuW1uJ/bIQf4EokpVcdIaRqv2reDFrdSCp2NrNcthOL6PpabWTez3FnEec",
	"S0elPE91EswPUW+epbzVzL1ncmMNqdykV3vO11gzjt6/ZjrGf7mWtkNrWwcZ/9/DvvHmYX+7bUj3gcqf",
	"iZ5Xr5rg+atE+Z59SgO0r9c9VafCu1DSxhuXU4CjJCvS0q8FQVSCZVc1OYck5tA6dn7sLJO6KBIKOcpC",
	"VDbY5HB3oHEiMj6OOvoreZOZ2c2szYbnxXVciS9oS7a6JPEjkFh0nKKP1fPHqsSldX5cvW7Tfa/qZ1r0",
	"c61Wgl2ufpG8E95VkgPTSUyilKsQPanOjhXkloAgSZZPmif9aYYCiliWpsAqAG4tzPcAOe+sB6peSN3K",
	"4Y+uT9CEsG/kvoF5ag/Gvr6vd0J9LZHXQKJVljfv/A8tIdMqLEa/w6Qit1UVgyptE1Me3WcTzqTZ8FkD",
	"C/uW77jYt+eNFtRGVQUx0JIojdL76jCjMnBDvVkYqCEn0rSATp6WpXdOplFSJLPyLtkUfVFj3G24SHpn",
	"1zdUOl+LPLpPiShyQJJv5W34dqOun1ijMPAZs6vLflVEWDis5VXepYd+sbWnVmfirtda6wUnm8WwpUIV",
	"Gca2cLQLua8aY1Z2sCSSirg9m7unQT1/qepPNp9TjfamoEkkqtopObnacq0VJ2naUpWQ3jgtkq/LKuYr",
	"Ir2wqlJanAEcYrkMa7U6Gtaxuaebe7o/MvChbh5a3r7pYd/QbcP67/kpwqF2+ZP8MZ1VymlLZWHa7PBE",
	"Y3rghAxcwwILY9sxrFDXdeYQmwQBIcQwLYMwSn3muYZhG4YVsNCzQtOlvmUTlTI3dScFBzIJGU2bucGX",
	"lw92N9AiAQnvKA/s9fIkz8njmmO64YrTuXouOejPhOdZ1ibxpq70VedXVdY0IWJcVuaPYYrKbmR6cHx7",
	"flXtO9CX4+uTPde6m1dK0ZztB/Bw4FqfNjrpmvaVVY5a1c9SDmmRSJXeXvx0cfnrhTbQZlWP2kArSx61",
	"gdZV76iatosdJVmz0lHSt8scVbtlY+6uL9cG2ufL2+Ofh19vroYXn78ejUbDc9mdNtDOzy7Uf6+H/zE8",
	"kY/u6rrtHvd5B5BRKrXWMB2HBpSFhOo2dgJTBy9wPOz6oesHYegYIbV07BAGHnWpiV3PJ6FuOKbpgG2F",
	"ONwo0bgbrGArqFzf0kmknE5XEKiR1iq0ai4vJ99HU+1Q+63QdZPVo+LCYNU7aPuLinZZitfke4147Slq",
	"2cta5ncQxlY2n1ezrmvZEYe2jJHLfvaVHeMburU/06+9cI2vOeqfqvAwZ6ku+rXpynW9AvsNrHcLU6wt",
	"+KYpblaN27MW1kIkpYia1vy0TowLa/hryfCNl/O6POdfIYVZgFNVMrCzAO/62MWmGRh6QFhgO7rDAGwa",
	"6hR7juOFzPANcE1dxz5hYDE3ZJYOAdg+wR62YVNPUs1lre9obFdWS0e1XAipaaR9pWA3LZli3Xh+Gdio",
	"qoWqJWRBUML9CSSTLIvXCmjh0FVfbQk9DTRe3VO5kWu3nOAxkBzyo6LLqst3iBRiDKmY3TVt3lq4Pj1B",
	"jmvrs/s0CuNSdAuOpXWXl2qiapHGEYMqLamu51xOIEXHN7+gn+UrJoVR5HEbEyWcZyxSnOynIA6yCaR7",
	"lD/sVV0e1KSsyf6Ork+0Gt6llcDV00CTlGQSaYeaWWFZcskqoRw8GAfjOVB4D6Lrrg6wbxxF4QKUk5ui",
	"GQxI0gDlRZqWmdwcjzmTO9C/D0cVCrl0ywjreukYUwEVVDuZxJXcD/5ZgYWLa0ur3HI1gpL6kukW6sq0",
	"FIGlG339zBk7aN59UmZUJAnJH1UxjqjNfzyblSD3XNrkUc60O0khBbqAODoFOlJli9X15eqCWQWBliVe",
	"HISMFny/S6BXM3Dn1QS6hAu9gWA75t4nWzEtQSS+VrARL6+9iwxxda8c5aR531dkiJQluaoYVdUE87JS",
	"QrGUwlSUtcFIjIlYVPAilgMR0KGgq8ub0agRbet3/HvykUWTg/p1+b58pNa8fdF7A6LajekNWrfvJW9I",
	"1LrBuyFd41btBjR9d/c3IW18yGADguYt1c0J1J69Kgw5zoLHna3Vju27XCn1DjMmQOxxkQNJmh3PYziN",
	"UrkYO6EHmIoDdUrTpF3E7w2AgXbHT6sgjAY2sIj8MjV8epbfq5gtMcvZDcaFC1quxhhoDyQuoH4iu6sa",
	"kyZGTPKquhNZjnmIln7WRVr2jXQ0O7mpMaHVj3plJr1AmS3HXOQI7WlWQDHRA8cnOAhJ4Bq66+oQYA8z",
	"BqbhMNv1cegYukEcT7ccgh2TGC4xCOjYcR3dqKe0W5fc/aaVH3GoUr+GWhoiT2vp4Vw7L4Dj/69B8eWR",
	"Uln32S2i8nWPdBr3owlhnh9SCAzHhMDRdcegxDQp0wn1A/DADQOPmhYJfIthy7BYsCxd13Qw9laLOATb",
	"wrbh6bqOdUv+2wt8N/SBQhAEfugT4oEOvm1Sk7hOaBoO9j1CdRt8z7QI8QzDNRzwA9N3bccCWzd0bIeO",
	"pQgNDNghNrM93WR+6FuBwTDzgDgeMAgNy7B1wwCDyXbUZ77jUIcEOtaxEdohMX1HdxkxqeUFtsl8HdPA",
	"ptSiNHSIS5jvs9APA2LZjGGDugY4gEPX83xHN3VsEUypYTjgOSa2mU8928ChoVOMGcYeoSZ2cQhmaLom",
	"NWhgEZ841DQtqjsepY6OpSocw/VNil3P1E25xgzT1xkQsIlrmAHoQGjgs4A4pqvjEDyL+djzXZ2w0GWW",
	"Dbqh68R2XDAD3XHA9BzTk935rm37po6BUObZQB2fYh0zDJ4TWKbpUULlHtULLed1TqXm++5yAVDHo7pj",
	"UdN0qE8sQgNquGZogolD7FLTIxhjRrGh49A2qMd8bDsmeIZDDUwtUoaMZ8TEDZPY3WXPy/edO0ZeugH8",
	"nBRaUvm75Xl2waKD4dZNBAvj3Q7eNeptWpWaERoDkvty8Yj2yvqQ5icEyhqpxbmANOqdsjcvluxgs6dS",
	"0HKM3fLQ/qZBm5feMjnL2bHCZt9KaPPQviRhOeZuB699fGErGVi7ZWNW2rxCCLUCX8uxdzv8KXT6taXb",
	"vZbj7lj4PZ+y6NDEqpsJx8Phacmft1v++j6X0a8kdcm/ydOOfWvPZzj6WVqu5bTcHS+hpe8LdLBSu45/",
	"uvRBu9rnfuapaIlDI1Jfdfv9KM7BHzIzeNoQJKthOfcVXsSKPJebq+pTTlmICJrk8BBlBY8fK7BbNL1A",
	"J6DWPkBqgTbLrDUvl599Rh9NrApE1ceJPjU3sOobTROi4MIKAq4g/ubWdtX3se5eEe5rz3/3iJ+k2rHz",
	"XeV4Ghde/sREqQ10tg6rViwR/lykMyliEU1iWAY8+Rsgnvwd8nyHPF8Mec5PyLfFPjtqBv5aWOhv6fPw",
	"0pcDnyQIVsFHXQjbl38piO3uabAVOvzlHR5+bXi4VMp2wOeXV0Y+HcNz3pHPd+TzzZDPuxdBn3zdaRuf",
	"RfZ3GHRrGPQdZ3zHGd9xxnec8R1n3BnOODepLnRxjmzUUY0OCKVWAaoSwnrt55c7uYk9mkR7P8Hj/Gf9",
	"f4uiHt7JLvKHGYjRLNEUZBItbs+TnMko/b8BAAD//9wfm4DeZQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
