// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package callbacker

import (
	"sync"
)

// Ensure, that CallbackerIMock does implement CallbackerI.
// If this is not the case, regenerate this file with moq.
var _ CallbackerI = &CallbackerIMock{}

// CallbackerIMock is a mock implementation of CallbackerI.
//
//	func TestSomethingThatUsesCallbackerI(t *testing.T) {
//
//		// make and configure a mocked CallbackerI
//		mockedCallbackerI := &CallbackerIMock{
//			SendFunc: func(url string, token string, callback *Callback) bool {
//				panic("mock out the Send method")
//			},
//			SendBatchFunc: func(url string, token string, callbacks []*Callback) bool {
//				panic("mock out the SendBatch method")
//			},
//		}
//
//		// use mockedCallbackerI in code that requires CallbackerI
//		// and then make assertions.
//
//	}
type CallbackerIMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(url string, token string, callback *Callback) bool

	// SendBatchFunc mocks the SendBatch method.
	SendBatchFunc func(url string, token string, callbacks []*Callback) bool

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// URL is the url argument value.
			URL string
			// Token is the token argument value.
			Token string
			// Callback is the callback argument value.
			Callback *Callback
		}
		// SendBatch holds details about calls to the SendBatch method.
		SendBatch []struct {
			// URL is the url argument value.
			URL string
			// Token is the token argument value.
			Token string
			// Callbacks is the callbacks argument value.
			Callbacks []*Callback
		}
	}
	lockSend      sync.RWMutex
	lockSendBatch sync.RWMutex
}

// Send calls SendFunc.
func (mock *CallbackerIMock) Send(url string, token string, callback *Callback) bool {
	if mock.SendFunc == nil {
		panic("CallbackerIMock.SendFunc: method is nil but CallbackerI.Send was just called")
	}
	callInfo := struct {
		URL      string
		Token    string
		Callback *Callback
	}{
		URL:      url,
		Token:    token,
		Callback: callback,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(url, token, callback)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedCallbackerI.SendCalls())
func (mock *CallbackerIMock) SendCalls() []struct {
	URL      string
	Token    string
	Callback *Callback
} {
	var calls []struct {
		URL      string
		Token    string
		Callback *Callback
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// SendBatch calls SendBatchFunc.
func (mock *CallbackerIMock) SendBatch(url string, token string, callbacks []*Callback) bool {
	if mock.SendBatchFunc == nil {
		panic("CallbackerIMock.SendBatchFunc: method is nil but CallbackerI.SendBatch was just called")
	}
	callInfo := struct {
		URL       string
		Token     string
		Callbacks []*Callback
	}{
		URL:       url,
		Token:     token,
		Callbacks: callbacks,
	}
	mock.lockSendBatch.Lock()
	mock.calls.SendBatch = append(mock.calls.SendBatch, callInfo)
	mock.lockSendBatch.Unlock()
	return mock.SendBatchFunc(url, token, callbacks)
}

// SendBatchCalls gets all the calls that were made to SendBatch.
// Check the length with:
//
//	len(mockedCallbackerI.SendBatchCalls())
func (mock *CallbackerIMock) SendBatchCalls() []struct {
	URL       string
	Token     string
	Callbacks []*Callback
} {
	var calls []struct {
		URL       string
		Token     string
		Callbacks []*Callback
	}
	mock.lockSendBatch.RLock()
	calls = mock.calls.SendBatch
	mock.lockSendBatch.RUnlock()
	return calls
}
