// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package callbacker

import (
	"sync"
)

// Ensure, that CallbackerIMock does implement CallbackerI.
// If this is not the case, regenerate this file with moq.
var _ CallbackerI = &CallbackerIMock{}

// CallbackerIMock is a mock implementation of CallbackerI.
//
//	func TestSomethingThatUsesCallbackerI(t *testing.T) {
//
//		// make and configure a mocked CallbackerI
//		mockedCallbackerI := &CallbackerIMock{
//			HealthFunc: func() error {
//				panic("mock out the Health method")
//			},
//			SendFunc: func(url string, token string, callback *Callback)  {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedCallbackerI in code that requires CallbackerI
//		// and then make assertions.
//
//	}
type CallbackerIMock struct {
	// HealthFunc mocks the Health method.
	HealthFunc func() error

	// SendFunc mocks the Send method.
	SendFunc func(url string, token string, callback *Callback)

	// calls tracks calls to the methods.
	calls struct {
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// URL is the url argument value.
			URL string
			// Token is the token argument value.
			Token string
			// Callback is the callback argument value.
			Callback *Callback
		}
	}
	lockHealth sync.RWMutex
	lockSend   sync.RWMutex
}

// Health calls HealthFunc.
func (mock *CallbackerIMock) Health() error {
	if mock.HealthFunc == nil {
		panic("CallbackerIMock.HealthFunc: method is nil but CallbackerI.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedCallbackerI.HealthCalls())
func (mock *CallbackerIMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *CallbackerIMock) Send(url string, token string, callback *Callback) {
	if mock.SendFunc == nil {
		panic("CallbackerIMock.SendFunc: method is nil but CallbackerI.Send was just called")
	}
	callInfo := struct {
		URL      string
		Token    string
		Callback *Callback
	}{
		URL:      url,
		Token:    token,
		Callback: callback,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	mock.SendFunc(url, token, callback)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedCallbackerI.SendCalls())
func (mock *CallbackerIMock) SendCalls() []struct {
	URL      string
	Token    string
	Callback *Callback
} {
	var calls []struct {
		URL      string
		Token    string
		Callback *Callback
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
