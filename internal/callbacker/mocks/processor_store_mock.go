// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/callbacker/store"
	"sync"
)

// Ensure, that ProcessorStoreMock does implement store.ProcessorStore.
// If this is not the case, regenerate this file with moq.
var _ store.ProcessorStore = &ProcessorStoreMock{}

// ProcessorStoreMock is a mock implementation of store.ProcessorStore.
//
//	func TestSomethingThatUsesProcessorStore(t *testing.T) {
//
//		// make and configure a mocked store.ProcessorStore
//		mockedProcessorStore := &ProcessorStoreMock{
//			DeleteURLMappingFunc: func(ctx context.Context, instance string) error {
//				panic("mock out the DeleteURLMapping method")
//			},
//			GetURLMappingsFunc: func(ctx context.Context) (map[string]string, error) {
//				panic("mock out the GetURLMappings method")
//			},
//			SetURLMappingFunc: func(ctx context.Context, m store.URLMapping) error {
//				panic("mock out the SetURLMapping method")
//			},
//		}
//
//		// use mockedProcessorStore in code that requires store.ProcessorStore
//		// and then make assertions.
//
//	}
type ProcessorStoreMock struct {
	// DeleteURLMappingFunc mocks the DeleteURLMapping method.
	DeleteURLMappingFunc func(ctx context.Context, instance string) error

	// GetURLMappingsFunc mocks the GetURLMappings method.
	GetURLMappingsFunc func(ctx context.Context) (map[string]string, error)

	// SetURLMappingFunc mocks the SetURLMapping method.
	SetURLMappingFunc func(ctx context.Context, m store.URLMapping) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteURLMapping holds details about calls to the DeleteURLMapping method.
		DeleteURLMapping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance string
		}
		// GetURLMappings holds details about calls to the GetURLMappings method.
		GetURLMappings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetURLMapping holds details about calls to the SetURLMapping method.
		SetURLMapping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M store.URLMapping
		}
	}
	lockDeleteURLMapping sync.RWMutex
	lockGetURLMappings   sync.RWMutex
	lockSetURLMapping    sync.RWMutex
}

// DeleteURLMapping calls DeleteURLMappingFunc.
func (mock *ProcessorStoreMock) DeleteURLMapping(ctx context.Context, instance string) error {
	if mock.DeleteURLMappingFunc == nil {
		panic("ProcessorStoreMock.DeleteURLMappingFunc: method is nil but ProcessorStore.DeleteURLMapping was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance string
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	mock.lockDeleteURLMapping.Lock()
	mock.calls.DeleteURLMapping = append(mock.calls.DeleteURLMapping, callInfo)
	mock.lockDeleteURLMapping.Unlock()
	return mock.DeleteURLMappingFunc(ctx, instance)
}

// DeleteURLMappingCalls gets all the calls that were made to DeleteURLMapping.
// Check the length with:
//
//	len(mockedProcessorStore.DeleteURLMappingCalls())
func (mock *ProcessorStoreMock) DeleteURLMappingCalls() []struct {
	Ctx      context.Context
	Instance string
} {
	var calls []struct {
		Ctx      context.Context
		Instance string
	}
	mock.lockDeleteURLMapping.RLock()
	calls = mock.calls.DeleteURLMapping
	mock.lockDeleteURLMapping.RUnlock()
	return calls
}

// GetURLMappings calls GetURLMappingsFunc.
func (mock *ProcessorStoreMock) GetURLMappings(ctx context.Context) (map[string]string, error) {
	if mock.GetURLMappingsFunc == nil {
		panic("ProcessorStoreMock.GetURLMappingsFunc: method is nil but ProcessorStore.GetURLMappings was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetURLMappings.Lock()
	mock.calls.GetURLMappings = append(mock.calls.GetURLMappings, callInfo)
	mock.lockGetURLMappings.Unlock()
	return mock.GetURLMappingsFunc(ctx)
}

// GetURLMappingsCalls gets all the calls that were made to GetURLMappings.
// Check the length with:
//
//	len(mockedProcessorStore.GetURLMappingsCalls())
func (mock *ProcessorStoreMock) GetURLMappingsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetURLMappings.RLock()
	calls = mock.calls.GetURLMappings
	mock.lockGetURLMappings.RUnlock()
	return calls
}

// SetURLMapping calls SetURLMappingFunc.
func (mock *ProcessorStoreMock) SetURLMapping(ctx context.Context, m store.URLMapping) error {
	if mock.SetURLMappingFunc == nil {
		panic("ProcessorStoreMock.SetURLMappingFunc: method is nil but ProcessorStore.SetURLMapping was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   store.URLMapping
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockSetURLMapping.Lock()
	mock.calls.SetURLMapping = append(mock.calls.SetURLMapping, callInfo)
	mock.lockSetURLMapping.Unlock()
	return mock.SetURLMappingFunc(ctx, m)
}

// SetURLMappingCalls gets all the calls that were made to SetURLMapping.
// Check the length with:
//
//	len(mockedProcessorStore.SetURLMappingCalls())
func (mock *ProcessorStoreMock) SetURLMappingCalls() []struct {
	Ctx context.Context
	M   store.URLMapping
} {
	var calls []struct {
		Ctx context.Context
		M   store.URLMapping
	}
	mock.lockSetURLMapping.RLock()
	calls = mock.calls.SetURLMapping
	mock.lockSetURLMapping.RUnlock()
	return calls
}
