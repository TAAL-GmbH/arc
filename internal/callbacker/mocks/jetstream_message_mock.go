// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/callbacker"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	"sync"
	"time"
)

// Ensure, that JetstreamMsgMock does implement callbacker.JetstreamMsg.
// If this is not the case, regenerate this file with moq.
var _ callbacker.JetstreamMsg = &JetstreamMsgMock{}

// JetstreamMsgMock is a mock implementation of callbacker.JetstreamMsg.
//
//	func TestSomethingThatUsesJetstreamMsg(t *testing.T) {
//
//		// make and configure a mocked callbacker.JetstreamMsg
//		mockedJetstreamMsg := &JetstreamMsgMock{
//			AckFunc: func() error {
//				panic("mock out the Ack method")
//			},
//			DataFunc: func() []byte {
//				panic("mock out the Data method")
//			},
//			DoubleAckFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the DoubleAck method")
//			},
//			HeadersFunc: func() nats.Header {
//				panic("mock out the Headers method")
//			},
//			InProgressFunc: func() error {
//				panic("mock out the InProgress method")
//			},
//			MetadataFunc: func() (*jetstream.MsgMetadata, error) {
//				panic("mock out the Metadata method")
//			},
//			NakFunc: func() error {
//				panic("mock out the Nak method")
//			},
//			NakWithDelayFunc: func(delay time.Duration) error {
//				panic("mock out the NakWithDelay method")
//			},
//			ReplyFunc: func() string {
//				panic("mock out the Reply method")
//			},
//			SubjectFunc: func() string {
//				panic("mock out the Subject method")
//			},
//			TermFunc: func() error {
//				panic("mock out the Term method")
//			},
//			TermWithReasonFunc: func(reason string) error {
//				panic("mock out the TermWithReason method")
//			},
//		}
//
//		// use mockedJetstreamMsg in code that requires callbacker.JetstreamMsg
//		// and then make assertions.
//
//	}
type JetstreamMsgMock struct {
	// AckFunc mocks the Ack method.
	AckFunc func() error

	// DataFunc mocks the Data method.
	DataFunc func() []byte

	// DoubleAckFunc mocks the DoubleAck method.
	DoubleAckFunc func(contextMoqParam context.Context) error

	// HeadersFunc mocks the Headers method.
	HeadersFunc func() nats.Header

	// InProgressFunc mocks the InProgress method.
	InProgressFunc func() error

	// MetadataFunc mocks the Metadata method.
	MetadataFunc func() (*jetstream.MsgMetadata, error)

	// NakFunc mocks the Nak method.
	NakFunc func() error

	// NakWithDelayFunc mocks the NakWithDelay method.
	NakWithDelayFunc func(delay time.Duration) error

	// ReplyFunc mocks the Reply method.
	ReplyFunc func() string

	// SubjectFunc mocks the Subject method.
	SubjectFunc func() string

	// TermFunc mocks the Term method.
	TermFunc func() error

	// TermWithReasonFunc mocks the TermWithReason method.
	TermWithReasonFunc func(reason string) error

	// calls tracks calls to the methods.
	calls struct {
		// Ack holds details about calls to the Ack method.
		Ack []struct {
		}
		// Data holds details about calls to the Data method.
		Data []struct {
		}
		// DoubleAck holds details about calls to the DoubleAck method.
		DoubleAck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Headers holds details about calls to the Headers method.
		Headers []struct {
		}
		// InProgress holds details about calls to the InProgress method.
		InProgress []struct {
		}
		// Metadata holds details about calls to the Metadata method.
		Metadata []struct {
		}
		// Nak holds details about calls to the Nak method.
		Nak []struct {
		}
		// NakWithDelay holds details about calls to the NakWithDelay method.
		NakWithDelay []struct {
			// Delay is the delay argument value.
			Delay time.Duration
		}
		// Reply holds details about calls to the Reply method.
		Reply []struct {
		}
		// Subject holds details about calls to the Subject method.
		Subject []struct {
		}
		// Term holds details about calls to the Term method.
		Term []struct {
		}
		// TermWithReason holds details about calls to the TermWithReason method.
		TermWithReason []struct {
			// Reason is the reason argument value.
			Reason string
		}
	}
	lockAck            sync.RWMutex
	lockData           sync.RWMutex
	lockDoubleAck      sync.RWMutex
	lockHeaders        sync.RWMutex
	lockInProgress     sync.RWMutex
	lockMetadata       sync.RWMutex
	lockNak            sync.RWMutex
	lockNakWithDelay   sync.RWMutex
	lockReply          sync.RWMutex
	lockSubject        sync.RWMutex
	lockTerm           sync.RWMutex
	lockTermWithReason sync.RWMutex
}

// Ack calls AckFunc.
func (mock *JetstreamMsgMock) Ack() error {
	if mock.AckFunc == nil {
		panic("JetstreamMsgMock.AckFunc: method is nil but JetstreamMsg.Ack was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAck.Lock()
	mock.calls.Ack = append(mock.calls.Ack, callInfo)
	mock.lockAck.Unlock()
	return mock.AckFunc()
}

// AckCalls gets all the calls that were made to Ack.
// Check the length with:
//
//	len(mockedJetstreamMsg.AckCalls())
func (mock *JetstreamMsgMock) AckCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAck.RLock()
	calls = mock.calls.Ack
	mock.lockAck.RUnlock()
	return calls
}

// Data calls DataFunc.
func (mock *JetstreamMsgMock) Data() []byte {
	if mock.DataFunc == nil {
		panic("JetstreamMsgMock.DataFunc: method is nil but JetstreamMsg.Data was just called")
	}
	callInfo := struct {
	}{}
	mock.lockData.Lock()
	mock.calls.Data = append(mock.calls.Data, callInfo)
	mock.lockData.Unlock()
	return mock.DataFunc()
}

// DataCalls gets all the calls that were made to Data.
// Check the length with:
//
//	len(mockedJetstreamMsg.DataCalls())
func (mock *JetstreamMsgMock) DataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockData.RLock()
	calls = mock.calls.Data
	mock.lockData.RUnlock()
	return calls
}

// DoubleAck calls DoubleAckFunc.
func (mock *JetstreamMsgMock) DoubleAck(contextMoqParam context.Context) error {
	if mock.DoubleAckFunc == nil {
		panic("JetstreamMsgMock.DoubleAckFunc: method is nil but JetstreamMsg.DoubleAck was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockDoubleAck.Lock()
	mock.calls.DoubleAck = append(mock.calls.DoubleAck, callInfo)
	mock.lockDoubleAck.Unlock()
	return mock.DoubleAckFunc(contextMoqParam)
}

// DoubleAckCalls gets all the calls that were made to DoubleAck.
// Check the length with:
//
//	len(mockedJetstreamMsg.DoubleAckCalls())
func (mock *JetstreamMsgMock) DoubleAckCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockDoubleAck.RLock()
	calls = mock.calls.DoubleAck
	mock.lockDoubleAck.RUnlock()
	return calls
}

// Headers calls HeadersFunc.
func (mock *JetstreamMsgMock) Headers() nats.Header {
	if mock.HeadersFunc == nil {
		panic("JetstreamMsgMock.HeadersFunc: method is nil but JetstreamMsg.Headers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeaders.Lock()
	mock.calls.Headers = append(mock.calls.Headers, callInfo)
	mock.lockHeaders.Unlock()
	return mock.HeadersFunc()
}

// HeadersCalls gets all the calls that were made to Headers.
// Check the length with:
//
//	len(mockedJetstreamMsg.HeadersCalls())
func (mock *JetstreamMsgMock) HeadersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeaders.RLock()
	calls = mock.calls.Headers
	mock.lockHeaders.RUnlock()
	return calls
}

// InProgress calls InProgressFunc.
func (mock *JetstreamMsgMock) InProgress() error {
	if mock.InProgressFunc == nil {
		panic("JetstreamMsgMock.InProgressFunc: method is nil but JetstreamMsg.InProgress was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInProgress.Lock()
	mock.calls.InProgress = append(mock.calls.InProgress, callInfo)
	mock.lockInProgress.Unlock()
	return mock.InProgressFunc()
}

// InProgressCalls gets all the calls that were made to InProgress.
// Check the length with:
//
//	len(mockedJetstreamMsg.InProgressCalls())
func (mock *JetstreamMsgMock) InProgressCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInProgress.RLock()
	calls = mock.calls.InProgress
	mock.lockInProgress.RUnlock()
	return calls
}

// Metadata calls MetadataFunc.
func (mock *JetstreamMsgMock) Metadata() (*jetstream.MsgMetadata, error) {
	if mock.MetadataFunc == nil {
		panic("JetstreamMsgMock.MetadataFunc: method is nil but JetstreamMsg.Metadata was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMetadata.Lock()
	mock.calls.Metadata = append(mock.calls.Metadata, callInfo)
	mock.lockMetadata.Unlock()
	return mock.MetadataFunc()
}

// MetadataCalls gets all the calls that were made to Metadata.
// Check the length with:
//
//	len(mockedJetstreamMsg.MetadataCalls())
func (mock *JetstreamMsgMock) MetadataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMetadata.RLock()
	calls = mock.calls.Metadata
	mock.lockMetadata.RUnlock()
	return calls
}

// Nak calls NakFunc.
func (mock *JetstreamMsgMock) Nak() error {
	if mock.NakFunc == nil {
		panic("JetstreamMsgMock.NakFunc: method is nil but JetstreamMsg.Nak was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNak.Lock()
	mock.calls.Nak = append(mock.calls.Nak, callInfo)
	mock.lockNak.Unlock()
	return mock.NakFunc()
}

// NakCalls gets all the calls that were made to Nak.
// Check the length with:
//
//	len(mockedJetstreamMsg.NakCalls())
func (mock *JetstreamMsgMock) NakCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNak.RLock()
	calls = mock.calls.Nak
	mock.lockNak.RUnlock()
	return calls
}

// NakWithDelay calls NakWithDelayFunc.
func (mock *JetstreamMsgMock) NakWithDelay(delay time.Duration) error {
	if mock.NakWithDelayFunc == nil {
		panic("JetstreamMsgMock.NakWithDelayFunc: method is nil but JetstreamMsg.NakWithDelay was just called")
	}
	callInfo := struct {
		Delay time.Duration
	}{
		Delay: delay,
	}
	mock.lockNakWithDelay.Lock()
	mock.calls.NakWithDelay = append(mock.calls.NakWithDelay, callInfo)
	mock.lockNakWithDelay.Unlock()
	return mock.NakWithDelayFunc(delay)
}

// NakWithDelayCalls gets all the calls that were made to NakWithDelay.
// Check the length with:
//
//	len(mockedJetstreamMsg.NakWithDelayCalls())
func (mock *JetstreamMsgMock) NakWithDelayCalls() []struct {
	Delay time.Duration
} {
	var calls []struct {
		Delay time.Duration
	}
	mock.lockNakWithDelay.RLock()
	calls = mock.calls.NakWithDelay
	mock.lockNakWithDelay.RUnlock()
	return calls
}

// Reply calls ReplyFunc.
func (mock *JetstreamMsgMock) Reply() string {
	if mock.ReplyFunc == nil {
		panic("JetstreamMsgMock.ReplyFunc: method is nil but JetstreamMsg.Reply was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReply.Lock()
	mock.calls.Reply = append(mock.calls.Reply, callInfo)
	mock.lockReply.Unlock()
	return mock.ReplyFunc()
}

// ReplyCalls gets all the calls that were made to Reply.
// Check the length with:
//
//	len(mockedJetstreamMsg.ReplyCalls())
func (mock *JetstreamMsgMock) ReplyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReply.RLock()
	calls = mock.calls.Reply
	mock.lockReply.RUnlock()
	return calls
}

// Subject calls SubjectFunc.
func (mock *JetstreamMsgMock) Subject() string {
	if mock.SubjectFunc == nil {
		panic("JetstreamMsgMock.SubjectFunc: method is nil but JetstreamMsg.Subject was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubject.Lock()
	mock.calls.Subject = append(mock.calls.Subject, callInfo)
	mock.lockSubject.Unlock()
	return mock.SubjectFunc()
}

// SubjectCalls gets all the calls that were made to Subject.
// Check the length with:
//
//	len(mockedJetstreamMsg.SubjectCalls())
func (mock *JetstreamMsgMock) SubjectCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubject.RLock()
	calls = mock.calls.Subject
	mock.lockSubject.RUnlock()
	return calls
}

// Term calls TermFunc.
func (mock *JetstreamMsgMock) Term() error {
	if mock.TermFunc == nil {
		panic("JetstreamMsgMock.TermFunc: method is nil but JetstreamMsg.Term was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTerm.Lock()
	mock.calls.Term = append(mock.calls.Term, callInfo)
	mock.lockTerm.Unlock()
	return mock.TermFunc()
}

// TermCalls gets all the calls that were made to Term.
// Check the length with:
//
//	len(mockedJetstreamMsg.TermCalls())
func (mock *JetstreamMsgMock) TermCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTerm.RLock()
	calls = mock.calls.Term
	mock.lockTerm.RUnlock()
	return calls
}

// TermWithReason calls TermWithReasonFunc.
func (mock *JetstreamMsgMock) TermWithReason(reason string) error {
	if mock.TermWithReasonFunc == nil {
		panic("JetstreamMsgMock.TermWithReasonFunc: method is nil but JetstreamMsg.TermWithReason was just called")
	}
	callInfo := struct {
		Reason string
	}{
		Reason: reason,
	}
	mock.lockTermWithReason.Lock()
	mock.calls.TermWithReason = append(mock.calls.TermWithReason, callInfo)
	mock.lockTermWithReason.Unlock()
	return mock.TermWithReasonFunc(reason)
}

// TermWithReasonCalls gets all the calls that were made to TermWithReason.
// Check the length with:
//
//	len(mockedJetstreamMsg.TermWithReasonCalls())
func (mock *JetstreamMsgMock) TermWithReasonCalls() []struct {
	Reason string
} {
	var calls []struct {
		Reason string
	}
	mock.lockTermWithReason.RLock()
	calls = mock.calls.TermWithReason
	mock.lockTermWithReason.RUnlock()
	return calls
}
