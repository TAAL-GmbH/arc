// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/metamorph"
	"github.com/bitcoin-sv/arc/internal/metamorph/store"
	"sync"
)

// Ensure, that CallbackSenderMock does implement metamorph.CallbackSender.
// If this is not the case, regenerate this file with moq.
var _ metamorph.CallbackSender = &CallbackSenderMock{}

// CallbackSenderMock is a mock implementation of metamorph.CallbackSender.
//
//	func TestSomethingThatUsesCallbackSender(t *testing.T) {
//
//		// make and configure a mocked metamorph.CallbackSender
//		mockedCallbackSender := &CallbackSenderMock{
//			SendCallbackFunc: func(data *store.StoreData)  {
//				panic("mock out the SendCallback method")
//			},
//		}
//
//		// use mockedCallbackSender in code that requires metamorph.CallbackSender
//		// and then make assertions.
//
//	}
type CallbackSenderMock struct {
	// SendCallbackFunc mocks the SendCallback method.
	SendCallbackFunc func(data *store.StoreData)

	// calls tracks calls to the methods.
	calls struct {
		// SendCallback holds details about calls to the SendCallback method.
		SendCallback []struct {
			// Data is the data argument value.
			Data *store.StoreData
		}
	}
	lockSendCallback sync.RWMutex
}

// SendCallback calls SendCallbackFunc.
func (mock *CallbackSenderMock) SendCallback(data *store.StoreData) {
	if mock.SendCallbackFunc == nil {
		panic("CallbackSenderMock.SendCallbackFunc: method is nil but CallbackSender.SendCallback was just called")
	}
	callInfo := struct {
		Data *store.StoreData
	}{
		Data: data,
	}
	mock.lockSendCallback.Lock()
	mock.calls.SendCallback = append(mock.calls.SendCallback, callInfo)
	mock.lockSendCallback.Unlock()
	mock.SendCallbackFunc(data)
}

// SendCallbackCalls gets all the calls that were made to SendCallback.
// Check the length with:
//
//	len(mockedCallbackSender.SendCallbackCalls())
func (mock *CallbackSenderMock) SendCallbackCalls() []struct {
	Data *store.StoreData
} {
	var calls []struct {
		Data *store.StoreData
	}
	mock.lockSendCallback.RLock()
	calls = mock.calls.SendCallback
	mock.lockSendCallback.RUnlock()
	return calls
}
