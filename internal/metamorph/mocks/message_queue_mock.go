// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/metamorph"
	"sync"
)

// Ensure, that MessageQueueClientMock does implement metamorph.MessageQueueClient.
// If this is not the case, regenerate this file with moq.
var _ metamorph.MessageQueueClient = &MessageQueueClientMock{}

// MessageQueueClientMock is a mock implementation of metamorph.MessageQueueClient.
//
//	func TestSomethingThatUsesMessageQueueClient(t *testing.T) {
//
//		// make and configure a mocked metamorph.MessageQueueClient
//		mockedMessageQueueClient := &MessageQueueClientMock{
//			PublishRegisterTxsFunc: func(hash []byte) error {
//				panic("mock out the PublishRegisterTxs method")
//			},
//			PublishRequestTxFunc: func(hash []byte) error {
//				panic("mock out the PublishRequestTx method")
//			},
//			ShutdownFunc: func() error {
//				panic("mock out the Shutdown method")
//			},
//			SubscribeMinedTxsFunc: func() error {
//				panic("mock out the SubscribeMinedTxs method")
//			},
//			SubscribeSubmittedTxFunc: func() error {
//				panic("mock out the SubscribeSubmittedTx method")
//			},
//		}
//
//		// use mockedMessageQueueClient in code that requires metamorph.MessageQueueClient
//		// and then make assertions.
//
//	}
type MessageQueueClientMock struct {
	// PublishRegisterTxsFunc mocks the PublishRegisterTxs method.
	PublishRegisterTxsFunc func(hash []byte) error

	// PublishRequestTxFunc mocks the PublishRequestTx method.
	PublishRequestTxFunc func(hash []byte) error

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func() error

	// SubscribeMinedTxsFunc mocks the SubscribeMinedTxs method.
	SubscribeMinedTxsFunc func() error

	// SubscribeSubmittedTxFunc mocks the SubscribeSubmittedTx method.
	SubscribeSubmittedTxFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// PublishRegisterTxs holds details about calls to the PublishRegisterTxs method.
		PublishRegisterTxs []struct {
			// Hash is the hash argument value.
			Hash []byte
		}
		// PublishRequestTx holds details about calls to the PublishRequestTx method.
		PublishRequestTx []struct {
			// Hash is the hash argument value.
			Hash []byte
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
		// SubscribeMinedTxs holds details about calls to the SubscribeMinedTxs method.
		SubscribeMinedTxs []struct {
		}
		// SubscribeSubmittedTx holds details about calls to the SubscribeSubmittedTx method.
		SubscribeSubmittedTx []struct {
		}
	}
	lockPublishRegisterTxs   sync.RWMutex
	lockPublishRequestTx     sync.RWMutex
	lockShutdown             sync.RWMutex
	lockSubscribeMinedTxs    sync.RWMutex
	lockSubscribeSubmittedTx sync.RWMutex
}

// PublishRegisterTxs calls PublishRegisterTxsFunc.
func (mock *MessageQueueClientMock) PublishRegisterTxs(hash []byte) error {
	if mock.PublishRegisterTxsFunc == nil {
		panic("MessageQueueClientMock.PublishRegisterTxsFunc: method is nil but MessageQueueClient.PublishRegisterTxs was just called")
	}
	callInfo := struct {
		Hash []byte
	}{
		Hash: hash,
	}
	mock.lockPublishRegisterTxs.Lock()
	mock.calls.PublishRegisterTxs = append(mock.calls.PublishRegisterTxs, callInfo)
	mock.lockPublishRegisterTxs.Unlock()
	return mock.PublishRegisterTxsFunc(hash)
}

// PublishRegisterTxsCalls gets all the calls that were made to PublishRegisterTxs.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishRegisterTxsCalls())
func (mock *MessageQueueClientMock) PublishRegisterTxsCalls() []struct {
	Hash []byte
} {
	var calls []struct {
		Hash []byte
	}
	mock.lockPublishRegisterTxs.RLock()
	calls = mock.calls.PublishRegisterTxs
	mock.lockPublishRegisterTxs.RUnlock()
	return calls
}

// PublishRequestTx calls PublishRequestTxFunc.
func (mock *MessageQueueClientMock) PublishRequestTx(hash []byte) error {
	if mock.PublishRequestTxFunc == nil {
		panic("MessageQueueClientMock.PublishRequestTxFunc: method is nil but MessageQueueClient.PublishRequestTx was just called")
	}
	callInfo := struct {
		Hash []byte
	}{
		Hash: hash,
	}
	mock.lockPublishRequestTx.Lock()
	mock.calls.PublishRequestTx = append(mock.calls.PublishRequestTx, callInfo)
	mock.lockPublishRequestTx.Unlock()
	return mock.PublishRequestTxFunc(hash)
}

// PublishRequestTxCalls gets all the calls that were made to PublishRequestTx.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishRequestTxCalls())
func (mock *MessageQueueClientMock) PublishRequestTxCalls() []struct {
	Hash []byte
} {
	var calls []struct {
		Hash []byte
	}
	mock.lockPublishRequestTx.RLock()
	calls = mock.calls.PublishRequestTx
	mock.lockPublishRequestTx.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *MessageQueueClientMock) Shutdown() error {
	if mock.ShutdownFunc == nil {
		panic("MessageQueueClientMock.ShutdownFunc: method is nil but MessageQueueClient.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedMessageQueueClient.ShutdownCalls())
func (mock *MessageQueueClientMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// SubscribeMinedTxs calls SubscribeMinedTxsFunc.
func (mock *MessageQueueClientMock) SubscribeMinedTxs() error {
	if mock.SubscribeMinedTxsFunc == nil {
		panic("MessageQueueClientMock.SubscribeMinedTxsFunc: method is nil but MessageQueueClient.SubscribeMinedTxs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscribeMinedTxs.Lock()
	mock.calls.SubscribeMinedTxs = append(mock.calls.SubscribeMinedTxs, callInfo)
	mock.lockSubscribeMinedTxs.Unlock()
	return mock.SubscribeMinedTxsFunc()
}

// SubscribeMinedTxsCalls gets all the calls that were made to SubscribeMinedTxs.
// Check the length with:
//
//	len(mockedMessageQueueClient.SubscribeMinedTxsCalls())
func (mock *MessageQueueClientMock) SubscribeMinedTxsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscribeMinedTxs.RLock()
	calls = mock.calls.SubscribeMinedTxs
	mock.lockSubscribeMinedTxs.RUnlock()
	return calls
}

// SubscribeSubmittedTx calls SubscribeSubmittedTxFunc.
func (mock *MessageQueueClientMock) SubscribeSubmittedTx() error {
	if mock.SubscribeSubmittedTxFunc == nil {
		panic("MessageQueueClientMock.SubscribeSubmittedTxFunc: method is nil but MessageQueueClient.SubscribeSubmittedTx was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscribeSubmittedTx.Lock()
	mock.calls.SubscribeSubmittedTx = append(mock.calls.SubscribeSubmittedTx, callInfo)
	mock.lockSubscribeSubmittedTx.Unlock()
	return mock.SubscribeSubmittedTxFunc()
}

// SubscribeSubmittedTxCalls gets all the calls that were made to SubscribeSubmittedTx.
// Check the length with:
//
//	len(mockedMessageQueueClient.SubscribeSubmittedTxCalls())
func (mock *MessageQueueClientMock) SubscribeSubmittedTxCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscribeSubmittedTx.RLock()
	calls = mock.calls.SubscribeSubmittedTx
	mock.lockSubscribeSubmittedTx.RUnlock()
	return calls
}
