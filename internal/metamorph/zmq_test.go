package metamorph_test

import (
	"log/slog"
	"net/url"
	"os"
	"testing"
	"time"

	"github.com/bitcoin-sv/arc/internal/metamorph"
	"github.com/bitcoin-sv/arc/internal/metamorph/metamorph_api"
	"github.com/bitcoin-sv/arc/internal/metamorph/mocks"
	"github.com/bitcoin-sv/arc/internal/testdata"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const (
	msgMissingInputs = "7b2266726f6d426c6f636b223a2066616c73652c22736f75726365223a2022703270222c2261646472657373223a20223132372e302e302e313a3135323234222c226e6f64654964223a2037303139352c2274786964223a202234616531643230396131616165326134616137303365326164646166393133356634613162316364306438373032303033376561353631396434393566373137222c2273697a65223a203139322c22686578223ac226973496e76616c6964223a20747275652c22697356616c69646174696f6e4572726f72223a2066616c73652c2269734d697373696e67496e70757473223a20747275652c226973446f75626c655370656e644465746563746564223a2066616c73652c2269734d656d706f6f6c436f6e666c6963744465746563746564223a2066616c73652c2269734e6f6e46696e616c223a2066616c73652c22697356616c69646174696f6e54696d656f75744578636565646564223a2066616c73652c2269735374616e646172645478223a20747275652c2272656a656374696f6e436f6465223a20302c2272656a656374696f6e526561736f6e223a2022222c22636f6c6c6964656457697468223a205b5d2c2272656a656374696f6e54696d65223a2022323032332d31312d31335431333a33393a32365a227d"
	// msgDoubleSpendAttempted has 1 competing tx in the msg
	msgDoubleSpendAttempted = "7b2266726f6d426c6f636b223a2066616c73652c22736f75726365223a2022703270222c2261646472657373223a20226e6f6465323a3138333333222c226e6f64654964223a20302c2274786964223a202266393864336338653433323732663832616363306161613436306163316362343365336531333133366138656362313963306534626562356334323137386633222c2273697a65223a203139322c22686578223ac226973496e76616c6964223a20747275652c22697356616c69646174696f6e4572726f72223a2066616c73652c2269734d697373696e67496e70757473223a2066616c73652c226973446f75626c655370656e644465746563746564223a2066616c73652c2269734d656d706f6f6c436f6e666c6963744465746563746564223a20747275652c2269734e6f6e46696e616c223a2066616c73652c22697356616c69646174696f6e54696d656f75744578636565646564223a2066616c73652c2269735374616e646172645478223a20747275652c2272656a656374696f6e436f6465223a203235382c2272656a656374696f6e526561736f6e223a202274786e2d6d656d706f6f6c2d636f6e666c696374222c22636f6c6c6964656457697468223a205b7b2274786964223a202233393965656538386366343966626639633763343939636231633532316164393737646439616366373738653036366332626533313064376366373639616562222c2273697a65223a203139322c22686578223a2022303130303030303030313435313436613536663338613266366261373930336562326139623933333138323736356333313534616361353764643361343336303532643837616563613630303030303030303662343833303435303232313030643962323732396461306436663966646137363234646461613339323331323131343132613037633565313161613839663435356535393536373466626533353032323037356239336565393965323531346664396630656266653632646165643264396231343137666366346362323532383163613730353832393339666461636330343132313033356563623137373330353966333535333830383038366435326232336136613434343633383263333765613431323536333936646464366264353638616561666666666666666666303130613030303030303030303030303030313937366139313437666564613830303634346433316362666234653936643434346661663863663330626365636638383861633030303030303030227d5d2c2272656a656374696f6e54696d65223a2022323032342d30372d32335431323a32383a30335a227d"
)

func TestZMQ(t *testing.T) {
	testCases := []struct {
		name                  string
		eventTopic            string
		eventMsg              string
		expectedStatus        metamorph_api.Status
		expectedStatusesCount int // double spend will return multiple statuses for all competing txs
	}{
		{
			name:                  "invalidtx - missing inputs",
			eventTopic:            "invalidtx",
			eventMsg:              msgMissingInputs,
			expectedStatus:        metamorph_api.Status_SEEN_IN_ORPHAN_MEMPOOL,
			expectedStatusesCount: 1,
		},
		{
			name:                  "invalidtx - double spend",
			eventTopic:            "invalidtx",
			eventMsg:              msgDoubleSpendAttempted,
			expectedStatus:        metamorph_api.Status_DOUBLE_SPEND_ATTEMPTED,
			expectedStatusesCount: 2, // one for the competing tx
		},
		{
			name:                  "hashtx2 - valid",
			eventTopic:            "hashtx2",
			eventMsg:              testdata.TX1Hash.String(),
			expectedStatus:        metamorph_api.Status_ACCEPTED_BY_NETWORK,
			expectedStatusesCount: 1,
		},
	}

	logger := slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))

	for _, tc := range testCases {
		mockedZMQ := &mocks.ZMQIMock{
			SubscribeFunc: func(s string, stringsCh chan []string) error {
				if s != tc.eventTopic {
					return nil
				}
				event := make([]string, 0)
				event = append(event, tc.eventTopic)
				event = append(event, tc.eventMsg)
				event = append(event, "2459")
				stringsCh <- event
				return nil
			},
		}

		statuses := make(chan *metamorph.PeerTxMessage, tc.expectedStatusesCount)

		zmqURL, err := url.Parse("https://some-url.com")
		require.NoError(t, err)

		zmq := metamorph.NewZMQ(zmqURL, statuses, logger)
		err = zmq.Start(mockedZMQ)
		require.NoError(t, err)

		var status *metamorph.PeerTxMessage
		sCounter := 0
		for i := 0; i < tc.expectedStatusesCount; i++ {
			select {
			case status = <-statuses:
				sCounter++
				assert.Equal(t, tc.expectedStatus, status.Status)
			case <-time.After(time.Second):
				t.Fatal("timed out waiting for status")
			}
		}

		assert.Equal(t, tc.expectedStatusesCount, sCounter)
	}
}
