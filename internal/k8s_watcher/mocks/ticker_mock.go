// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/k8s_watcher"
	"sync"
	"time"
)

// Ensure, that TickerMock does implement k8swatcher.Ticker.
// If this is not the case, regenerate this file with moq.
var _ k8swatcher.Ticker = &TickerMock{}

// TickerMock is a mock implementation of k8swatcher.Ticker.
//
//	func TestSomethingThatUsesTicker(t *testing.T) {
//
//		// make and configure a mocked k8swatcher.Ticker
//		mockedTicker := &TickerMock{
//			StopFunc: func()  {
//				panic("mock out the Stop method")
//			},
//			TickFunc: func() <-chan time.Time {
//				panic("mock out the Tick method")
//			},
//		}
//
//		// use mockedTicker in code that requires k8swatcher.Ticker
//		// and then make assertions.
//
//	}
type TickerMock struct {
	// StopFunc mocks the Stop method.
	StopFunc func()

	// TickFunc mocks the Tick method.
	TickFunc func() <-chan time.Time

	// calls tracks calls to the methods.
	calls struct {
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
		// Tick holds details about calls to the Tick method.
		Tick []struct {
		}
	}
	lockStop sync.RWMutex
	lockTick sync.RWMutex
}

// Stop calls StopFunc.
func (mock *TickerMock) Stop() {
	if mock.StopFunc == nil {
		panic("TickerMock.StopFunc: method is nil but Ticker.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedTicker.StopCalls())
func (mock *TickerMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

// Tick calls TickFunc.
func (mock *TickerMock) Tick() <-chan time.Time {
	if mock.TickFunc == nil {
		panic("TickerMock.TickFunc: method is nil but Ticker.Tick was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTick.Lock()
	mock.calls.Tick = append(mock.calls.Tick, callInfo)
	mock.lockTick.Unlock()
	return mock.TickFunc()
}

// TickCalls gets all the calls that were made to Tick.
// Check the length with:
//
//	len(mockedTicker.TickCalls())
func (mock *TickerMock) TickCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTick.RLock()
	calls = mock.calls.Tick
	mock.lockTick.RUnlock()
	return calls
}
