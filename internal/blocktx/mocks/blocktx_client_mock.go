// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/blocktx"
	"sync"
)

// Ensure, that WatcherMock does implement blocktx.Watcher.
// If this is not the case, regenerate this file with moq.
var _ blocktx.Watcher = &WatcherMock{}

// WatcherMock is a mock implementation of blocktx.Watcher.
//
//	func TestSomethingThatUsesWatcher(t *testing.T) {
//
//		// make and configure a mocked blocktx.Watcher
//		mockedWatcher := &WatcherMock{
//			ClearBlocksFunc: func(ctx context.Context, retentionDays int32) (int64, error) {
//				panic("mock out the ClearBlocks method")
//			},
//			DelUnfinishedBlockProcessingFunc: func(ctx context.Context, processedBy string) (int64, error) {
//				panic("mock out the DelUnfinishedBlockProcessing method")
//			},
//			HealthFunc: func(ctx context.Context) error {
//				panic("mock out the Health method")
//			},
//		}
//
//		// use mockedWatcher in code that requires blocktx.Watcher
//		// and then make assertions.
//
//	}
type WatcherMock struct {
	// ClearBlocksFunc mocks the ClearBlocks method.
	ClearBlocksFunc func(ctx context.Context, retentionDays int32) (int64, error)

	// DelUnfinishedBlockProcessingFunc mocks the DelUnfinishedBlockProcessing method.
	DelUnfinishedBlockProcessingFunc func(ctx context.Context, processedBy string) (int64, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// ClearBlocks holds details about calls to the ClearBlocks method.
		ClearBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RetentionDays is the retentionDays argument value.
			RetentionDays int32
		}
		// DelUnfinishedBlockProcessing holds details about calls to the DelUnfinishedBlockProcessing method.
		DelUnfinishedBlockProcessing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProcessedBy is the processedBy argument value.
			ProcessedBy string
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClearBlocks                  sync.RWMutex
	lockDelUnfinishedBlockProcessing sync.RWMutex
	lockHealth                       sync.RWMutex
}

// ClearBlocks calls ClearBlocksFunc.
func (mock *WatcherMock) ClearBlocks(ctx context.Context, retentionDays int32) (int64, error) {
	if mock.ClearBlocksFunc == nil {
		panic("WatcherMock.ClearBlocksFunc: method is nil but Watcher.ClearBlocks was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RetentionDays int32
	}{
		Ctx:           ctx,
		RetentionDays: retentionDays,
	}
	mock.lockClearBlocks.Lock()
	mock.calls.ClearBlocks = append(mock.calls.ClearBlocks, callInfo)
	mock.lockClearBlocks.Unlock()
	return mock.ClearBlocksFunc(ctx, retentionDays)
}

// ClearBlocksCalls gets all the calls that were made to ClearBlocks.
// Check the length with:
//
//	len(mockedWatcher.ClearBlocksCalls())
func (mock *WatcherMock) ClearBlocksCalls() []struct {
	Ctx           context.Context
	RetentionDays int32
} {
	var calls []struct {
		Ctx           context.Context
		RetentionDays int32
	}
	mock.lockClearBlocks.RLock()
	calls = mock.calls.ClearBlocks
	mock.lockClearBlocks.RUnlock()
	return calls
}

// DelUnfinishedBlockProcessing calls DelUnfinishedBlockProcessingFunc.
func (mock *WatcherMock) DelUnfinishedBlockProcessing(ctx context.Context, processedBy string) (int64, error) {
	if mock.DelUnfinishedBlockProcessingFunc == nil {
		panic("WatcherMock.DelUnfinishedBlockProcessingFunc: method is nil but Watcher.DelUnfinishedBlockProcessing was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProcessedBy string
	}{
		Ctx:         ctx,
		ProcessedBy: processedBy,
	}
	mock.lockDelUnfinishedBlockProcessing.Lock()
	mock.calls.DelUnfinishedBlockProcessing = append(mock.calls.DelUnfinishedBlockProcessing, callInfo)
	mock.lockDelUnfinishedBlockProcessing.Unlock()
	return mock.DelUnfinishedBlockProcessingFunc(ctx, processedBy)
}

// DelUnfinishedBlockProcessingCalls gets all the calls that were made to DelUnfinishedBlockProcessing.
// Check the length with:
//
//	len(mockedWatcher.DelUnfinishedBlockProcessingCalls())
func (mock *WatcherMock) DelUnfinishedBlockProcessingCalls() []struct {
	Ctx         context.Context
	ProcessedBy string
} {
	var calls []struct {
		Ctx         context.Context
		ProcessedBy string
	}
	mock.lockDelUnfinishedBlockProcessing.RLock()
	calls = mock.calls.DelUnfinishedBlockProcessing
	mock.lockDelUnfinishedBlockProcessing.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *WatcherMock) Health(ctx context.Context) error {
	if mock.HealthFunc == nil {
		panic("WatcherMock.HealthFunc: method is nil but Watcher.Health was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedWatcher.HealthCalls())
func (mock *WatcherMock) HealthCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}
