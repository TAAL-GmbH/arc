// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/blocktx"
	"google.golang.org/protobuf/reflect/protoreflect"
	"sync"
)

// Ensure, that MessageQueueClientMock does implement blocktx.MessageQueueClient.
// If this is not the case, regenerate this file with moq.
var _ blocktx.MessageQueueClient = &MessageQueueClientMock{}

// MessageQueueClientMock is a mock implementation of blocktx.MessageQueueClient.
//
//	func TestSomethingThatUsesMessageQueueClient(t *testing.T) {
//
//		// make and configure a mocked blocktx.MessageQueueClient
//		mockedMessageQueueClient := &MessageQueueClientMock{
//			PublishMarshalFunc: func(topic string, m protoreflect.ProtoMessage) error {
//				panic("mock out the PublishMarshal method")
//			},
//			ShutdownFunc: func() error {
//				panic("mock out the Shutdown method")
//			},
//			SubscribeRegisterTxsFunc: func() error {
//				panic("mock out the SubscribeRegisterTxs method")
//			},
//			SubscribeRequestTxsFunc: func() error {
//				panic("mock out the SubscribeRequestTxs method")
//			},
//		}
//
//		// use mockedMessageQueueClient in code that requires blocktx.MessageQueueClient
//		// and then make assertions.
//
//	}
type MessageQueueClientMock struct {
	// PublishMarshalFunc mocks the PublishMarshal method.
	PublishMarshalFunc func(topic string, m protoreflect.ProtoMessage) error

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func() error

	// SubscribeRegisterTxsFunc mocks the SubscribeRegisterTxs method.
	SubscribeRegisterTxsFunc func() error

	// SubscribeRequestTxsFunc mocks the SubscribeRequestTxs method.
	SubscribeRequestTxsFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// PublishMarshal holds details about calls to the PublishMarshal method.
		PublishMarshal []struct {
			// Topic is the topic argument value.
			Topic string
			// M is the m argument value.
			M protoreflect.ProtoMessage
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
		// SubscribeRegisterTxs holds details about calls to the SubscribeRegisterTxs method.
		SubscribeRegisterTxs []struct {
		}
		// SubscribeRequestTxs holds details about calls to the SubscribeRequestTxs method.
		SubscribeRequestTxs []struct {
		}
	}
	lockPublishMarshal       sync.RWMutex
	lockShutdown             sync.RWMutex
	lockSubscribeRegisterTxs sync.RWMutex
	lockSubscribeRequestTxs  sync.RWMutex
}

// PublishMarshal calls PublishMarshalFunc.
func (mock *MessageQueueClientMock) PublishMarshal(topic string, m protoreflect.ProtoMessage) error {
	if mock.PublishMarshalFunc == nil {
		panic("MessageQueueClientMock.PublishMarshalFunc: method is nil but MessageQueueClient.PublishMarshal was just called")
	}
	callInfo := struct {
		Topic string
		M     protoreflect.ProtoMessage
	}{
		Topic: topic,
		M:     m,
	}
	mock.lockPublishMarshal.Lock()
	mock.calls.PublishMarshal = append(mock.calls.PublishMarshal, callInfo)
	mock.lockPublishMarshal.Unlock()
	return mock.PublishMarshalFunc(topic, m)
}

// PublishMarshalCalls gets all the calls that were made to PublishMarshal.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishMarshalCalls())
func (mock *MessageQueueClientMock) PublishMarshalCalls() []struct {
	Topic string
	M     protoreflect.ProtoMessage
} {
	var calls []struct {
		Topic string
		M     protoreflect.ProtoMessage
	}
	mock.lockPublishMarshal.RLock()
	calls = mock.calls.PublishMarshal
	mock.lockPublishMarshal.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *MessageQueueClientMock) Shutdown() error {
	if mock.ShutdownFunc == nil {
		panic("MessageQueueClientMock.ShutdownFunc: method is nil but MessageQueueClient.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedMessageQueueClient.ShutdownCalls())
func (mock *MessageQueueClientMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// SubscribeRegisterTxs calls SubscribeRegisterTxsFunc.
func (mock *MessageQueueClientMock) SubscribeRegisterTxs() error {
	if mock.SubscribeRegisterTxsFunc == nil {
		panic("MessageQueueClientMock.SubscribeRegisterTxsFunc: method is nil but MessageQueueClient.SubscribeRegisterTxs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscribeRegisterTxs.Lock()
	mock.calls.SubscribeRegisterTxs = append(mock.calls.SubscribeRegisterTxs, callInfo)
	mock.lockSubscribeRegisterTxs.Unlock()
	return mock.SubscribeRegisterTxsFunc()
}

// SubscribeRegisterTxsCalls gets all the calls that were made to SubscribeRegisterTxs.
// Check the length with:
//
//	len(mockedMessageQueueClient.SubscribeRegisterTxsCalls())
func (mock *MessageQueueClientMock) SubscribeRegisterTxsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscribeRegisterTxs.RLock()
	calls = mock.calls.SubscribeRegisterTxs
	mock.lockSubscribeRegisterTxs.RUnlock()
	return calls
}

// SubscribeRequestTxs calls SubscribeRequestTxsFunc.
func (mock *MessageQueueClientMock) SubscribeRequestTxs() error {
	if mock.SubscribeRequestTxsFunc == nil {
		panic("MessageQueueClientMock.SubscribeRequestTxsFunc: method is nil but MessageQueueClient.SubscribeRequestTxs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscribeRequestTxs.Lock()
	mock.calls.SubscribeRequestTxs = append(mock.calls.SubscribeRequestTxs, callInfo)
	mock.lockSubscribeRequestTxs.Unlock()
	return mock.SubscribeRequestTxsFunc()
}

// SubscribeRequestTxsCalls gets all the calls that were made to SubscribeRequestTxs.
// Check the length with:
//
//	len(mockedMessageQueueClient.SubscribeRequestTxsCalls())
func (mock *MessageQueueClientMock) SubscribeRequestTxsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscribeRequestTxs.RLock()
	calls = mock.calls.SubscribeRequestTxs
	mock.lockSubscribeRequestTxs.RUnlock()
	return calls
}
