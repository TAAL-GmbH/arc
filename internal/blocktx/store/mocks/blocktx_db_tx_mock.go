// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/blocktx/store"
	"sync"
)

// Ensure, that DbTransactionMock does implement store.DbTransaction.
// If this is not the case, regenerate this file with moq.
var _ store.DbTransaction = &DbTransactionMock{}

// DbTransactionMock is a mock implementation of store.DbTransaction.
//
//	func TestSomethingThatUsesDbTransaction(t *testing.T) {
//
//		// make and configure a mocked store.DbTransaction
//		mockedDbTransaction := &DbTransactionMock{
//			CommitFunc: func() error {
//				panic("mock out the Commit method")
//			},
//			LockBlocksTableFunc: func(ctx context.Context) error {
//				panic("mock out the LockBlocksTable method")
//			},
//			RollbackFunc: func() error {
//				panic("mock out the Rollback method")
//			},
//		}
//
//		// use mockedDbTransaction in code that requires store.DbTransaction
//		// and then make assertions.
//
//	}
type DbTransactionMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func() error

	// LockBlocksTableFunc mocks the LockBlocksTable method.
	LockBlocksTableFunc func(ctx context.Context) error

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
		}
		// LockBlocksTable holds details about calls to the LockBlocksTable method.
		LockBlocksTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
		}
	}
	lockCommit          sync.RWMutex
	lockLockBlocksTable sync.RWMutex
	lockRollback        sync.RWMutex
}

// Commit calls CommitFunc.
func (mock *DbTransactionMock) Commit() error {
	if mock.CommitFunc == nil {
		panic("DbTransactionMock.CommitFunc: method is nil but DbTransaction.Commit was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc()
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedDbTransaction.CommitCalls())
func (mock *DbTransactionMock) CommitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// LockBlocksTable calls LockBlocksTableFunc.
func (mock *DbTransactionMock) LockBlocksTable(ctx context.Context) error {
	if mock.LockBlocksTableFunc == nil {
		panic("DbTransactionMock.LockBlocksTableFunc: method is nil but DbTransaction.LockBlocksTable was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLockBlocksTable.Lock()
	mock.calls.LockBlocksTable = append(mock.calls.LockBlocksTable, callInfo)
	mock.lockLockBlocksTable.Unlock()
	return mock.LockBlocksTableFunc(ctx)
}

// LockBlocksTableCalls gets all the calls that were made to LockBlocksTable.
// Check the length with:
//
//	len(mockedDbTransaction.LockBlocksTableCalls())
func (mock *DbTransactionMock) LockBlocksTableCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLockBlocksTable.RLock()
	calls = mock.calls.LockBlocksTable
	mock.lockLockBlocksTable.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *DbTransactionMock) Rollback() error {
	if mock.RollbackFunc == nil {
		panic("DbTransactionMock.RollbackFunc: method is nil but DbTransaction.Rollback was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc()
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedDbTransaction.RollbackCalls())
func (mock *DbTransactionMock) RollbackCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}
