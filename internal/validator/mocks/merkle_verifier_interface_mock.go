// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/beef"
	"github.com/bitcoin-sv/arc/internal/validator"
	"sync"
)

// Ensure, that MerkleVerifierIMock does implement validator.MerkleVerifierI.
// If this is not the case, regenerate this file with moq.
var _ validator.MerkleVerifierI = &MerkleVerifierIMock{}

// MerkleVerifierIMock is a mock implementation of validator.MerkleVerifierI.
//
//	func TestSomethingThatUsesMerkleVerifierI(t *testing.T) {
//
//		// make and configure a mocked validator.MerkleVerifierI
//		mockedMerkleVerifierI := &MerkleVerifierIMock{
//			VerifyFunc: func(ctx context.Context, request []beef.MerkleRootVerificationRequest) ([]uint64, error) {
//				panic("mock out the Verify method")
//			},
//		}
//
//		// use mockedMerkleVerifierI in code that requires validator.MerkleVerifierI
//		// and then make assertions.
//
//	}
type MerkleVerifierIMock struct {
	// VerifyFunc mocks the Verify method.
	VerifyFunc func(ctx context.Context, request []beef.MerkleRootVerificationRequest) ([]uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request []beef.MerkleRootVerificationRequest
		}
	}
	lockVerify sync.RWMutex
}

// Verify calls VerifyFunc.
func (mock *MerkleVerifierIMock) Verify(ctx context.Context, request []beef.MerkleRootVerificationRequest) ([]uint64, error) {
	if mock.VerifyFunc == nil {
		panic("MerkleVerifierIMock.VerifyFunc: method is nil but MerkleVerifierI.Verify was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request []beef.MerkleRootVerificationRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(ctx, request)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//
//	len(mockedMerkleVerifierI.VerifyCalls())
func (mock *MerkleVerifierIMock) VerifyCalls() []struct {
	Ctx     context.Context
	Request []beef.MerkleRootVerificationRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request []beef.MerkleRootVerificationRequest
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
